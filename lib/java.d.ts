// java.d.ts
// This file was generated by ts-java.
/// <reference path='../typings/bluebird/bluebird.d.ts' />


declare module 'redseal-java' {
  var Java: Java.NodeAPI;
  export = Java;
}

declare module 'java' {
  var Java: Java.NodeAPI;
  export = Java;
}

declare module Java {
  // Node-java has special handling for methods that return long or java.lang.Long,
  // returning a Javascript Number but with an additional property longValue.
  interface longValue_t extends Number {
    longValue: string;
  }

  // Node-java can automatically coerce a javascript string into a java.lang.String.
  // This special type alias allows to declare that possiblity to Typescript.
  export type string_t = string | java.lang.String;

  // Java methods that take java.lang.Object parameters implicitly will take a java.lang.String.
  // But string_t is not sufficient for this case, we need object_t.
  export type object_t = java.lang.Object | string | number | longValue_t;

  // Java methods that take long or java.lang.Long parameters may take javascript numbers,
  // longValue_t (see above) or java.lang.Long.
  // This special type alias allows to declare that possiblity to Typescript.
  export type long_t = number | longValue_t | java.lang.Long;

  // Handling of other primitive numeric types is simpler, as there is no loss of precision.
  export type boolean_t = boolean | java.lang.Boolean;
  export type short_t = number | java.lang.Short;
  export type integer_t = number | java.lang.Integer;
  export type double_t = number | java.lang.Double;
  export type float_t = number | java.lang.Float;
  export type number_t = number | java.lang.Number;

  export interface array_t<T> extends java.lang.Object {
    // This is an opaque type for a java array_t T[];
    // Use Java.newArray<T>(className, [...]) to create wherever a Java method expects a T[],
    // most notably for vararg parameteters.
    __dummy: T;
  }

  export type object_array_t = array_t<java.lang.Object> | object_t[];

  interface Callback<T> {
    (err: Error, result: T): void;
  }

  interface AsyncOptions {
    syncSuffix: string;
    asyncSuffix?: string;
    promiseSuffix?: string;
    promisify?: Function;
  }

  // *NodeAPI* declares methods & members exported by the node java module.
  interface NodeAPI {
    classpath: string[];
    asyncOptions: AsyncOptions;
    callMethod(instance: any, className: string, methodName: string, args: any[], callback: Callback<any>): void;
    callMethodSync(instance: any, className: string, methodName: string, ...args: any[]): any;
    callStaticMethodSync(className: string, methodName: string, ...args: any[]): any;
    instanceOf(javaObject: any, className: string): boolean;

    newShort(val: number): java.lang.Short;
    newLong(val: number): java.lang.Long;
    newFloat(val: number): java.lang.Float;
    newDouble(val: number): java.lang.Double;

    getClassLoader(): java.lang.ClassLoader;

    newArray(className: 'java.util.AbstractList', arg: AbstractList[]): array_t<java.util.AbstractList>;
    newArray(className: 'java.util.AbstractCollection', arg: AbstractCollection[]): array_t<java.util.AbstractCollection>;
    newArray(className: 'java.util.AbstractSet', arg: AbstractSet[]): array_t<java.util.AbstractSet>;
    newArray(className: 'java.util.function_.Predicate', arg: Predicate[]): array_t<java.util.function_.Predicate>;
    newArray(className: 'org.codehaus.groovy.util.ReferenceBundle', arg: ReferenceBundle[]): array_t<org.codehaus.groovy.util.ReferenceBundle>;
    newArray(className: 'java.util.function_.Supplier', arg: Supplier[]): array_t<java.util.function_.Supplier>;
    newArray(className: 'java.util.Set', arg: Set[]): array_t<java.util.Set>;
    newArray(className: 'groovy.lang.GroovyObjectSupport', arg: GroovyObjectSupport[]): array_t<groovy.lang.GroovyObjectSupport>;
    newArray(className: 'java.lang.Class', arg: Class[]): array_t<java.lang.Class>;
    newArray(className: 'java.nio.charset.Charset', arg: Charset[]): array_t<java.nio.charset.Charset>;
    newArray(className: 'com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder', arg: GraphSONWriter$Builder[]): array_t<com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder>;
    newArray(className: 'groovy.lang.Binding', arg: Binding[]): array_t<groovy.lang.Binding>;
    newArray(className: 'com.tinkerpop.gremlin.process.computer.VertexProgram', arg: VertexProgram[]): array_t<com.tinkerpop.gremlin.process.computer.VertexProgram>;
    newArray(className: 'com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda', arg: ScriptEngineLambda[]): array_t<com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda>;
    newArray(className: 'java.lang.Double', arg: double_t[]): array_t<java.lang.Double>;
    newArray(className: 'java.lang.String', arg: string_t[]): array_t<java.lang.String>;
    newArray(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg: CompilerConfiguration[]): array_t<org.codehaus.groovy.control.CompilerConfiguration>;
    newArray(className: 'groovy.lang.MetaMethod', arg: MetaMethod[]): array_t<groovy.lang.MetaMethod>;
    newArray(className: 'java.lang.Iterable', arg: Iterable[]): array_t<java.lang.Iterable>;
    newArray(className: 'com.tinkerpop.gremlin.process.Traversal', arg: Traversal[]): array_t<com.tinkerpop.gremlin.process.Traversal>;
    newArray(className: 'com.tinkerpop.gremlin.process.computer.MapReduce', arg: MapReduce[]): array_t<com.tinkerpop.gremlin.process.computer.MapReduce>;
    newArray(className: 'javax.script.CompiledScript', arg: CompiledScript[]): array_t<javax.script.CompiledScript>;
    newArray(className: 'com.tinkerpop.gremlin.structure.Element', arg: Element[]): array_t<com.tinkerpop.gremlin.structure.Element>;
    newArray(className: 'java.lang.Float', arg: float_t[]): array_t<java.lang.Float>;
    newArray(className: 'com.tinkerpop.gremlin.process.graph.traversal.__', arg: __[]): array_t<com.tinkerpop.gremlin.process.graph.traversal.__>;
    newArray(className: 'java.lang.Short', arg: short_t[]): array_t<java.lang.Short>;
    newArray(className: 'com.tinkerpop.gremlin.structure.Property', arg: Property[]): array_t<com.tinkerpop.gremlin.structure.Property>;
    newArray(className: 'java.util.Map$Entry', arg: Map$Entry[]): array_t<java.util.Map$Entry>;
    newArray(className: 'java.lang.Integer', arg: integer_t[]): array_t<java.lang.Integer>;
    newArray(className: 'com.tinkerpop.gremlin.structure.Transaction', arg: Transaction[]): array_t<com.tinkerpop.gremlin.structure.Transaction>;
    newArray(className: 'groovy.lang.MetaBeanProperty', arg: MetaBeanProperty[]): array_t<groovy.lang.MetaBeanProperty>;
    newArray(className: 'groovy.lang.Reference', arg: Reference[]): array_t<groovy.lang.Reference>;
    newArray(className: 'com.tinkerpop.gremlin.structure.Direction', arg: Direction[]): array_t<com.tinkerpop.gremlin.structure.Direction>;
    newArray(className: 'java.util.ListIterator', arg: ListIterator[]): array_t<java.util.ListIterator>;
    newArray(className: 'java.nio.charset.StandardCharsets', arg: StandardCharsets[]): array_t<java.nio.charset.StandardCharsets>;
    newArray(className: 'java.util.function_.Consumer', arg: Consumer[]): array_t<java.util.function_.Consumer>;
    newArray(className: 'com.tinkerpop.gremlin.structure.VertexProperty', arg: VertexProperty[]): array_t<com.tinkerpop.gremlin.structure.VertexProperty>;
    newArray(className: 'com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter', arg: GraphSONWriter[]): array_t<com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter>;
    newArray(className: 'groovy.lang.IntRange', arg: IntRange[]): array_t<groovy.lang.IntRange>;
    newArray(className: 'java.util.Iterator', arg: Iterator[]): array_t<java.util.Iterator>;
    newArray(className: 'org.codehaus.groovy.ast.ClassNode', arg: ClassNode[]): array_t<org.codehaus.groovy.ast.ClassNode>;
    newArray(className: 'java.util.function_.Function', arg: Function[]): array_t<java.util.function_.Function>;
    newArray(className: 'com.tinkerpop.gremlin.process.computer.GraphComputer', arg: GraphComputer[]): array_t<com.tinkerpop.gremlin.process.computer.GraphComputer>;
    newArray(className: 'java.util.HashMap', arg: HashMap[]): array_t<java.util.HashMap>;
    newArray(className: 'groovy.lang.GroovyResourceLoader', arg: GroovyResourceLoader[]): array_t<groovy.lang.GroovyResourceLoader>;
    newArray(className: 'java.lang.Long', arg: long_t[]): array_t<java.lang.Long>;
    newArray(className: 'groovy.lang.DelegatingMetaClass', arg: DelegatingMetaClass[]): array_t<groovy.lang.DelegatingMetaClass>;
    newArray(className: 'com.tinkerpop.gremlin.structure.Compare', arg: Compare[]): array_t<com.tinkerpop.gremlin.structure.Compare>;
    newArray(className: 'com.tinkerpop.gremlin.structure.Edge', arg: Edge[]): array_t<com.tinkerpop.gremlin.structure.Edge>;
    newArray(className: 'javax.script.ScriptEngineFactory', arg: ScriptEngineFactory[]): array_t<javax.script.ScriptEngineFactory>;
    newArray(className: 'java.io.FileInputStream', arg: FileInputStream[]): array_t<java.io.FileInputStream>;
    newArray(className: 'groovy.lang.MetaClass', arg: MetaClass[]): array_t<groovy.lang.MetaClass>;
    newArray(className: 'java.lang.Object', arg: object_t[]): array_t<java.lang.Object>;
    newArray(className: 'java.util.function_.BiConsumer', arg: BiConsumer[]): array_t<java.util.function_.BiConsumer>;
    newArray(className: 'java.lang.Boolean', arg: boolean_t[]): array_t<java.lang.Boolean>;
    newArray(className: 'co.redseal.gremlinnode.function_.IdentityGlobFunction', arg: IdentityGlobFunction[]): array_t<co.redseal.gremlinnode.function_.IdentityGlobFunction>;
    newArray(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg: Groovysh[]): array_t<org.codehaus.groovy.tools.shell.Groovysh>;
    newArray(className: 'java.util.HashSet', arg: HashSet[]): array_t<java.util.HashSet>;
    newArray(className: 'java.lang.reflect.Array', arg: Array[]): array_t<java.lang.reflect.Array>;
    newArray(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyGraph', arg: StrategyGraph[]): array_t<com.tinkerpop.gremlin.structure.strategy.StrategyGraph>;
    newArray(className: 'java.lang.Enum', arg: Enum[]): array_t<java.lang.Enum>;
    newArray(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyContext', arg: StrategyContext[]): array_t<com.tinkerpop.gremlin.structure.strategy.StrategyContext>;
    newArray(className: 'java.util.function_.BiFunction', arg: BiFunction[]): array_t<java.util.function_.BiFunction>;
    newArray(className: 'java.io.ByteArrayOutputStream', arg: ByteArrayOutputStream[]): array_t<java.io.ByteArrayOutputStream>;
    newArray(className: 'groovy.lang.GroovyCodeSource', arg: GroovyCodeSource[]): array_t<groovy.lang.GroovyCodeSource>;
    newArray(className: 'java.util.Comparator', arg: Comparator[]): array_t<java.util.Comparator>;
    newArray(className: 'co.redseal.gremlinnode.function_.GlobFunction', arg: GlobFunction[]): array_t<co.redseal.gremlinnode.function_.GlobFunction>;
    newArray(className: 'java.util.ArrayList', arg: ArrayList[]): array_t<java.util.ArrayList>;
    newArray(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg: CompilationCustomizer[]): array_t<org.codehaus.groovy.control.customizers.CompilationCustomizer>;
    newArray(className: 'java.lang.ClassLoader', arg: ClassLoader[]): array_t<java.lang.ClassLoader>;
    newArray(className: 'co.redseal.gremlinnode.testing.TestClass', arg: TestClass[]): array_t<co.redseal.gremlinnode.testing.TestClass>;
    newArray(className: 'com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal', arg: GraphTraversal[]): array_t<com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal>;
    newArray(className: 'org.codehaus.groovy.util.ManagedReference', arg: ManagedReference[]): array_t<org.codehaus.groovy.util.ManagedReference>;
    newArray(className: 'co.redseal.gremlinnode.function_.AbstractGlobFunction', arg: AbstractGlobFunction[]): array_t<co.redseal.gremlinnode.function_.AbstractGlobFunction>;
    newArray(className: 'com.tinkerpop.gremlin.structure.Vertex', arg: Vertex[]): array_t<com.tinkerpop.gremlin.structure.Vertex>;
    newArray(className: 'co.redseal.gremlinnode.function_.NegateGlobFunction', arg: NegateGlobFunction[]): array_t<co.redseal.gremlinnode.function_.NegateGlobFunction>;
    newArray(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory', arg: TinkerFactory[]): array_t<com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory>;
    newArray(className: 'javax.script.ScriptEngine', arg: ScriptEngine[]): array_t<javax.script.ScriptEngine>;
    newArray(className: 'javax.script.Bindings', arg: Bindings[]): array_t<javax.script.Bindings>;
    newArray(className: 'javax.script.ScriptContext', arg: ScriptContext[]): array_t<javax.script.ScriptContext>;
    newArray(className: 'java.util.AbstractMap', arg: AbstractMap[]): array_t<java.util.AbstractMap>;
    newArray(className: 'com.tinkerpop.gremlin.structure.strategy.GraphStrategy', arg: GraphStrategy[]): array_t<com.tinkerpop.gremlin.structure.strategy.GraphStrategy>;
    newArray(className: 'groovy.lang.MetaProperty', arg: MetaProperty[]): array_t<groovy.lang.MetaProperty>;
    newArray(className: 'com.tinkerpop.gremlin.structure.Graph', arg: Graph[]): array_t<com.tinkerpop.gremlin.structure.Graph>;
    newArray(className: 'java.util.function_.BiPredicate', arg: BiPredicate[]): array_t<java.util.function_.BiPredicate>;
    newArray(className: 'javax.script.AbstractScriptEngine', arg: AbstractScriptEngine[]): array_t<javax.script.AbstractScriptEngine>;
    newArray(className: 'com.tinkerpop.gremlin.structure.Order', arg: Order[]): array_t<com.tinkerpop.gremlin.structure.Order>;
    newArray(className: 'com.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper', arg: GraphSONMapper[]): array_t<com.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper>;
    newArray(className: 'java.util.NoSuchElementException', arg: NoSuchElementException[]): array_t<java.util.NoSuchElementException>;
    newArray(className: 'java.util.function_.BinaryOperator', arg: BinaryOperator[]): array_t<java.util.function_.BinaryOperator>;
    newArray(className: 'co.redseal.gremlinnode.function_.GroovyLambda', arg: GroovyLambda[]): array_t<co.redseal.gremlinnode.function_.GroovyLambda>;
    newArray(className: 'groovy.lang.Closure', arg: Closure[]): array_t<groovy.lang.Closure>;
    newArray(className: 'org.codehaus.groovy.runtime.NullObject', arg: NullObject[]): array_t<org.codehaus.groovy.runtime.NullObject>;
    newArray(className: 'com.tinkerpop.gremlin.process.Scope', arg: Scope[]): array_t<com.tinkerpop.gremlin.process.Scope>;
    newArray(className: 'com.tinkerpop.gremlin.process.util.BulkSet', arg: BulkSet[]): array_t<com.tinkerpop.gremlin.process.util.BulkSet>;
    newArray(className: 'com.tinkerpop.gremlin.process.T', arg: T[]): array_t<com.tinkerpop.gremlin.process.T>;
    newArray(className: 'com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg: GremlinGroovyScriptEngine[]): array_t<com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine>;
    newArray(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph', arg: TinkerGraph[]): array_t<com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph>;
    newArray(className: 'java.util.Map', arg: Map[]): array_t<java.util.Map>;
    newArray(className: 'groovy.lang.GroovyClassLoader', arg: GroovyClassLoader[]): array_t<groovy.lang.GroovyClassLoader>;
    newArray(className: 'java.util.function_.UnaryOperator', arg: UnaryOperator[]): array_t<java.util.function_.UnaryOperator>;
    newArray(className: 'java.lang.Number', arg: number_t[]): array_t<java.lang.Number>;
    newArray(className: 'groovy.lang.Range', arg: Range[]): array_t<groovy.lang.Range>;
    newArray(className: 'com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg: GraphSONReader[]): array_t<com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader>;
    newArray(className: 'java.util.Collection', arg: Collection[]): array_t<java.util.Collection>;
    newArray(className: 'java.util.List', arg: List[]): array_t<java.util.List>;
    newArray(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg: AndThenGlobFunction[]): array_t<co.redseal.gremlinnode.function_.AndThenGlobFunction>;
    newArray(className: 'com.tinkerpop.gremlin.util.function_.TriConsumer', arg: TriConsumer[]): array_t<com.tinkerpop.gremlin.util.function_.TriConsumer>;
    newArray<T>(className: string, arg: any[]): array_t<T>;

    import(className: 'java.util.AbstractList'): java.util.AbstractList.Static;
    import(className: 'java.util.AbstractCollection'): java.util.AbstractCollection.Static;
    import(className: 'java.util.AbstractSet'): java.util.AbstractSet.Static;
    import(className: 'java.util.function_.Predicate'): java.util.function_.Predicate.Static;
    import(className: 'org.codehaus.groovy.util.ReferenceBundle'): org.codehaus.groovy.util.ReferenceBundle.Static;
    import(className: 'java.util.function_.Supplier'): java.util.function_.Supplier.Static;
    import(className: 'java.util.Set'): java.util.Set.Static;
    import(className: 'groovy.lang.GroovyObjectSupport'): groovy.lang.GroovyObjectSupport.Static;
    import(className: 'java.lang.Class'): java.lang.Class.Static;
    import(className: 'java.nio.charset.Charset'): java.nio.charset.Charset.Static;
    import(className: 'com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder'): com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder.Static;
    import(className: 'groovy.lang.Binding'): groovy.lang.Binding.Static;
    import(className: 'com.tinkerpop.gremlin.process.computer.VertexProgram'): com.tinkerpop.gremlin.process.computer.VertexProgram.Static;
    import(className: 'com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda'): com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda.Static;
    import(className: 'java.lang.Double'): java.lang.Double.Static;
    import(className: 'java.lang.String'): java.lang.String.Static;
    import(className: 'org.codehaus.groovy.control.CompilerConfiguration'): org.codehaus.groovy.control.CompilerConfiguration.Static;
    import(className: 'groovy.lang.MetaMethod'): groovy.lang.MetaMethod.Static;
    import(className: 'java.lang.Iterable'): java.lang.Iterable.Static;
    import(className: 'com.tinkerpop.gremlin.process.Traversal'): com.tinkerpop.gremlin.process.Traversal.Static;
    import(className: 'com.tinkerpop.gremlin.process.computer.MapReduce'): com.tinkerpop.gremlin.process.computer.MapReduce.Static;
    import(className: 'javax.script.CompiledScript'): javax.script.CompiledScript.Static;
    import(className: 'com.tinkerpop.gremlin.structure.Element'): com.tinkerpop.gremlin.structure.Element.Static;
    import(className: 'java.lang.Float'): java.lang.Float.Static;
    import(className: 'com.tinkerpop.gremlin.process.graph.traversal.__'): com.tinkerpop.gremlin.process.graph.traversal.__.Static;
    import(className: 'java.lang.Short'): java.lang.Short.Static;
    import(className: 'com.tinkerpop.gremlin.structure.Property'): com.tinkerpop.gremlin.structure.Property.Static;
    import(className: 'java.util.Map$Entry'): java.util.Map$Entry.Static;
    import(className: 'java.lang.Integer'): java.lang.Integer.Static;
    import(className: 'com.tinkerpop.gremlin.structure.Transaction'): com.tinkerpop.gremlin.structure.Transaction.Static;
    import(className: 'groovy.lang.MetaBeanProperty'): groovy.lang.MetaBeanProperty.Static;
    import(className: 'groovy.lang.Reference'): groovy.lang.Reference.Static;
    import(className: 'com.tinkerpop.gremlin.structure.Direction'): com.tinkerpop.gremlin.structure.Direction.Static;
    import(className: 'java.util.ListIterator'): java.util.ListIterator.Static;
    import(className: 'java.nio.charset.StandardCharsets'): java.nio.charset.StandardCharsets.Static;
    import(className: 'java.util.function_.Consumer'): java.util.function_.Consumer.Static;
    import(className: 'com.tinkerpop.gremlin.structure.VertexProperty'): com.tinkerpop.gremlin.structure.VertexProperty.Static;
    import(className: 'com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter'): com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.Static;
    import(className: 'groovy.lang.IntRange'): groovy.lang.IntRange.Static;
    import(className: 'java.util.Iterator'): java.util.Iterator.Static;
    import(className: 'org.codehaus.groovy.ast.ClassNode'): org.codehaus.groovy.ast.ClassNode.Static;
    import(className: 'java.util.function_.Function'): java.util.function_.Function.Static;
    import(className: 'com.tinkerpop.gremlin.process.computer.GraphComputer'): com.tinkerpop.gremlin.process.computer.GraphComputer.Static;
    import(className: 'java.util.HashMap'): java.util.HashMap.Static;
    import(className: 'groovy.lang.GroovyResourceLoader'): groovy.lang.GroovyResourceLoader.Static;
    import(className: 'java.lang.Long'): java.lang.Long.Static;
    import(className: 'groovy.lang.DelegatingMetaClass'): groovy.lang.DelegatingMetaClass.Static;
    import(className: 'com.tinkerpop.gremlin.structure.Compare'): com.tinkerpop.gremlin.structure.Compare.Static;
    import(className: 'com.tinkerpop.gremlin.structure.Edge'): com.tinkerpop.gremlin.structure.Edge.Static;
    import(className: 'javax.script.ScriptEngineFactory'): javax.script.ScriptEngineFactory.Static;
    import(className: 'java.io.FileInputStream'): java.io.FileInputStream.Static;
    import(className: 'groovy.lang.MetaClass'): groovy.lang.MetaClass.Static;
    import(className: 'java.lang.Object'): java.lang.Object.Static;
    import(className: 'java.util.function_.BiConsumer'): java.util.function_.BiConsumer.Static;
    import(className: 'java.lang.Boolean'): java.lang.Boolean.Static;
    import(className: 'co.redseal.gremlinnode.function_.IdentityGlobFunction'): co.redseal.gremlinnode.function_.IdentityGlobFunction.Static;
    import(className: 'org.codehaus.groovy.tools.shell.Groovysh'): org.codehaus.groovy.tools.shell.Groovysh.Static;
    import(className: 'java.util.HashSet'): java.util.HashSet.Static;
    import(className: 'java.lang.reflect.Array'): java.lang.reflect.Array.Static;
    import(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyGraph'): com.tinkerpop.gremlin.structure.strategy.StrategyGraph.Static;
    import(className: 'java.lang.Enum'): java.lang.Enum.Static;
    import(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyContext'): com.tinkerpop.gremlin.structure.strategy.StrategyContext.Static;
    import(className: 'java.util.function_.BiFunction'): java.util.function_.BiFunction.Static;
    import(className: 'java.io.ByteArrayOutputStream'): java.io.ByteArrayOutputStream.Static;
    import(className: 'groovy.lang.GroovyCodeSource'): groovy.lang.GroovyCodeSource.Static;
    import(className: 'java.util.Comparator'): java.util.Comparator.Static;
    import(className: 'co.redseal.gremlinnode.function_.GlobFunction'): co.redseal.gremlinnode.function_.GlobFunction.Static;
    import(className: 'java.util.ArrayList'): java.util.ArrayList.Static;
    import(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer'): org.codehaus.groovy.control.customizers.CompilationCustomizer.Static;
    import(className: 'java.lang.ClassLoader'): java.lang.ClassLoader.Static;
    import(className: 'co.redseal.gremlinnode.testing.TestClass'): co.redseal.gremlinnode.testing.TestClass.Static;
    import(className: 'com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal'): com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.Static;
    import(className: 'org.codehaus.groovy.util.ManagedReference'): org.codehaus.groovy.util.ManagedReference.Static;
    import(className: 'co.redseal.gremlinnode.function_.AbstractGlobFunction'): co.redseal.gremlinnode.function_.AbstractGlobFunction.Static;
    import(className: 'com.tinkerpop.gremlin.structure.Vertex'): com.tinkerpop.gremlin.structure.Vertex.Static;
    import(className: 'co.redseal.gremlinnode.function_.NegateGlobFunction'): co.redseal.gremlinnode.function_.NegateGlobFunction.Static;
    import(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory'): com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.Static;
    import(className: 'javax.script.ScriptEngine'): javax.script.ScriptEngine.Static;
    import(className: 'javax.script.Bindings'): javax.script.Bindings.Static;
    import(className: 'javax.script.ScriptContext'): javax.script.ScriptContext.Static;
    import(className: 'java.util.AbstractMap'): java.util.AbstractMap.Static;
    import(className: 'com.tinkerpop.gremlin.structure.strategy.GraphStrategy'): com.tinkerpop.gremlin.structure.strategy.GraphStrategy.Static;
    import(className: 'groovy.lang.MetaProperty'): groovy.lang.MetaProperty.Static;
    import(className: 'com.tinkerpop.gremlin.structure.Graph'): com.tinkerpop.gremlin.structure.Graph.Static;
    import(className: 'java.util.function_.BiPredicate'): java.util.function_.BiPredicate.Static;
    import(className: 'javax.script.AbstractScriptEngine'): javax.script.AbstractScriptEngine.Static;
    import(className: 'com.tinkerpop.gremlin.structure.Order'): com.tinkerpop.gremlin.structure.Order.Static;
    import(className: 'com.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper'): com.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper.Static;
    import(className: 'java.util.NoSuchElementException'): java.util.NoSuchElementException.Static;
    import(className: 'java.util.function_.BinaryOperator'): java.util.function_.BinaryOperator.Static;
    import(className: 'co.redseal.gremlinnode.function_.GroovyLambda'): co.redseal.gremlinnode.function_.GroovyLambda.Static;
    import(className: 'groovy.lang.Closure'): groovy.lang.Closure.Static;
    import(className: 'org.codehaus.groovy.runtime.NullObject'): org.codehaus.groovy.runtime.NullObject.Static;
    import(className: 'com.tinkerpop.gremlin.process.Scope'): com.tinkerpop.gremlin.process.Scope.Static;
    import(className: 'com.tinkerpop.gremlin.process.util.BulkSet'): com.tinkerpop.gremlin.process.util.BulkSet.Static;
    import(className: 'com.tinkerpop.gremlin.process.T'): com.tinkerpop.gremlin.process.T.Static;
    import(className: 'com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine'): com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.Static;
    import(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph'): com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.Static;
    import(className: 'java.util.Map'): java.util.Map.Static;
    import(className: 'groovy.lang.GroovyClassLoader'): groovy.lang.GroovyClassLoader.Static;
    import(className: 'java.util.function_.UnaryOperator'): java.util.function_.UnaryOperator.Static;
    import(className: 'java.lang.Number'): java.lang.Number.Static;
    import(className: 'groovy.lang.Range'): groovy.lang.Range.Static;
    import(className: 'com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader'): com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.Static;
    import(className: 'java.util.Collection'): java.util.Collection.Static;
    import(className: 'java.util.List'): java.util.List.Static;
    import(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction'): co.redseal.gremlinnode.function_.AndThenGlobFunction.Static;
    import(className: 'com.tinkerpop.gremlin.util.function_.TriConsumer'): com.tinkerpop.gremlin.util.function_.TriConsumer.Static;
    import(className: string): any;

    newInstance(className: 'org.codehaus.groovy.util.ReferenceBundle', arg0: object_t, arg1: object_t, cb: Callback<ReferenceBundle>): void;
    newInstance(className: 'groovy.lang.GroovyObjectSupport', cb: Callback<GroovyObjectSupport>): void;
    newInstance(className: 'groovy.lang.Binding', arg0: array_t<string_t>, cb: Callback<Binding>): void;
    newInstance(className: 'groovy.lang.Binding', arg0: Map, cb: Callback<Binding>): void;
    newInstance(className: 'groovy.lang.Binding', cb: Callback<Binding>): void;
    newInstance(className: 'com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda', arg0: string_t, arg1: string_t, cb: Callback<ScriptEngineLambda>): void;
    newInstance(className: 'java.lang.Double', arg0: string_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Double', arg0: double_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Charset, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: Charset, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', cb: Callback<string>): void;
    newInstance(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: CompilerConfiguration, cb: Callback<CompilerConfiguration>): void;
    newInstance(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: object_t, cb: Callback<CompilerConfiguration>): void;
    newInstance(className: 'org.codehaus.groovy.control.CompilerConfiguration', cb: Callback<CompilerConfiguration>): void;
    newInstance(className: 'groovy.lang.MetaMethod', arg0: array_t<Class>, cb: Callback<MetaMethod>): void;
    newInstance(className: 'groovy.lang.MetaMethod', cb: Callback<MetaMethod>): void;
    newInstance(className: 'javax.script.CompiledScript', cb: Callback<CompiledScript>): void;
    newInstance(className: 'java.lang.Float', arg0: string_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Float', arg0: float_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Float', arg0: double_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Short', arg0: string_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Short', arg0: short_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Integer', arg0: string_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Integer', arg0: integer_t, cb: Callback<number>): void;
    newInstance(className: 'groovy.lang.MetaBeanProperty', arg0: string_t, arg1: Class, arg2: MetaMethod, arg3: MetaMethod, cb: Callback<MetaBeanProperty>): void;
    newInstance(className: 'groovy.lang.Reference', arg0: object_t, cb: Callback<Reference>): void;
    newInstance(className: 'groovy.lang.Reference', cb: Callback<Reference>): void;
    newInstance(className: 'groovy.lang.IntRange', arg0: boolean_t, arg1: integer_t, arg2: integer_t, cb: Callback<IntRange>): void;
    newInstance(className: 'groovy.lang.IntRange', arg0: integer_t, arg1: integer_t, cb: Callback<IntRange>): void;
    newInstance(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: array_t<ClassNode>, arg4: object_array_t, cb: Callback<ClassNode>): void;
    newInstance(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode, cb: Callback<ClassNode>): void;
    newInstance(className: 'org.codehaus.groovy.ast.ClassNode', arg0: Class, cb: Callback<ClassNode>): void;
    newInstance(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t, cb: Callback<HashMap>): void;
    newInstance(className: 'java.util.HashMap', arg0: Map, cb: Callback<HashMap>): void;
    newInstance(className: 'java.util.HashMap', arg0: integer_t, cb: Callback<HashMap>): void;
    newInstance(className: 'java.util.HashMap', cb: Callback<HashMap>): void;
    newInstance(className: 'java.lang.Long', arg0: string_t, cb: Callback<longValue_t>): void;
    newInstance(className: 'java.lang.Long', arg0: long_t, cb: Callback<longValue_t>): void;
    newInstance(className: 'groovy.lang.DelegatingMetaClass', arg0: MetaClass, cb: Callback<DelegatingMetaClass>): void;
    newInstance(className: 'groovy.lang.DelegatingMetaClass', arg0: Class, cb: Callback<DelegatingMetaClass>): void;
    newInstance(className: 'java.io.FileInputStream', arg0: object_t, cb: Callback<FileInputStream>): void;
    newInstance(className: 'java.io.FileInputStream', arg0: string_t, cb: Callback<FileInputStream>): void;
    newInstance(className: 'java.io.FileInputStream', arg0: object_t, cb: Callback<FileInputStream>): void;
    newInstance(className: 'java.lang.Object', cb: Callback<object_t>): void;
    newInstance(className: 'java.lang.Boolean', arg0: string_t, cb: Callback<boolean>): void;
    newInstance(className: 'java.lang.Boolean', arg0: boolean_t, cb: Callback<boolean>): void;
    newInstance(className: 'co.redseal.gremlinnode.function_.IdentityGlobFunction', arg0: GlobFunction, cb: Callback<IdentityGlobFunction>): void;
    newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t, arg3: Closure, cb: Callback<Groovysh>): void;
    newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t, cb: Callback<Groovysh>): void;
    newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Binding, arg1: object_t, cb: Callback<Groovysh>): void;
    newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: object_t, cb: Callback<Groovysh>): void;
    newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', cb: Callback<Groovysh>): void;
    newInstance(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t, cb: Callback<HashSet>): void;
    newInstance(className: 'java.util.HashSet', arg0: Collection, cb: Callback<HashSet>): void;
    newInstance(className: 'java.util.HashSet', arg0: integer_t, cb: Callback<HashSet>): void;
    newInstance(className: 'java.util.HashSet', cb: Callback<HashSet>): void;
    newInstance(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyGraph', arg0: Graph, arg1: GraphStrategy, cb: Callback<StrategyGraph>): void;
    newInstance(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyGraph', arg0: Graph, cb: Callback<StrategyGraph>): void;
    newInstance(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyContext', arg0: StrategyGraph, arg1: object_t, cb: Callback<StrategyContext>): void;
    newInstance(className: 'java.io.ByteArrayOutputStream', arg0: integer_t, cb: Callback<ByteArrayOutputStream>): void;
    newInstance(className: 'java.io.ByteArrayOutputStream', cb: Callback<ByteArrayOutputStream>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: string_t, arg1: string_t, arg2: string_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, arg2: string_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'java.util.ArrayList', arg0: Collection, cb: Callback<ArrayList>): void;
    newInstance(className: 'java.util.ArrayList', arg0: integer_t, cb: Callback<ArrayList>): void;
    newInstance(className: 'java.util.ArrayList', cb: Callback<ArrayList>): void;
    newInstance(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg0: object_t, cb: Callback<CompilationCustomizer>): void;
    newInstance(className: 'co.redseal.gremlinnode.testing.TestClass', cb: Callback<TestClass>): void;
    newInstance(className: 'org.codehaus.groovy.util.ManagedReference', arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<ManagedReference>): void;
    newInstance(className: 'org.codehaus.groovy.util.ManagedReference', arg0: ReferenceBundle, arg1: object_t, cb: Callback<ManagedReference>): void;
    newInstance(className: 'co.redseal.gremlinnode.function_.NegateGlobFunction', arg0: GlobFunction, cb: Callback<NegateGlobFunction>): void;
    newInstance(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory', cb: Callback<TinkerFactory>): void;
    newInstance(className: 'groovy.lang.MetaProperty', arg0: string_t, arg1: Class, cb: Callback<MetaProperty>): void;
    newInstance(className: 'javax.script.AbstractScriptEngine', arg0: Bindings, cb: Callback<AbstractScriptEngine>): void;
    newInstance(className: 'javax.script.AbstractScriptEngine', cb: Callback<AbstractScriptEngine>): void;
    newInstance(className: 'java.util.NoSuchElementException', arg0: string_t, cb: Callback<NoSuchElementException>): void;
    newInstance(className: 'java.util.NoSuchElementException', cb: Callback<NoSuchElementException>): void;
    newInstance(className: 'co.redseal.gremlinnode.function_.GroovyLambda', arg0: string_t, arg1: ScriptEngine, cb: Callback<GroovyLambda>): void;
    newInstance(className: 'co.redseal.gremlinnode.function_.GroovyLambda', arg0: string_t, cb: Callback<GroovyLambda>): void;
    newInstance(className: 'groovy.lang.Closure', arg0: object_t, arg1: object_t, cb: Callback<Closure>): void;
    newInstance(className: 'groovy.lang.Closure', arg0: object_t, cb: Callback<Closure>): void;
    newInstance(className: 'com.tinkerpop.gremlin.process.util.BulkSet', cb: Callback<BulkSet>): void;
    newInstance(className: 'com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t, cb: Callback<GremlinGroovyScriptEngine>): void;
    newInstance(className: 'com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, cb: Callback<GremlinGroovyScriptEngine>): void;
    newInstance(className: 'com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', cb: Callback<GremlinGroovyScriptEngine>): void;
    newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration, arg2: boolean_t, cb: Callback<GroovyClassLoader>): void;
    newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration, cb: Callback<GroovyClassLoader>): void;
    newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: GroovyClassLoader, cb: Callback<GroovyClassLoader>): void;
    newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, cb: Callback<GroovyClassLoader>): void;
    newInstance(className: 'groovy.lang.GroovyClassLoader', cb: Callback<GroovyClassLoader>): void;
    newInstance(className: 'java.lang.Number', cb: Callback<number>): void;
    newInstance(className: 'com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg0: GraphSONMapper, arg1: long_t, arg2: string_t, arg3: string_t, cb: Callback<GraphSONReader>): void;
    newInstance(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: GlobFunction, cb: Callback<AndThenGlobFunction>): void;
    newInstance(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: BiConsumer, cb: Callback<AndThenGlobFunction>): void;
    newInstance(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: Function, cb: Callback<AndThenGlobFunction>): void;
    newInstance(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: Consumer, cb: Callback<AndThenGlobFunction>): void;
    newInstance(className: string, ...args: any[]): void;

    newInstanceSync(className: 'org.codehaus.groovy.util.ReferenceBundle', arg0: object_t, arg1: object_t): ReferenceBundle;
    newInstanceSync(className: 'groovy.lang.GroovyObjectSupport'): GroovyObjectSupport;
    newInstanceSync(className: 'groovy.lang.Binding', arg0: array_t<string_t>): Binding;
    newInstanceSync(className: 'groovy.lang.Binding', arg0: Map): Binding;
    newInstanceSync(className: 'groovy.lang.Binding'): Binding;
    newInstanceSync(className: 'com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda', arg0: string_t, arg1: string_t): ScriptEngineLambda;
    newInstanceSync(className: 'java.lang.Double', arg0: string_t): number;
    newInstanceSync(className: 'java.lang.Double', arg0: double_t): number;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Charset): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: Charset): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t): string;
    newInstanceSync(className: 'java.lang.String'): string;
    newInstanceSync(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: CompilerConfiguration): CompilerConfiguration;
    newInstanceSync(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: object_t): CompilerConfiguration;
    newInstanceSync(className: 'org.codehaus.groovy.control.CompilerConfiguration'): CompilerConfiguration;
    newInstanceSync(className: 'groovy.lang.MetaMethod', arg0: array_t<Class>): MetaMethod;
    newInstanceSync(className: 'groovy.lang.MetaMethod'): MetaMethod;
    newInstanceSync(className: 'javax.script.CompiledScript'): CompiledScript;
    newInstanceSync(className: 'java.lang.Float', arg0: string_t): number;
    newInstanceSync(className: 'java.lang.Float', arg0: float_t): number;
    newInstanceSync(className: 'java.lang.Float', arg0: double_t): number;
    newInstanceSync(className: 'java.lang.Short', arg0: string_t): number;
    newInstanceSync(className: 'java.lang.Short', arg0: short_t): number;
    newInstanceSync(className: 'java.lang.Integer', arg0: string_t): number;
    newInstanceSync(className: 'java.lang.Integer', arg0: integer_t): number;
    newInstanceSync(className: 'groovy.lang.MetaBeanProperty', arg0: string_t, arg1: Class, arg2: MetaMethod, arg3: MetaMethod): MetaBeanProperty;
    newInstanceSync(className: 'groovy.lang.Reference', arg0: object_t): Reference;
    newInstanceSync(className: 'groovy.lang.Reference'): Reference;
    newInstanceSync(className: 'groovy.lang.IntRange', arg0: boolean_t, arg1: integer_t, arg2: integer_t): IntRange;
    newInstanceSync(className: 'groovy.lang.IntRange', arg0: integer_t, arg1: integer_t): IntRange;
    newInstanceSync(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: array_t<ClassNode>, arg4: object_array_t): ClassNode;
    newInstanceSync(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode): ClassNode;
    newInstanceSync(className: 'org.codehaus.groovy.ast.ClassNode', arg0: Class): ClassNode;
    newInstanceSync(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t): HashMap;
    newInstanceSync(className: 'java.util.HashMap', arg0: Map): HashMap;
    newInstanceSync(className: 'java.util.HashMap', arg0: integer_t): HashMap;
    newInstanceSync(className: 'java.util.HashMap'): HashMap;
    newInstanceSync(className: 'java.lang.Long', arg0: string_t): longValue_t;
    newInstanceSync(className: 'java.lang.Long', arg0: long_t): longValue_t;
    newInstanceSync(className: 'groovy.lang.DelegatingMetaClass', arg0: MetaClass): DelegatingMetaClass;
    newInstanceSync(className: 'groovy.lang.DelegatingMetaClass', arg0: Class): DelegatingMetaClass;
    newInstanceSync(className: 'java.io.FileInputStream', arg0: object_t): FileInputStream;
    newInstanceSync(className: 'java.io.FileInputStream', arg0: string_t): FileInputStream;
    newInstanceSync(className: 'java.io.FileInputStream', arg0: object_t): FileInputStream;
    newInstanceSync(className: 'java.lang.Object'): object_t;
    newInstanceSync(className: 'java.lang.Boolean', arg0: string_t): boolean;
    newInstanceSync(className: 'java.lang.Boolean', arg0: boolean_t): boolean;
    newInstanceSync(className: 'co.redseal.gremlinnode.function_.IdentityGlobFunction', arg0: GlobFunction): IdentityGlobFunction;
    newInstanceSync(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t, arg3: Closure): Groovysh;
    newInstanceSync(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t): Groovysh;
    newInstanceSync(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Binding, arg1: object_t): Groovysh;
    newInstanceSync(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: object_t): Groovysh;
    newInstanceSync(className: 'org.codehaus.groovy.tools.shell.Groovysh'): Groovysh;
    newInstanceSync(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t): HashSet;
    newInstanceSync(className: 'java.util.HashSet', arg0: Collection): HashSet;
    newInstanceSync(className: 'java.util.HashSet', arg0: integer_t): HashSet;
    newInstanceSync(className: 'java.util.HashSet'): HashSet;
    newInstanceSync(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyGraph', arg0: Graph, arg1: GraphStrategy): StrategyGraph;
    newInstanceSync(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyGraph', arg0: Graph): StrategyGraph;
    newInstanceSync(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyContext', arg0: StrategyGraph, arg1: object_t): StrategyContext;
    newInstanceSync(className: 'java.io.ByteArrayOutputStream', arg0: integer_t): ByteArrayOutputStream;
    newInstanceSync(className: 'java.io.ByteArrayOutputStream'): ByteArrayOutputStream;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: string_t, arg1: string_t, arg2: string_t): GroovyCodeSource;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, arg2: string_t): GroovyCodeSource;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t): GroovyCodeSource;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): GroovyCodeSource;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): GroovyCodeSource;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): GroovyCodeSource;
    newInstanceSync(className: 'java.util.ArrayList', arg0: Collection): ArrayList;
    newInstanceSync(className: 'java.util.ArrayList', arg0: integer_t): ArrayList;
    newInstanceSync(className: 'java.util.ArrayList'): ArrayList;
    newInstanceSync(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg0: object_t): CompilationCustomizer;
    newInstanceSync(className: 'co.redseal.gremlinnode.testing.TestClass'): TestClass;
    newInstanceSync(className: 'org.codehaus.groovy.util.ManagedReference', arg0: object_t, arg1: object_t, arg2: object_t): ManagedReference;
    newInstanceSync(className: 'org.codehaus.groovy.util.ManagedReference', arg0: ReferenceBundle, arg1: object_t): ManagedReference;
    newInstanceSync(className: 'co.redseal.gremlinnode.function_.NegateGlobFunction', arg0: GlobFunction): NegateGlobFunction;
    newInstanceSync(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory'): TinkerFactory;
    newInstanceSync(className: 'groovy.lang.MetaProperty', arg0: string_t, arg1: Class): MetaProperty;
    newInstanceSync(className: 'javax.script.AbstractScriptEngine', arg0: Bindings): AbstractScriptEngine;
    newInstanceSync(className: 'javax.script.AbstractScriptEngine'): AbstractScriptEngine;
    newInstanceSync(className: 'java.util.NoSuchElementException', arg0: string_t): NoSuchElementException;
    newInstanceSync(className: 'java.util.NoSuchElementException'): NoSuchElementException;
    newInstanceSync(className: 'co.redseal.gremlinnode.function_.GroovyLambda', arg0: string_t, arg1: ScriptEngine): GroovyLambda;
    newInstanceSync(className: 'co.redseal.gremlinnode.function_.GroovyLambda', arg0: string_t): GroovyLambda;
    newInstanceSync(className: 'groovy.lang.Closure', arg0: object_t, arg1: object_t): Closure;
    newInstanceSync(className: 'groovy.lang.Closure', arg0: object_t): Closure;
    newInstanceSync(className: 'com.tinkerpop.gremlin.process.util.BulkSet'): BulkSet;
    newInstanceSync(className: 'com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t): GremlinGroovyScriptEngine;
    newInstanceSync(className: 'com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t): GremlinGroovyScriptEngine;
    newInstanceSync(className: 'com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine'): GremlinGroovyScriptEngine;
    newInstanceSync(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration, arg2: boolean_t): GroovyClassLoader;
    newInstanceSync(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration): GroovyClassLoader;
    newInstanceSync(className: 'groovy.lang.GroovyClassLoader', arg0: GroovyClassLoader): GroovyClassLoader;
    newInstanceSync(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader): GroovyClassLoader;
    newInstanceSync(className: 'groovy.lang.GroovyClassLoader'): GroovyClassLoader;
    newInstanceSync(className: 'java.lang.Number'): number;
    newInstanceSync(className: 'com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg0: GraphSONMapper, arg1: long_t, arg2: string_t, arg3: string_t): GraphSONReader;
    newInstanceSync(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: GlobFunction): AndThenGlobFunction;
    newInstanceSync(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: BiConsumer): AndThenGlobFunction;
    newInstanceSync(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: Function): AndThenGlobFunction;
    newInstanceSync(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: Consumer): AndThenGlobFunction;
    newInstanceSync(className: string, ...args: any[]): any;

    newInstancePromise(className: 'org.codehaus.groovy.util.ReferenceBundle', arg0: object_t, arg1: object_t): Promise<ReferenceBundle>;
    newInstancePromise(className: 'groovy.lang.GroovyObjectSupport'): Promise<GroovyObjectSupport>;
    newInstancePromise(className: 'groovy.lang.Binding', arg0: array_t<string_t>): Promise<Binding>;
    newInstancePromise(className: 'groovy.lang.Binding', arg0: Map): Promise<Binding>;
    newInstancePromise(className: 'groovy.lang.Binding'): Promise<Binding>;
    newInstancePromise(className: 'com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda', arg0: string_t, arg1: string_t): Promise<ScriptEngineLambda>;
    newInstancePromise(className: 'java.lang.Double', arg0: string_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Double', arg0: double_t): Promise<number>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Charset): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: Charset): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String'): Promise<string>;
    newInstancePromise(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: CompilerConfiguration): Promise<CompilerConfiguration>;
    newInstancePromise(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: object_t): Promise<CompilerConfiguration>;
    newInstancePromise(className: 'org.codehaus.groovy.control.CompilerConfiguration'): Promise<CompilerConfiguration>;
    newInstancePromise(className: 'groovy.lang.MetaMethod', arg0: array_t<Class>): Promise<MetaMethod>;
    newInstancePromise(className: 'groovy.lang.MetaMethod'): Promise<MetaMethod>;
    newInstancePromise(className: 'javax.script.CompiledScript'): Promise<CompiledScript>;
    newInstancePromise(className: 'java.lang.Float', arg0: string_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Float', arg0: float_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Float', arg0: double_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Short', arg0: string_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Short', arg0: short_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Integer', arg0: string_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Integer', arg0: integer_t): Promise<number>;
    newInstancePromise(className: 'groovy.lang.MetaBeanProperty', arg0: string_t, arg1: Class, arg2: MetaMethod, arg3: MetaMethod): Promise<MetaBeanProperty>;
    newInstancePromise(className: 'groovy.lang.Reference', arg0: object_t): Promise<Reference>;
    newInstancePromise(className: 'groovy.lang.Reference'): Promise<Reference>;
    newInstancePromise(className: 'groovy.lang.IntRange', arg0: boolean_t, arg1: integer_t, arg2: integer_t): Promise<IntRange>;
    newInstancePromise(className: 'groovy.lang.IntRange', arg0: integer_t, arg1: integer_t): Promise<IntRange>;
    newInstancePromise(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: array_t<ClassNode>, arg4: object_array_t): Promise<ClassNode>;
    newInstancePromise(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode): Promise<ClassNode>;
    newInstancePromise(className: 'org.codehaus.groovy.ast.ClassNode', arg0: Class): Promise<ClassNode>;
    newInstancePromise(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t): Promise<HashMap>;
    newInstancePromise(className: 'java.util.HashMap', arg0: Map): Promise<HashMap>;
    newInstancePromise(className: 'java.util.HashMap', arg0: integer_t): Promise<HashMap>;
    newInstancePromise(className: 'java.util.HashMap'): Promise<HashMap>;
    newInstancePromise(className: 'java.lang.Long', arg0: string_t): Promise<longValue_t>;
    newInstancePromise(className: 'java.lang.Long', arg0: long_t): Promise<longValue_t>;
    newInstancePromise(className: 'groovy.lang.DelegatingMetaClass', arg0: MetaClass): Promise<DelegatingMetaClass>;
    newInstancePromise(className: 'groovy.lang.DelegatingMetaClass', arg0: Class): Promise<DelegatingMetaClass>;
    newInstancePromise(className: 'java.io.FileInputStream', arg0: object_t): Promise<FileInputStream>;
    newInstancePromise(className: 'java.io.FileInputStream', arg0: string_t): Promise<FileInputStream>;
    newInstancePromise(className: 'java.io.FileInputStream', arg0: object_t): Promise<FileInputStream>;
    newInstancePromise(className: 'java.lang.Object'): Promise<object_t>;
    newInstancePromise(className: 'java.lang.Boolean', arg0: string_t): Promise<boolean>;
    newInstancePromise(className: 'java.lang.Boolean', arg0: boolean_t): Promise<boolean>;
    newInstancePromise(className: 'co.redseal.gremlinnode.function_.IdentityGlobFunction', arg0: GlobFunction): Promise<IdentityGlobFunction>;
    newInstancePromise(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t, arg3: Closure): Promise<Groovysh>;
    newInstancePromise(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t): Promise<Groovysh>;
    newInstancePromise(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Binding, arg1: object_t): Promise<Groovysh>;
    newInstancePromise(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: object_t): Promise<Groovysh>;
    newInstancePromise(className: 'org.codehaus.groovy.tools.shell.Groovysh'): Promise<Groovysh>;
    newInstancePromise(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t): Promise<HashSet>;
    newInstancePromise(className: 'java.util.HashSet', arg0: Collection): Promise<HashSet>;
    newInstancePromise(className: 'java.util.HashSet', arg0: integer_t): Promise<HashSet>;
    newInstancePromise(className: 'java.util.HashSet'): Promise<HashSet>;
    newInstancePromise(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyGraph', arg0: Graph, arg1: GraphStrategy): Promise<StrategyGraph>;
    newInstancePromise(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyGraph', arg0: Graph): Promise<StrategyGraph>;
    newInstancePromise(className: 'com.tinkerpop.gremlin.structure.strategy.StrategyContext', arg0: StrategyGraph, arg1: object_t): Promise<StrategyContext>;
    newInstancePromise(className: 'java.io.ByteArrayOutputStream', arg0: integer_t): Promise<ByteArrayOutputStream>;
    newInstancePromise(className: 'java.io.ByteArrayOutputStream'): Promise<ByteArrayOutputStream>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: string_t, arg1: string_t, arg2: string_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, arg2: string_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'java.util.ArrayList', arg0: Collection): Promise<ArrayList>;
    newInstancePromise(className: 'java.util.ArrayList', arg0: integer_t): Promise<ArrayList>;
    newInstancePromise(className: 'java.util.ArrayList'): Promise<ArrayList>;
    newInstancePromise(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg0: object_t): Promise<CompilationCustomizer>;
    newInstancePromise(className: 'co.redseal.gremlinnode.testing.TestClass'): Promise<TestClass>;
    newInstancePromise(className: 'org.codehaus.groovy.util.ManagedReference', arg0: object_t, arg1: object_t, arg2: object_t): Promise<ManagedReference>;
    newInstancePromise(className: 'org.codehaus.groovy.util.ManagedReference', arg0: ReferenceBundle, arg1: object_t): Promise<ManagedReference>;
    newInstancePromise(className: 'co.redseal.gremlinnode.function_.NegateGlobFunction', arg0: GlobFunction): Promise<NegateGlobFunction>;
    newInstancePromise(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory'): Promise<TinkerFactory>;
    newInstancePromise(className: 'groovy.lang.MetaProperty', arg0: string_t, arg1: Class): Promise<MetaProperty>;
    newInstancePromise(className: 'javax.script.AbstractScriptEngine', arg0: Bindings): Promise<AbstractScriptEngine>;
    newInstancePromise(className: 'javax.script.AbstractScriptEngine'): Promise<AbstractScriptEngine>;
    newInstancePromise(className: 'java.util.NoSuchElementException', arg0: string_t): Promise<NoSuchElementException>;
    newInstancePromise(className: 'java.util.NoSuchElementException'): Promise<NoSuchElementException>;
    newInstancePromise(className: 'co.redseal.gremlinnode.function_.GroovyLambda', arg0: string_t, arg1: ScriptEngine): Promise<GroovyLambda>;
    newInstancePromise(className: 'co.redseal.gremlinnode.function_.GroovyLambda', arg0: string_t): Promise<GroovyLambda>;
    newInstancePromise(className: 'groovy.lang.Closure', arg0: object_t, arg1: object_t): Promise<Closure>;
    newInstancePromise(className: 'groovy.lang.Closure', arg0: object_t): Promise<Closure>;
    newInstancePromise(className: 'com.tinkerpop.gremlin.process.util.BulkSet'): Promise<BulkSet>;
    newInstancePromise(className: 'com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t): Promise<GremlinGroovyScriptEngine>;
    newInstancePromise(className: 'com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t): Promise<GremlinGroovyScriptEngine>;
    newInstancePromise(className: 'com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine'): Promise<GremlinGroovyScriptEngine>;
    newInstancePromise(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration, arg2: boolean_t): Promise<GroovyClassLoader>;
    newInstancePromise(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration): Promise<GroovyClassLoader>;
    newInstancePromise(className: 'groovy.lang.GroovyClassLoader', arg0: GroovyClassLoader): Promise<GroovyClassLoader>;
    newInstancePromise(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader): Promise<GroovyClassLoader>;
    newInstancePromise(className: 'groovy.lang.GroovyClassLoader'): Promise<GroovyClassLoader>;
    newInstancePromise(className: 'java.lang.Number'): Promise<number>;
    newInstancePromise(className: 'com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg0: GraphSONMapper, arg1: long_t, arg2: string_t, arg3: string_t): Promise<GraphSONReader>;
    newInstancePromise(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: GlobFunction): Promise<AndThenGlobFunction>;
    newInstancePromise(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: BiConsumer): Promise<AndThenGlobFunction>;
    newInstancePromise(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: Function): Promise<AndThenGlobFunction>;
    newInstancePromise(className: 'co.redseal.gremlinnode.function_.AndThenGlobFunction', arg0: GlobFunction, arg1: Consumer): Promise<AndThenGlobFunction>;
    newInstancePromise(className: string, ...args: any[]): Promise<any>;
  }

  export import AbstractList = java.util.AbstractList;
  export import AbstractCollection = java.util.AbstractCollection;
  export import AbstractSet = java.util.AbstractSet;
  export import Predicate = java.util.function_.Predicate;
  export import ReferenceBundle = org.codehaus.groovy.util.ReferenceBundle;
  export import Supplier = java.util.function_.Supplier;
  export import Set = java.util.Set;
  export import GroovyObjectSupport = groovy.lang.GroovyObjectSupport;
  export import Class = java.lang.Class;
  export import Charset = java.nio.charset.Charset;
  export import GraphSONWriter$Builder = com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder;
  export import Binding = groovy.lang.Binding;
  export import VertexProgram = com.tinkerpop.gremlin.process.computer.VertexProgram;
  export import ScriptEngineLambda = com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda;
  export import Double = java.lang.Double;
  export import String = java.lang.String;
  export import CompilerConfiguration = org.codehaus.groovy.control.CompilerConfiguration;
  export import MetaMethod = groovy.lang.MetaMethod;
  export import Iterable = java.lang.Iterable;
  export import Traversal = com.tinkerpop.gremlin.process.Traversal;
  export import MapReduce = com.tinkerpop.gremlin.process.computer.MapReduce;
  export import CompiledScript = javax.script.CompiledScript;
  export import Element = com.tinkerpop.gremlin.structure.Element;
  export import Float = java.lang.Float;
  export import __ = com.tinkerpop.gremlin.process.graph.traversal.__;
  export import Short = java.lang.Short;
  export import Property = com.tinkerpop.gremlin.structure.Property;
  export import Map$Entry = java.util.Map$Entry;
  export import Integer = java.lang.Integer;
  export import Transaction = com.tinkerpop.gremlin.structure.Transaction;
  export import MetaBeanProperty = groovy.lang.MetaBeanProperty;
  export import Reference = groovy.lang.Reference;
  export import Direction = com.tinkerpop.gremlin.structure.Direction;
  export import ListIterator = java.util.ListIterator;
  export import StandardCharsets = java.nio.charset.StandardCharsets;
  export import Consumer = java.util.function_.Consumer;
  export import VertexProperty = com.tinkerpop.gremlin.structure.VertexProperty;
  export import GraphSONWriter = com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter;
  export import IntRange = groovy.lang.IntRange;
  export import Iterator = java.util.Iterator;
  export import ClassNode = org.codehaus.groovy.ast.ClassNode;
  export import Function = java.util.function_.Function;
  export import GraphComputer = com.tinkerpop.gremlin.process.computer.GraphComputer;
  export import HashMap = java.util.HashMap;
  export import GroovyResourceLoader = groovy.lang.GroovyResourceLoader;
  export import Long = java.lang.Long;
  export import DelegatingMetaClass = groovy.lang.DelegatingMetaClass;
  export import Compare = com.tinkerpop.gremlin.structure.Compare;
  export import Edge = com.tinkerpop.gremlin.structure.Edge;
  export import ScriptEngineFactory = javax.script.ScriptEngineFactory;
  export import FileInputStream = java.io.FileInputStream;
  export import MetaClass = groovy.lang.MetaClass;
  export import Object = java.lang.Object;
  export import BiConsumer = java.util.function_.BiConsumer;
  export import Boolean = java.lang.Boolean;
  export import IdentityGlobFunction = co.redseal.gremlinnode.function_.IdentityGlobFunction;
  export import Groovysh = org.codehaus.groovy.tools.shell.Groovysh;
  export import HashSet = java.util.HashSet;
  export import Array = java.lang.reflect.Array;
  export import StrategyGraph = com.tinkerpop.gremlin.structure.strategy.StrategyGraph;
  export import Enum = java.lang.Enum;
  export import StrategyContext = com.tinkerpop.gremlin.structure.strategy.StrategyContext;
  export import BiFunction = java.util.function_.BiFunction;
  export import ByteArrayOutputStream = java.io.ByteArrayOutputStream;
  export import GroovyCodeSource = groovy.lang.GroovyCodeSource;
  export import Comparator = java.util.Comparator;
  export import GlobFunction = co.redseal.gremlinnode.function_.GlobFunction;
  export import ArrayList = java.util.ArrayList;
  export import CompilationCustomizer = org.codehaus.groovy.control.customizers.CompilationCustomizer;
  export import ClassLoader = java.lang.ClassLoader;
  export import TestClass = co.redseal.gremlinnode.testing.TestClass;
  export import GraphTraversal = com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal;
  export import ManagedReference = org.codehaus.groovy.util.ManagedReference;
  export import AbstractGlobFunction = co.redseal.gremlinnode.function_.AbstractGlobFunction;
  export import Vertex = com.tinkerpop.gremlin.structure.Vertex;
  export import NegateGlobFunction = co.redseal.gremlinnode.function_.NegateGlobFunction;
  export import TinkerFactory = com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory;
  export import ScriptEngine = javax.script.ScriptEngine;
  export import Bindings = javax.script.Bindings;
  export import ScriptContext = javax.script.ScriptContext;
  export import AbstractMap = java.util.AbstractMap;
  export import GraphStrategy = com.tinkerpop.gremlin.structure.strategy.GraphStrategy;
  export import MetaProperty = groovy.lang.MetaProperty;
  export import Graph = com.tinkerpop.gremlin.structure.Graph;
  export import BiPredicate = java.util.function_.BiPredicate;
  export import AbstractScriptEngine = javax.script.AbstractScriptEngine;
  export import Order = com.tinkerpop.gremlin.structure.Order;
  export import GraphSONMapper = com.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper;
  export import NoSuchElementException = java.util.NoSuchElementException;
  export import BinaryOperator = java.util.function_.BinaryOperator;
  export import GroovyLambda = co.redseal.gremlinnode.function_.GroovyLambda;
  export import Closure = groovy.lang.Closure;
  export import NullObject = org.codehaus.groovy.runtime.NullObject;
  export import Scope = com.tinkerpop.gremlin.process.Scope;
  export import BulkSet = com.tinkerpop.gremlin.process.util.BulkSet;
  export import T = com.tinkerpop.gremlin.process.T;
  export import GremlinGroovyScriptEngine = com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
  export import TinkerGraph = com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph;
  export import Map = java.util.Map;
  export import GroovyClassLoader = groovy.lang.GroovyClassLoader;
  export import UnaryOperator = java.util.function_.UnaryOperator;
  export import Range = groovy.lang.Range;
  export import GraphSONReader = com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader;
  export import Collection = java.util.Collection;
  export import List = java.util.List;
  export import AndThenGlobFunction = co.redseal.gremlinnode.function_.AndThenGlobFunction;
  export import TriConsumer = com.tinkerpop.gremlin.util.function_.TriConsumer;

  export module java.util {
    export interface AbstractList extends Java.java.util.AbstractCollection,Java.java.util.List {
      // public void java.util.AbstractList.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public boolean java.util.AbstractList.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractList.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public boolean java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public void java.util.AbstractList.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public boolean java.util.AbstractCollection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractCollection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.util.AbstractList.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract E java.util.AbstractList.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int java.util.AbstractList.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.util.AbstractList.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public boolean java.util.AbstractCollection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public java.util.Iterator<E> java.util.AbstractList.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public int java.util.AbstractList.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public java.util.ListIterator<E> java.util.AbstractList.listIterator(int)
      listIterator(arg0: integer_t): ListIterator;
      listIteratorP(arg0: integer_t): Promise<ListIterator>;
      // public java.util.ListIterator<E> java.util.AbstractList.listIterator()
      listIterator(): ListIterator;
      listIteratorP(): Promise<ListIterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public boolean java.util.AbstractCollection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public E java.util.AbstractList.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public boolean java.util.AbstractCollection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: UnaryOperator): void;
      replaceAllP(arg0: UnaryOperator): Promise<void>;
      // public boolean java.util.AbstractCollection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public E java.util.AbstractList.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.List.size()
      size(): number;
      sizeP(): Promise<number>;
      // public abstract int java.util.AbstractCollection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: Comparator): void;
      sortP(arg0: Comparator): Promise<void>;
      // public default java.util.Spliterator<E> java.util.List.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public java.util.List<E> java.util.AbstractList.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public <T> T[] java.util.AbstractCollection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.Object[] java.util.AbstractCollection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.util.AbstractCollection.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractList {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractCollection extends Java.java.lang.Object,Java.java.util.Collection {
      // public boolean java.util.AbstractCollection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public void java.util.AbstractCollection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public boolean java.util.AbstractCollection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractCollection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.AbstractCollection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.AbstractCollection.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public boolean java.util.AbstractCollection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractCollection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public boolean java.util.AbstractCollection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.AbstractCollection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public <T> T[] java.util.AbstractCollection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.Object[] java.util.AbstractCollection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.util.AbstractCollection.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractCollection {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractSet extends Java.java.util.AbstractCollection,Java.java.util.Set {
      // public boolean java.util.AbstractCollection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public void java.util.AbstractCollection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public boolean java.util.AbstractCollection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractCollection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.util.AbstractSet.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int java.util.AbstractSet.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.AbstractCollection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Set.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public abstract java.util.Iterator<E> java.util.AbstractCollection.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public boolean java.util.AbstractCollection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractSet.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public boolean java.util.AbstractCollection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Set.size()
      size(): number;
      sizeP(): Promise<number>;
      // public abstract int java.util.AbstractCollection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Set.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public <T> T[] java.util.AbstractCollection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.Object[] java.util.AbstractCollection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.util.AbstractCollection.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractSet {
      export interface Static {
      }
    }
  }

  export module java.util.function_ {
    export interface Predicate extends Java.java.lang.Object {
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
    }
    export module Predicate {
      export interface Static {
        // public static <T> java.util.function.Predicate<T> java.util.function.Predicate.isEqual(java.lang.Object)
        isEqual(arg0: object_t): Predicate;
        isEqualP(arg0: object_t): Promise<Predicate>;
      }
    }
  }

  export module org.codehaus.groovy.util {
    export interface ReferenceBundle extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public org.codehaus.groovy.util.ReferenceManager org.codehaus.groovy.util.ReferenceBundle.getManager()
      getManager(): object_t;
      getManagerP(): Promise<object_t>;
      // public org.codehaus.groovy.util.ReferenceType org.codehaus.groovy.util.ReferenceBundle.getType()
      getType(): object_t;
      getTypeP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ReferenceBundle {
      export interface Static {
        new (arg0: object_t, arg1: object_t): org.codehaus.groovy.util.ReferenceBundle;
        // public static org.codehaus.groovy.util.ReferenceBundle org.codehaus.groovy.util.ReferenceBundle.getHardBundle()
        getHardBundle(): ReferenceBundle;
        getHardBundleP(): Promise<ReferenceBundle>;
        // public static org.codehaus.groovy.util.ReferenceBundle org.codehaus.groovy.util.ReferenceBundle.getPhantomBundle()
        getPhantomBundle(): ReferenceBundle;
        getPhantomBundleP(): Promise<ReferenceBundle>;
        // public static org.codehaus.groovy.util.ReferenceBundle org.codehaus.groovy.util.ReferenceBundle.getSoftBundle()
        getSoftBundle(): ReferenceBundle;
        getSoftBundleP(): Promise<ReferenceBundle>;
        // public static org.codehaus.groovy.util.ReferenceBundle org.codehaus.groovy.util.ReferenceBundle.getWeakBundle()
        getWeakBundle(): ReferenceBundle;
        getWeakBundleP(): Promise<ReferenceBundle>;
      }
    }
  }

  export module java.util.function_ {
    export interface Supplier extends Java.java.lang.Object {
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
    }
    export module Supplier {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Set extends Java.java.util.Collection {
      // public abstract boolean java.util.Set.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Set.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Set.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Set.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Set.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public abstract boolean java.util.Set.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract int java.util.Set.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Set.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Set.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Set.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Set.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public abstract boolean java.util.Set.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Set.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Set.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Set.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Set.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Set {
      export interface Static {
      }
    }
  }

  export module groovy.lang {
    export interface GroovyObjectSupport extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public groovy.lang.MetaClass groovy.lang.GroovyObjectSupport.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GroovyObjectSupport {
      export interface Static {
        new (): groovy.lang.GroovyObjectSupport;
      }
    }
  }

  export module java.lang {
    export interface Class extends Java.java.lang.Object {
      // public <U> java.lang.Class<? extends U> java.lang.Class.asSubclass(java.lang.Class<U>)
      asSubclass(arg0: Class): Class;
      asSubclassP(arg0: Class): Promise<Class>;
      // public T java.lang.Class.cast(java.lang.Object)
      cast(arg0: object_t): object_t;
      castP(arg0: object_t): Promise<object_t>;
      // public boolean java.lang.Class.desiredAssertionStatus()
      desiredAssertionStatus(): boolean;
      desiredAssertionStatusP(): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.reflect.AnnotatedType[] java.lang.Class.getAnnotatedInterfaces()
      getAnnotatedInterfaces(): object_t[];
      getAnnotatedInterfacesP(): Promise<object_t[]>;
      // public java.lang.reflect.AnnotatedType java.lang.Class.getAnnotatedSuperclass()
      getAnnotatedSuperclass(): object_t;
      getAnnotatedSuperclassP(): Promise<object_t>;
      // public <A> A java.lang.Class.getAnnotation(java.lang.Class<A>)
      getAnnotation(arg0: Class): object_t;
      getAnnotationP(arg0: Class): Promise<object_t>;
      // public java.lang.annotation.Annotation[] java.lang.Class.getAnnotations()
      getAnnotations(): object_t[];
      getAnnotationsP(): Promise<object_t[]>;
      // public <A> A[] java.lang.Class.getAnnotationsByType(java.lang.Class<A>)
      getAnnotationsByType(arg0: Class): object_t[];
      getAnnotationsByTypeP(arg0: Class): Promise<object_t[]>;
      // public java.lang.String java.lang.Class.getCanonicalName()
      getCanonicalName(): string;
      getCanonicalNameP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.Class<?>[] java.lang.Class.getClasses()
      getClasses(): Class[];
      getClassesP(): Promise<Class[]>;
      // public java.lang.ClassLoader java.lang.Class.getClassLoader()
      getClassLoader(): ClassLoader;
      getClassLoaderP(): Promise<ClassLoader>;
      // public native java.lang.Class<?> java.lang.Class.getComponentType()
      getComponentType(): Class;
      getComponentTypeP(): Promise<Class>;
      // public java.lang.reflect.Constructor<T> java.lang.Class.getConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getConstructor(...arg0: Class[]): object_t;
      getConstructor(arg0: array_t<Class>): object_t;
      getConstructorP(...arg0: Class[]): Promise<object_t>;
      getConstructorP(arg0: array_t<Class>): object_t;
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getConstructors() throws java.lang.SecurityException
      getConstructors(): object_t[];
      getConstructorsP(): Promise<object_t[]>;
      // public <A> A java.lang.Class.getDeclaredAnnotation(java.lang.Class<A>)
      getDeclaredAnnotation(arg0: Class): object_t;
      getDeclaredAnnotationP(arg0: Class): Promise<object_t>;
      // public java.lang.annotation.Annotation[] java.lang.Class.getDeclaredAnnotations()
      getDeclaredAnnotations(): object_t[];
      getDeclaredAnnotationsP(): Promise<object_t[]>;
      // public <A> A[] java.lang.Class.getDeclaredAnnotationsByType(java.lang.Class<A>)
      getDeclaredAnnotationsByType(arg0: Class): object_t[];
      getDeclaredAnnotationsByTypeP(arg0: Class): Promise<object_t[]>;
      // public java.lang.Class<?>[] java.lang.Class.getDeclaredClasses() throws java.lang.SecurityException
      getDeclaredClasses(): Class[];
      getDeclaredClassesP(): Promise<Class[]>;
      // public java.lang.reflect.Constructor<T> java.lang.Class.getDeclaredConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredConstructor(...arg0: Class[]): object_t;
      getDeclaredConstructor(arg0: array_t<Class>): object_t;
      getDeclaredConstructorP(...arg0: Class[]): Promise<object_t>;
      getDeclaredConstructorP(arg0: array_t<Class>): object_t;
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getDeclaredConstructors() throws java.lang.SecurityException
      getDeclaredConstructors(): object_t[];
      getDeclaredConstructorsP(): Promise<object_t[]>;
      // public java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getDeclaredField(arg0: string_t): object_t;
      getDeclaredFieldP(arg0: string_t): Promise<object_t>;
      // public java.lang.reflect.Field[] java.lang.Class.getDeclaredFields() throws java.lang.SecurityException
      getDeclaredFields(): object_t[];
      getDeclaredFieldsP(): Promise<object_t[]>;
      // public java.lang.reflect.Method java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredMethod(arg0: string_t, ...arg1: Class[]): object_t;
      getDeclaredMethod(arg0: string_t, arg1: array_t<Class>): object_t;
      getDeclaredMethodP(arg0: string_t, ...arg1: Class[]): Promise<object_t>;
      getDeclaredMethodP(arg0: string_t, arg1: array_t<Class>): object_t;
      // public java.lang.reflect.Method[] java.lang.Class.getDeclaredMethods() throws java.lang.SecurityException
      getDeclaredMethods(): object_t[];
      getDeclaredMethodsP(): Promise<object_t[]>;
      // public java.lang.Class<?> java.lang.Class.getDeclaringClass() throws java.lang.SecurityException
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public java.lang.Class<?> java.lang.Class.getEnclosingClass() throws java.lang.SecurityException
      getEnclosingClass(): Class;
      getEnclosingClassP(): Promise<Class>;
      // public java.lang.reflect.Constructor<?> java.lang.Class.getEnclosingConstructor() throws java.lang.SecurityException
      getEnclosingConstructor(): object_t;
      getEnclosingConstructorP(): Promise<object_t>;
      // public java.lang.reflect.Method java.lang.Class.getEnclosingMethod() throws java.lang.SecurityException
      getEnclosingMethod(): object_t;
      getEnclosingMethodP(): Promise<object_t>;
      // public T[] java.lang.Class.getEnumConstants()
      getEnumConstants(): object_t[];
      getEnumConstantsP(): Promise<object_t[]>;
      // public java.lang.reflect.Field java.lang.Class.getField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getField(arg0: string_t): object_t;
      getFieldP(arg0: string_t): Promise<object_t>;
      // public java.lang.reflect.Field[] java.lang.Class.getFields() throws java.lang.SecurityException
      getFields(): object_t[];
      getFieldsP(): Promise<object_t[]>;
      // public java.lang.reflect.Type[] java.lang.Class.getGenericInterfaces()
      getGenericInterfaces(): object_t[];
      getGenericInterfacesP(): Promise<object_t[]>;
      // public java.lang.reflect.Type java.lang.Class.getGenericSuperclass()
      getGenericSuperclass(): object_t;
      getGenericSuperclassP(): Promise<object_t>;
      // public java.lang.Class<?>[] java.lang.Class.getInterfaces()
      getInterfaces(): Class[];
      getInterfacesP(): Promise<Class[]>;
      // public java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getMethod(arg0: string_t, ...arg1: Class[]): object_t;
      getMethod(arg0: string_t, arg1: array_t<Class>): object_t;
      getMethodP(arg0: string_t, ...arg1: Class[]): Promise<object_t>;
      getMethodP(arg0: string_t, arg1: array_t<Class>): object_t;
      // public java.lang.reflect.Method[] java.lang.Class.getMethods() throws java.lang.SecurityException
      getMethods(): object_t[];
      getMethodsP(): Promise<object_t[]>;
      // public native int java.lang.Class.getModifiers()
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public java.lang.String java.lang.Class.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public java.lang.Package java.lang.Class.getPackage()
      getPackage(): object_t;
      getPackageP(): Promise<object_t>;
      // public java.security.ProtectionDomain java.lang.Class.getProtectionDomain()
      getProtectionDomain(): object_t;
      getProtectionDomainP(): Promise<object_t>;
      // public java.net.URL java.lang.Class.getResource(java.lang.String)
      getResource(arg0: string_t): object_t;
      getResourceP(arg0: string_t): Promise<object_t>;
      // public java.io.InputStream java.lang.Class.getResourceAsStream(java.lang.String)
      getResourceAsStream(arg0: string_t): object_t;
      getResourceAsStreamP(arg0: string_t): Promise<object_t>;
      // public native java.lang.Object[] java.lang.Class.getSigners()
      getSigners(): object_t[];
      getSignersP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Class.getSimpleName()
      getSimpleName(): string;
      getSimpleNameP(): Promise<string>;
      // public native java.lang.Class<? super T> java.lang.Class.getSuperclass()
      getSuperclass(): Class;
      getSuperclassP(): Promise<Class>;
      // public java.lang.String java.lang.Class.getTypeName()
      getTypeName(): string;
      getTypeNameP(): Promise<string>;
      // public java.lang.reflect.TypeVariable<java.lang.Class<T>>[] java.lang.Class.getTypeParameters()
      getTypeParameters(): object_t[];
      getTypeParametersP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.lang.Class.isAnnotation()
      isAnnotation(): boolean;
      isAnnotationP(): Promise<boolean>;
      // public boolean java.lang.Class.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class): boolean;
      isAnnotationPresentP(arg0: Class): Promise<boolean>;
      // public boolean java.lang.Class.isAnonymousClass()
      isAnonymousClass(): boolean;
      isAnonymousClassP(): Promise<boolean>;
      // public native boolean java.lang.Class.isArray()
      isArray(): boolean;
      isArrayP(): Promise<boolean>;
      // public native boolean java.lang.Class.isAssignableFrom(java.lang.Class<?>)
      isAssignableFrom(arg0: Class): boolean;
      isAssignableFromP(arg0: Class): Promise<boolean>;
      // public boolean java.lang.Class.isEnum()
      isEnum(): boolean;
      isEnumP(): Promise<boolean>;
      // public native boolean java.lang.Class.isInstance(java.lang.Object)
      isInstance(arg0: object_t): boolean;
      isInstanceP(arg0: object_t): Promise<boolean>;
      // public native boolean java.lang.Class.isInterface()
      isInterface(): boolean;
      isInterfaceP(): Promise<boolean>;
      // public boolean java.lang.Class.isLocalClass()
      isLocalClass(): boolean;
      isLocalClassP(): Promise<boolean>;
      // public boolean java.lang.Class.isMemberClass()
      isMemberClass(): boolean;
      isMemberClassP(): Promise<boolean>;
      // public native boolean java.lang.Class.isPrimitive()
      isPrimitive(): boolean;
      isPrimitiveP(): Promise<boolean>;
      // public boolean java.lang.Class.isSynthetic()
      isSynthetic(): boolean;
      isSyntheticP(): Promise<boolean>;
      // public T java.lang.Class.newInstance() throws java.lang.InstantiationException,java.lang.IllegalAccessException
      newInstance(): object_t;
      newInstanceP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Class.toGenericString()
      toGenericString(): string;
      toGenericStringP(): Promise<string>;
      // public java.lang.String java.lang.Class.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Class {
      export interface Static {
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader) throws java.lang.ClassNotFoundException
        forName(arg0: string_t, arg1: boolean_t, arg2: ClassLoader): Class;
        forNameP(arg0: string_t, arg1: boolean_t, arg2: ClassLoader): Promise<Class>;
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String) throws java.lang.ClassNotFoundException
        forName(arg0: string_t): Class;
        forNameP(arg0: string_t): Promise<Class>;
      }
    }
  }

  export module java.nio.charset {
    export interface Charset extends Java.java.lang.Object {
      // public final java.util.Set<java.lang.String> java.nio.charset.Charset.aliases()
      aliases(): Set;
      aliasesP(): Promise<Set>;
      // public boolean java.nio.charset.Charset.canEncode()
      canEncode(): boolean;
      canEncodeP(): Promise<boolean>;
      // public final int java.nio.charset.Charset.compareTo(java.nio.charset.Charset)
      compareTo(arg0: Charset): number;
      compareToP(arg0: Charset): Promise<number>;
      // public int java.nio.charset.Charset.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public abstract boolean java.nio.charset.Charset.contains(java.nio.charset.Charset)
      contains(arg0: Charset): boolean;
      containsP(arg0: Charset): Promise<boolean>;
      // public final java.nio.CharBuffer java.nio.charset.Charset.decode(java.nio.ByteBuffer)
      decode(arg0: object_t): object_t;
      decodeP(arg0: object_t): Promise<object_t>;
      // public java.lang.String java.nio.charset.Charset.displayName(java.util.Locale)
      displayName(arg0: object_t): string;
      displayNameP(arg0: object_t): Promise<string>;
      // public java.lang.String java.nio.charset.Charset.displayName()
      displayName(): string;
      displayNameP(): Promise<string>;
      // public final java.nio.ByteBuffer java.nio.charset.Charset.encode(java.nio.CharBuffer)
      encode(arg0: object_t): object_t;
      encodeP(arg0: object_t): Promise<object_t>;
      // public final java.nio.ByteBuffer java.nio.charset.Charset.encode(java.lang.String)
      encode(arg0: string_t): object_t;
      encodeP(arg0: string_t): Promise<object_t>;
      // public final boolean java.nio.charset.Charset.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final int java.nio.charset.Charset.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final boolean java.nio.charset.Charset.isRegistered()
      isRegistered(): boolean;
      isRegisteredP(): Promise<boolean>;
      // public final java.lang.String java.nio.charset.Charset.name()
      name(): string;
      nameP(): Promise<string>;
      // public abstract java.nio.charset.CharsetDecoder java.nio.charset.Charset.newDecoder()
      newDecoder(): object_t;
      newDecoderP(): Promise<object_t>;
      // public abstract java.nio.charset.CharsetEncoder java.nio.charset.Charset.newEncoder()
      newEncoder(): object_t;
      newEncoderP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final java.lang.String java.nio.charset.Charset.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Charset {
      export interface Static {
        // public static java.util.SortedMap<java.lang.String, java.nio.charset.Charset> java.nio.charset.Charset.availableCharsets()
        availableCharsets(): object_t;
        availableCharsetsP(): Promise<object_t>;
        // public static java.nio.charset.Charset java.nio.charset.Charset.defaultCharset()
        defaultCharset(): Charset;
        defaultCharsetP(): Promise<Charset>;
        // public static java.nio.charset.Charset java.nio.charset.Charset.forName(java.lang.String)
        forName(arg0: string_t): Charset;
        forNameP(arg0: string_t): Promise<Charset>;
        // public static boolean java.nio.charset.Charset.isSupported(java.lang.String)
        isSupported(arg0: string_t): boolean;
        isSupportedP(arg0: string_t): Promise<boolean>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONWriter$Builder extends Java.java.lang.Object {
      // public com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder.create()
      create(): GraphSONWriter;
      createP(): Promise<GraphSONWriter>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder.mapper(com.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper)
      mapper(arg0: GraphSONMapper): GraphSONWriter$Builder;
      mapperP(arg0: GraphSONMapper): Promise<GraphSONWriter$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONWriter$Builder {
      export interface Static {
      }
    }
  }

  export module groovy.lang {
    export interface Binding extends Java.groovy.lang.GroovyObjectSupport {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public groovy.lang.MetaClass groovy.lang.GroovyObjectSupport.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object groovy.lang.Binding.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.Binding.getVariable(java.lang.String)
      getVariable(arg0: string_t): object_t;
      getVariableP(arg0: string_t): Promise<object_t>;
      // public java.util.Map groovy.lang.Binding.getVariables()
      getVariables(): Map;
      getVariablesP(): Promise<Map>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean groovy.lang.Binding.hasVariable(java.lang.String)
      hasVariable(arg0: string_t): boolean;
      hasVariableP(arg0: string_t): Promise<boolean>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void groovy.lang.Binding.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void groovy.lang.Binding.setVariable(java.lang.String,java.lang.Object)
      setVariable(arg0: string_t, arg1: object_t): void;
      setVariableP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Binding {
      export interface Static {
        new (arg0: array_t<string_t>): groovy.lang.Binding;
        new (arg0: Map): groovy.lang.Binding;
        new (): groovy.lang.Binding;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.computer {
    export interface VertexProgram extends Java.java.lang.Object {
      // public abstract com.tinkerpop.gremlin.process.computer.VertexProgram<M> com.tinkerpop.gremlin.process.computer.VertexProgram.clone() throws java.lang.CloneNotSupportedException
      clone(): VertexProgram;
      cloneP(): Promise<VertexProgram>;
      // public abstract void com.tinkerpop.gremlin.process.computer.VertexProgram.execute(com.tinkerpop.gremlin.structure.Vertex,com.tinkerpop.gremlin.process.computer.Messenger<M>,com.tinkerpop.gremlin.process.computer.Memory)
      execute(arg0: Vertex, arg1: object_t, arg2: object_t): void;
      executeP(arg0: Vertex, arg1: object_t, arg2: object_t): Promise<void>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.process.computer.VertexProgram.getElementComputeKeys()
      getElementComputeKeys(): Set;
      getElementComputeKeysP(): Promise<Set>;
      // public default com.tinkerpop.gremlin.process.computer.VertexProgram$Features com.tinkerpop.gremlin.process.computer.VertexProgram.getFeatures()
      getFeatures(): object_t;
      getFeaturesP(): Promise<object_t>;
      // public default java.util.Set<com.tinkerpop.gremlin.process.computer.MapReduce> com.tinkerpop.gremlin.process.computer.VertexProgram.getMapReducers()
      getMapReducers(): Set;
      getMapReducersP(): Promise<Set>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.process.computer.VertexProgram.getMemoryComputeKeys()
      getMemoryComputeKeys(): Set;
      getMemoryComputeKeysP(): Promise<Set>;
      // public default java.util.Optional<com.tinkerpop.gremlin.process.computer.MessageCombiner<M>> com.tinkerpop.gremlin.process.computer.VertexProgram.getMessageCombiner()
      getMessageCombiner(): object_t;
      getMessageCombinerP(): Promise<object_t>;
      // public abstract java.util.Set<com.tinkerpop.gremlin.process.computer.MessageScope> com.tinkerpop.gremlin.process.computer.VertexProgram.getMessageScopes(com.tinkerpop.gremlin.process.computer.Memory)
      getMessageScopes(arg0: object_t): Set;
      getMessageScopesP(arg0: object_t): Promise<Set>;
      // public default void com.tinkerpop.gremlin.process.computer.VertexProgram.loadState(org.apache.commons.configuration.Configuration)
      loadState(arg0: object_t): void;
      loadStateP(arg0: object_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.computer.VertexProgram.setup(com.tinkerpop.gremlin.process.computer.Memory)
      setup(arg0: object_t): void;
      setupP(arg0: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.computer.VertexProgram.storeState(org.apache.commons.configuration.Configuration)
      storeState(arg0: object_t): void;
      storeStateP(arg0: object_t): Promise<void>;
      // public abstract boolean com.tinkerpop.gremlin.process.computer.VertexProgram.terminate(com.tinkerpop.gremlin.process.computer.Memory)
      terminate(arg0: object_t): boolean;
      terminateP(arg0: object_t): Promise<boolean>;
      // public default void com.tinkerpop.gremlin.process.computer.VertexProgram.workerIterationEnd(com.tinkerpop.gremlin.process.computer.Memory)
      workerIterationEnd(arg0: object_t): void;
      workerIterationEndP(arg0: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.computer.VertexProgram.workerIterationStart(com.tinkerpop.gremlin.process.computer.Memory)
      workerIterationStart(arg0: object_t): void;
      workerIterationStartP(arg0: object_t): Promise<void>;
    }
    export module VertexProgram {
      export interface Static {
        // public static <V> V com.tinkerpop.gremlin.process.computer.VertexProgram.createVertexProgram(org.apache.commons.configuration.Configuration)
        createVertexProgram(arg0: object_t): VertexProgram;
        createVertexProgramP(arg0: object_t): Promise<VertexProgram>;
        VERTEX_PROGRAM: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.computer.util {
    export interface ScriptEngineLambda extends Java.java.lang.Object,Java.java.util.function_.Function,Java.java.util.function_.Supplier,Java.java.util.function_.Consumer,Java.java.util.function_.Predicate,Java.java.util.function_.BiConsumer,Java.com.tinkerpop.gremlin.util.function_.TriConsumer {
      // public void com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda.accept(java.lang.Object,java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public void com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda.accept(java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public void com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda.accept(java.lang.Object)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default com.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> com.tinkerpop.gremlin.util.function.TriConsumer.andThen(com.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
      // public default java.util.function.BiConsumer<T, U> java.util.function.BiConsumer.andThen(java.util.function.BiConsumer<? super T, ? super U>)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public java.lang.Object com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda.apply(java.lang.Object)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Object com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public boolean com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda.test(java.lang.Object)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ScriptEngineLambda {
      export interface Static {
        new (arg0: string_t, arg1: string_t): com.tinkerpop.gremlin.process.computer.util.ScriptEngineLambda;
      }
    }
  }

  export module java.lang {
    export interface Double extends Java.java.lang.Number {
      // public byte java.lang.Double.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Double.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Double.compareTo(java.lang.Double)
      compareTo(arg0: double_t): number;
      compareToP(arg0: double_t): Promise<number>;
      // public double java.lang.Double.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Double.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public float java.lang.Double.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int java.lang.Double.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.Double.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public boolean java.lang.Double.isInfinite()
      isInfinite(): boolean;
      isInfiniteP(): Promise<boolean>;
      // public boolean java.lang.Double.isNaN()
      isNaN(): boolean;
      isNaNP(): Promise<boolean>;
      // public long java.lang.Double.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Double.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Double.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Double {
      export interface Static {
        new (arg0: string_t): java.lang.Double;
        new (arg0: double_t): java.lang.Double;
        // public static int java.lang.Double.compare(double,double)
        compare(arg0: double_t, arg1: double_t): number;
        compareP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static long java.lang.Double.doubleToLongBits(double)
        doubleToLongBits(arg0: double_t): longValue_t;
        doubleToLongBitsP(arg0: double_t): Promise<longValue_t>;
        // public static native long java.lang.Double.doubleToRawLongBits(double)
        doubleToRawLongBits(arg0: double_t): longValue_t;
        doubleToRawLongBitsP(arg0: double_t): Promise<longValue_t>;
        // public static int java.lang.Double.hashCode(double)
        hashCode(arg0: double_t): number;
        hashCodeP(arg0: double_t): Promise<number>;
        // public static boolean java.lang.Double.isFinite(double)
        isFinite(arg0: double_t): boolean;
        isFiniteP(arg0: double_t): Promise<boolean>;
        // public static boolean java.lang.Double.isInfinite(double)
        isInfinite(arg0: double_t): boolean;
        isInfiniteP(arg0: double_t): Promise<boolean>;
        // public static boolean java.lang.Double.isNaN(double)
        isNaN(arg0: double_t): boolean;
        isNaNP(arg0: double_t): Promise<boolean>;
        // public static native double java.lang.Double.longBitsToDouble(long)
        longBitsToDouble(arg0: long_t): number;
        longBitsToDoubleP(arg0: long_t): Promise<number>;
        // public static double java.lang.Double.max(double,double)
        max(arg0: double_t, arg1: double_t): number;
        maxP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static double java.lang.Double.min(double,double)
        min(arg0: double_t, arg1: double_t): number;
        minP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException
        parseDouble(arg0: string_t): number;
        parseDoubleP(arg0: string_t): Promise<number>;
        // public static double java.lang.Double.sum(double,double)
        sum(arg0: double_t, arg1: double_t): number;
        sumP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static java.lang.String java.lang.Double.toHexString(double)
        toHexString(arg0: double_t): string;
        toHexStringP(arg0: double_t): Promise<string>;
        // public static java.lang.String java.lang.Double.toString(double)
        toString(arg0: double_t): string;
        toStringP(arg0: double_t): Promise<string>;
        // public static java.lang.Double java.lang.Double.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Double java.lang.Double.valueOf(double)
        valueOf(arg0: double_t): number;
        valueOfP(arg0: double_t): Promise<number>;
        POSITIVE_INFINITY: number;
        NEGATIVE_INFINITY: number;
        NaN: number;
        MAX_VALUE: number;
        MIN_NORMAL: number;
        MIN_VALUE: number;
        MAX_EXPONENT: number;
        MIN_EXPONENT: number;
        SIZE: number;
        BYTES: number;
        TYPE: Class;
      }
    }
  }

  export module java.lang {
    export interface String extends Java.java.lang.Object {
      // public char java.lang.String.charAt(int)
      charAt(arg0: integer_t): object_t;
      charAtP(arg0: integer_t): Promise<object_t>;
      // public default java.util.stream.IntStream java.lang.CharSequence.chars()
      chars(): object_t;
      charsP(): Promise<object_t>;
      // public int java.lang.String.codePointAt(int)
      codePointAt(arg0: integer_t): number;
      codePointAtP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.codePointBefore(int)
      codePointBefore(arg0: integer_t): number;
      codePointBeforeP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.codePointCount(int,int)
      codePointCount(arg0: integer_t, arg1: integer_t): number;
      codePointCountP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public default java.util.stream.IntStream java.lang.CharSequence.codePoints()
      codePoints(): object_t;
      codePointsP(): Promise<object_t>;
      // public int java.lang.String.compareTo(java.lang.String)
      compareTo(arg0: string_t): number;
      compareToP(arg0: string_t): Promise<number>;
      // public int java.lang.String.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.String.compareToIgnoreCase(java.lang.String)
      compareToIgnoreCase(arg0: string_t): number;
      compareToIgnoreCaseP(arg0: string_t): Promise<number>;
      // public java.lang.String java.lang.String.concat(java.lang.String)
      concat(arg0: string_t): string;
      concatP(arg0: string_t): Promise<string>;
      // public boolean java.lang.String.contains(java.lang.CharSequence)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.contentEquals(java.lang.StringBuffer)
      contentEquals(arg0: object_t): boolean;
      contentEqualsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.contentEquals(java.lang.CharSequence)
      contentEquals(arg0: object_t): boolean;
      contentEqualsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.endsWith(java.lang.String)
      endsWith(arg0: string_t): boolean;
      endsWithP(arg0: string_t): Promise<boolean>;
      // public boolean java.lang.String.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.equalsIgnoreCase(java.lang.String)
      equalsIgnoreCase(arg0: string_t): boolean;
      equalsIgnoreCaseP(arg0: string_t): Promise<boolean>;
      // public void java.lang.String.getBytes(int,int,byte[],int)
      getBytes(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
      getBytesP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
      // public byte[] java.lang.String.getBytes(java.nio.charset.Charset)
      getBytes(arg0: Charset): object_t[];
      getBytesP(arg0: Charset): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException
      getBytes(arg0: string_t): object_t[];
      getBytesP(arg0: string_t): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes()
      getBytes(): object_t[];
      getBytesP(): Promise<object_t[]>;
      // public void java.lang.String.getChars(int,int,char[],int)
      getChars(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
      getCharsP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int java.lang.String.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.String.indexOf(java.lang.String,int)
      indexOf(arg0: string_t, arg1: integer_t): number;
      indexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.indexOf(int,int)
      indexOf(arg0: integer_t, arg1: integer_t): number;
      indexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.indexOf(java.lang.String)
      indexOf(arg0: string_t): number;
      indexOfP(arg0: string_t): Promise<number>;
      // public int java.lang.String.indexOf(int)
      indexOf(arg0: integer_t): number;
      indexOfP(arg0: integer_t): Promise<number>;
      // public native java.lang.String java.lang.String.intern()
      intern(): string;
      internP(): Promise<string>;
      // public boolean java.lang.String.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public int java.lang.String.lastIndexOf(java.lang.String,int)
      lastIndexOf(arg0: string_t, arg1: integer_t): number;
      lastIndexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(int,int)
      lastIndexOf(arg0: integer_t, arg1: integer_t): number;
      lastIndexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(java.lang.String)
      lastIndexOf(arg0: string_t): number;
      lastIndexOfP(arg0: string_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(int)
      lastIndexOf(arg0: integer_t): number;
      lastIndexOfP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.length()
      length(): number;
      lengthP(): Promise<number>;
      // public boolean java.lang.String.matches(java.lang.String)
      matches(arg0: string_t): boolean;
      matchesP(arg0: string_t): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.lang.String.offsetByCodePoints(int,int)
      offsetByCodePoints(arg0: integer_t, arg1: integer_t): number;
      offsetByCodePointsP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)
      regionMatches(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): boolean;
      regionMatchesP(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): Promise<boolean>;
      // public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)
      regionMatches(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): boolean;
      regionMatchesP(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): Promise<boolean>;
      // public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)
      replace(arg0: object_t, arg1: object_t): string;
      replaceP(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replace(char,char)
      replace(arg0: object_t, arg1: object_t): string;
      replaceP(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)
      replaceAll(arg0: string_t, arg1: string_t): string;
      replaceAllP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)
      replaceFirst(arg0: string_t, arg1: string_t): string;
      replaceFirstP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String[] java.lang.String.split(java.lang.String,int)
      split(arg0: string_t, arg1: integer_t): string[];
      splitP(arg0: string_t, arg1: integer_t): Promise<string[]>;
      // public java.lang.String[] java.lang.String.split(java.lang.String)
      split(arg0: string_t): string[];
      splitP(arg0: string_t): Promise<string[]>;
      // public boolean java.lang.String.startsWith(java.lang.String,int)
      startsWith(arg0: string_t, arg1: integer_t): boolean;
      startsWithP(arg0: string_t, arg1: integer_t): Promise<boolean>;
      // public boolean java.lang.String.startsWith(java.lang.String)
      startsWith(arg0: string_t): boolean;
      startsWithP(arg0: string_t): Promise<boolean>;
      // public java.lang.CharSequence java.lang.String.subSequence(int,int)
      subSequence(arg0: integer_t, arg1: integer_t): object_t;
      subSequenceP(arg0: integer_t, arg1: integer_t): Promise<object_t>;
      // public java.lang.String java.lang.String.substring(int,int)
      substring(arg0: integer_t, arg1: integer_t): string;
      substringP(arg0: integer_t, arg1: integer_t): Promise<string>;
      // public java.lang.String java.lang.String.substring(int)
      substring(arg0: integer_t): string;
      substringP(arg0: integer_t): Promise<string>;
      // public char[] java.lang.String.toCharArray()
      toCharArray(): object_t[];
      toCharArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.String.toLowerCase(java.util.Locale)
      toLowerCase(arg0: object_t): string;
      toLowerCaseP(arg0: object_t): Promise<string>;
      // public java.lang.String java.lang.String.toLowerCase()
      toLowerCase(): string;
      toLowerCaseP(): Promise<string>;
      // public java.lang.String java.lang.String.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase(java.util.Locale)
      toUpperCase(arg0: object_t): string;
      toUpperCaseP(arg0: object_t): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase()
      toUpperCase(): string;
      toUpperCaseP(): Promise<string>;
      // public java.lang.String java.lang.String.trim()
      trim(): string;
      trimP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module String {
      export interface Static {
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Charset): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): java.lang.String;
        new (arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: Charset): java.lang.String;
        new (arg0: object_array_t, arg1: string_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: string_t): java.lang.String;
        new (arg0: object_array_t): java.lang.String;
        new (arg0: object_array_t): java.lang.String;
        new (): java.lang.String;
        // public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
        copyValueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
        copyValueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.copyValueOf(char[])
        copyValueOf(arg0: object_array_t): string;
        copyValueOfP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)
        format(arg0: object_t, arg1: string_t, ...arg2: object_t[]): string;
        format(arg0: object_t, arg1: string_t, arg2: object_array_t): string;
        formatP(arg0: object_t, arg1: string_t, ...arg2: object_t[]): Promise<string>;
        formatP(arg0: object_t, arg1: string_t, arg2: object_array_t): string;
        // public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object...)
        format(arg0: string_t, ...arg1: object_t[]): string;
        format(arg0: string_t, arg1: object_array_t): string;
        formatP(arg0: string_t, ...arg1: object_t[]): Promise<string>;
        formatP(arg0: string_t, arg1: object_array_t): string;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)
        join(arg0: object_t, ...arg1: object_t[]): string;
        join(arg0: object_t, arg1: object_array_t): string;
        joinP(arg0: object_t, ...arg1: object_t[]): Promise<string>;
        joinP(arg0: object_t, arg1: object_array_t): string;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)
        join(arg0: object_t, arg1: Iterable): string;
        joinP(arg0: object_t, arg1: Iterable): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[],int,int)
        valueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
        valueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(java.lang.Object)
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[])
        valueOf(arg0: object_array_t): string;
        valueOfP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(boolean)
        valueOf(arg0: boolean_t): string;
        valueOfP(arg0: boolean_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(long)
        valueOf(arg0: long_t): string;
        valueOfP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(int)
        valueOf(arg0: integer_t): string;
        valueOfP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(float)
        valueOf(arg0: float_t): string;
        valueOfP(arg0: float_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(double)
        valueOf(arg0: double_t): string;
        valueOfP(arg0: double_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char)
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        CASE_INSENSITIVE_ORDER: Comparator;
      }
    }
  }

  export module org.codehaus.groovy.control {
    export interface CompilerConfiguration extends Java.java.lang.Object {
      // public org.codehaus.groovy.control.CompilerConfiguration org.codehaus.groovy.control.CompilerConfiguration.addCompilationCustomizers(org.codehaus.groovy.control.customizers.CompilationCustomizer...)
      addCompilationCustomizers(...arg0: CompilationCustomizer[]): CompilerConfiguration;
      addCompilationCustomizers(arg0: array_t<CompilationCustomizer>): CompilerConfiguration;
      addCompilationCustomizersP(...arg0: CompilationCustomizer[]): Promise<CompilerConfiguration>;
      addCompilationCustomizersP(arg0: array_t<CompilationCustomizer>): CompilerConfiguration;
      // public void org.codehaus.groovy.control.CompilerConfiguration.configure(java.util.Properties) throws org.codehaus.groovy.control.ConfigurationException
      configure(arg0: object_t): void;
      configureP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public org.codehaus.groovy.control.BytecodeProcessor org.codehaus.groovy.control.CompilerConfiguration.getBytecodePostprocessor()
      getBytecodePostprocessor(): object_t;
      getBytecodePostprocessorP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.List<java.lang.String> org.codehaus.groovy.control.CompilerConfiguration.getClasspath()
      getClasspath(): List;
      getClasspathP(): Promise<List>;
      // public java.util.List<org.codehaus.groovy.control.customizers.CompilationCustomizer> org.codehaus.groovy.control.CompilerConfiguration.getCompilationCustomizers()
      getCompilationCustomizers(): List;
      getCompilationCustomizersP(): Promise<List>;
      // public boolean org.codehaus.groovy.control.CompilerConfiguration.getDebug()
      getDebug(): boolean;
      getDebugP(): Promise<boolean>;
      // public java.lang.String org.codehaus.groovy.control.CompilerConfiguration.getDefaultScriptExtension()
      getDefaultScriptExtension(): string;
      getDefaultScriptExtensionP(): Promise<string>;
      // public java.util.Set<java.lang.String> org.codehaus.groovy.control.CompilerConfiguration.getDisabledGlobalASTTransformations()
      getDisabledGlobalASTTransformations(): Set;
      getDisabledGlobalASTTransformationsP(): Promise<Set>;
      // public java.util.Map<java.lang.String, java.lang.Object> org.codehaus.groovy.control.CompilerConfiguration.getJointCompilationOptions()
      getJointCompilationOptions(): Map;
      getJointCompilationOptionsP(): Promise<Map>;
      // public int org.codehaus.groovy.control.CompilerConfiguration.getMinimumRecompilationInterval()
      getMinimumRecompilationInterval(): number;
      getMinimumRecompilationIntervalP(): Promise<number>;
      // public java.util.Map<java.lang.String, java.lang.Boolean> org.codehaus.groovy.control.CompilerConfiguration.getOptimizationOptions()
      getOptimizationOptions(): Map;
      getOptimizationOptionsP(): Promise<Map>;
      // public java.io.PrintWriter org.codehaus.groovy.control.CompilerConfiguration.getOutput()
      getOutput(): object_t;
      getOutputP(): Promise<object_t>;
      // public org.codehaus.groovy.control.ParserPluginFactory org.codehaus.groovy.control.CompilerConfiguration.getPluginFactory()
      getPluginFactory(): object_t;
      getPluginFactoryP(): Promise<object_t>;
      // public boolean org.codehaus.groovy.control.CompilerConfiguration.getRecompileGroovySource()
      getRecompileGroovySource(): boolean;
      getRecompileGroovySourceP(): Promise<boolean>;
      // public java.lang.String org.codehaus.groovy.control.CompilerConfiguration.getScriptBaseClass()
      getScriptBaseClass(): string;
      getScriptBaseClassP(): Promise<string>;
      // public java.util.Set<java.lang.String> org.codehaus.groovy.control.CompilerConfiguration.getScriptExtensions()
      getScriptExtensions(): Set;
      getScriptExtensionsP(): Promise<Set>;
      // public java.lang.String org.codehaus.groovy.control.CompilerConfiguration.getSourceEncoding()
      getSourceEncoding(): string;
      getSourceEncodingP(): Promise<string>;
      // public java.lang.String org.codehaus.groovy.control.CompilerConfiguration.getTargetBytecode()
      getTargetBytecode(): string;
      getTargetBytecodeP(): Promise<string>;
      // public java.io.File org.codehaus.groovy.control.CompilerConfiguration.getTargetDirectory()
      getTargetDirectory(): object_t;
      getTargetDirectoryP(): Promise<object_t>;
      // public int org.codehaus.groovy.control.CompilerConfiguration.getTolerance()
      getTolerance(): number;
      getToleranceP(): Promise<number>;
      // public boolean org.codehaus.groovy.control.CompilerConfiguration.getVerbose()
      getVerbose(): boolean;
      getVerboseP(): Promise<boolean>;
      // public int org.codehaus.groovy.control.CompilerConfiguration.getWarningLevel()
      getWarningLevel(): number;
      getWarningLevelP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setBytecodePostprocessor(org.codehaus.groovy.control.BytecodeProcessor)
      setBytecodePostprocessor(arg0: object_t): void;
      setBytecodePostprocessorP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setClasspath(java.lang.String)
      setClasspath(arg0: string_t): void;
      setClasspathP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setClasspathList(java.util.List<java.lang.String>)
      setClasspathList(arg0: List): void;
      setClasspathListP(arg0: List): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setDebug(boolean)
      setDebug(arg0: boolean_t): void;
      setDebugP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setDefaultScriptExtension(java.lang.String)
      setDefaultScriptExtension(arg0: string_t): void;
      setDefaultScriptExtensionP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setDisabledGlobalASTTransformations(java.util.Set<java.lang.String>)
      setDisabledGlobalASTTransformations(arg0: Set): void;
      setDisabledGlobalASTTransformationsP(arg0: Set): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setJointCompilationOptions(java.util.Map<java.lang.String, java.lang.Object>)
      setJointCompilationOptions(arg0: Map): void;
      setJointCompilationOptionsP(arg0: Map): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setMinimumRecompilationInterval(int)
      setMinimumRecompilationInterval(arg0: integer_t): void;
      setMinimumRecompilationIntervalP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setOptimizationOptions(java.util.Map<java.lang.String, java.lang.Boolean>)
      setOptimizationOptions(arg0: Map): void;
      setOptimizationOptionsP(arg0: Map): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setOutput(java.io.PrintWriter)
      setOutput(arg0: object_t): void;
      setOutputP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setPluginFactory(org.codehaus.groovy.control.ParserPluginFactory)
      setPluginFactory(arg0: object_t): void;
      setPluginFactoryP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setRecompileGroovySource(boolean)
      setRecompileGroovySource(arg0: boolean_t): void;
      setRecompileGroovySourceP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setScriptBaseClass(java.lang.String)
      setScriptBaseClass(arg0: string_t): void;
      setScriptBaseClassP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setScriptExtensions(java.util.Set<java.lang.String>)
      setScriptExtensions(arg0: Set): void;
      setScriptExtensionsP(arg0: Set): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setSourceEncoding(java.lang.String)
      setSourceEncoding(arg0: string_t): void;
      setSourceEncodingP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setTargetBytecode(java.lang.String)
      setTargetBytecode(arg0: string_t): void;
      setTargetBytecodeP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setTargetDirectory(java.lang.String)
      setTargetDirectory(arg0: string_t): void;
      setTargetDirectoryP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setTargetDirectory(java.io.File)
      setTargetDirectory(arg0: object_t): void;
      setTargetDirectoryP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setTolerance(int)
      setTolerance(arg0: integer_t): void;
      setToleranceP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setVerbose(boolean)
      setVerbose(arg0: boolean_t): void;
      setVerboseP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setWarningLevel(int)
      setWarningLevel(arg0: integer_t): void;
      setWarningLevelP(arg0: integer_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module CompilerConfiguration {
      export interface Static {
        new (arg0: CompilerConfiguration): org.codehaus.groovy.control.CompilerConfiguration;
        new (arg0: object_t): org.codehaus.groovy.control.CompilerConfiguration;
        new (): org.codehaus.groovy.control.CompilerConfiguration;
        // public static boolean org.codehaus.groovy.control.CompilerConfiguration.isPostJDK5(java.lang.String)
        isPostJDK5(arg0: string_t): boolean;
        isPostJDK5P(arg0: string_t): Promise<boolean>;
        // public static boolean org.codehaus.groovy.control.CompilerConfiguration.isPostJDK7(java.lang.String)
        isPostJDK7(arg0: string_t): boolean;
        isPostJDK7P(arg0: string_t): Promise<boolean>;
        JDK4: string;
        JDK5: string;
        JDK6: string;
        JDK7: string;
        JDK8: string;
        POST_JDK5: string;
        PRE_JDK5: string;
        currentJVMVersion: string;
        DEFAULT: CompilerConfiguration;
      }
    }
  }

  export module groovy.lang {
    export interface MetaMethod extends Java.java.lang.Object {
      // public void groovy.lang.MetaMethod.checkParameters(java.lang.Class[])
      checkParameters(arg0: array_t<Class>): void;
      checkParametersP(arg0: array_t<Class>): Promise<void>;
      // public java.lang.Object groovy.lang.MetaMethod.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public final java.lang.Object[] org.codehaus.groovy.reflection.ParameterTypes.coerceArgumentsToClasses(java.lang.Object[])
      coerceArgumentsToClasses(arg0: object_array_t): object_t[];
      coerceArgumentsToClassesP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.Object[] org.codehaus.groovy.reflection.ParameterTypes.correctArguments(java.lang.Object[])
      correctArguments(arg0: object_array_t): object_t[];
      correctArgumentsP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.Object groovy.lang.MetaMethod.doMethodInvoke(java.lang.Object,java.lang.Object[])
      doMethodInvoke(arg0: object_t, arg1: object_array_t): object_t;
      doMethodInvokeP(arg0: object_t, arg1: object_array_t): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.codehaus.groovy.reflection.CachedClass groovy.lang.MetaMethod.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public java.lang.String groovy.lang.MetaMethod.getDescriptor()
      getDescriptor(): string;
      getDescriptorP(): Promise<string>;
      // public abstract int groovy.lang.MetaMethod.getModifiers()
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public java.lang.String groovy.lang.MetaMethod.getMopName()
      getMopName(): string;
      getMopNameP(): Promise<string>;
      // public abstract java.lang.String groovy.lang.MetaMethod.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public java.lang.Class[] org.codehaus.groovy.reflection.ParameterTypes.getNativeParameterTypes()
      getNativeParameterTypes(): Class[];
      getNativeParameterTypesP(): Promise<Class[]>;
      // public org.codehaus.groovy.reflection.CachedClass[] org.codehaus.groovy.reflection.ParameterTypes.getParameterTypes()
      getParameterTypes(): object_t[];
      getParameterTypesP(): Promise<object_t[]>;
      // public abstract java.lang.Class groovy.lang.MetaMethod.getReturnType()
      getReturnType(): Class;
      getReturnTypeP(): Promise<Class>;
      // public synchronized java.lang.String groovy.lang.MetaMethod.getSignature()
      getSignature(): string;
      getSignatureP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.Object groovy.lang.MetaMethod.invoke(java.lang.Object,java.lang.Object[])
      invoke(arg0: object_t, arg1: object_array_t): object_t;
      invokeP(arg0: object_t, arg1: object_array_t): Promise<object_t>;
      // public boolean groovy.lang.MetaMethod.isAbstract()
      isAbstract(): boolean;
      isAbstractP(): Promise<boolean>;
      // public boolean groovy.lang.MetaMethod.isCacheable()
      isCacheable(): boolean;
      isCacheableP(): Promise<boolean>;
      // public boolean groovy.lang.MetaMethod.isMethod(groovy.lang.MetaMethod)
      isMethod(arg0: MetaMethod): boolean;
      isMethodP(arg0: MetaMethod): Promise<boolean>;
      // public final boolean groovy.lang.MetaMethod.isPrivate()
      isPrivate(): boolean;
      isPrivateP(): Promise<boolean>;
      // public final boolean groovy.lang.MetaMethod.isProtected()
      isProtected(): boolean;
      isProtectedP(): Promise<boolean>;
      // public final boolean groovy.lang.MetaMethod.isPublic()
      isPublic(): boolean;
      isPublicP(): Promise<boolean>;
      // public final boolean groovy.lang.MetaMethod.isSame(groovy.lang.MetaMethod)
      isSame(arg0: MetaMethod): boolean;
      isSameP(arg0: MetaMethod): Promise<boolean>;
      // public boolean groovy.lang.MetaMethod.isStatic()
      isStatic(): boolean;
      isStaticP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isValidExactMethod(java.lang.Object[])
      isValidExactMethod(arg0: object_array_t): boolean;
      isValidExactMethodP(arg0: object_array_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isValidExactMethod(java.lang.Class[])
      isValidExactMethod(arg0: array_t<Class>): boolean;
      isValidExactMethodP(arg0: array_t<Class>): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isValidMethod(java.lang.Object[])
      isValidMethod(arg0: object_array_t): boolean;
      isValidMethodP(arg0: object_array_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isValidMethod(java.lang.Class[])
      isValidMethod(arg0: array_t<Class>): boolean;
      isValidMethodP(arg0: array_t<Class>): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isVargsMethod(java.lang.Object[])
      isVargsMethod(arg0: object_array_t): boolean;
      isVargsMethodP(arg0: object_array_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isVargsMethod()
      isVargsMethod(): boolean;
      isVargsMethodP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final java.lang.RuntimeException groovy.lang.MetaMethod.processDoMethodInvokeException(java.lang.Exception,java.lang.Object,java.lang.Object[])
      processDoMethodInvokeException(arg0: object_t, arg1: object_t, arg2: object_array_t): object_t;
      processDoMethodInvokeExceptionP(arg0: object_t, arg1: object_t, arg2: object_array_t): Promise<object_t>;
      // public java.lang.String groovy.lang.MetaMethod.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MetaMethod {
      export interface Static {
        new (arg0: array_t<Class>): groovy.lang.MetaMethod;
        new (): groovy.lang.MetaMethod;
      }
    }
  }

  export module java.lang {
    export interface Iterable extends Java.java.lang.Object {
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
    }
    export module Iterable {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface Traversal extends Java.java.util.Iterator {
      // public default com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E> com.tinkerpop.gremlin.process.Traversal.asAdmin()
      asAdmin(): object_t;
      asAdminP(): Promise<object_t>;
      // public default <C> C com.tinkerpop.gremlin.process.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void com.tinkerpop.gremlin.process.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: Class, arg1: Consumer): void;
      forEachRemainingP(arg0: Class, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: GraphComputer): Traversal;
      submitP(arg0: GraphComputer): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.util.BulkSet<E> com.tinkerpop.gremlin.process.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> com.tinkerpop.gremlin.process.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public default java.util.Optional<E> com.tinkerpop.gremlin.process.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
    }
    export module Traversal {
      export interface Static {
        OF: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.computer {
    export interface MapReduce extends Java.java.lang.Object {
      // public default void com.tinkerpop.gremlin.process.computer.MapReduce.addResultToMemory(com.tinkerpop.gremlin.process.computer.Memory$Admin,java.util.Iterator<com.tinkerpop.gremlin.process.computer.KeyValue<RK, RV>>)
      addResultToMemory(arg0: object_t, arg1: Iterator): void;
      addResultToMemoryP(arg0: object_t, arg1: Iterator): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.computer.MapReduce<MK, MV, RK, RV, R> com.tinkerpop.gremlin.process.computer.MapReduce.clone() throws java.lang.CloneNotSupportedException
      clone(): MapReduce;
      cloneP(): Promise<MapReduce>;
      // public default void com.tinkerpop.gremlin.process.computer.MapReduce.combine(MK,java.util.Iterator<MV>,com.tinkerpop.gremlin.process.computer.MapReduce.com.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<RK, RV>)
      combine(arg0: object_t, arg1: Iterator, arg2: object_t): void;
      combineP(arg0: object_t, arg1: Iterator, arg2: object_t): Promise<void>;
      // public abstract boolean com.tinkerpop.gremlin.process.computer.MapReduce.doStage(com.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      doStage(arg0: object_t): boolean;
      doStageP(arg0: object_t): Promise<boolean>;
      // public abstract R com.tinkerpop.gremlin.process.computer.MapReduce.generateFinalResult(java.util.Iterator<com.tinkerpop.gremlin.process.computer.KeyValue<RK, RV>>)
      generateFinalResult(arg0: Iterator): object_t;
      generateFinalResultP(arg0: Iterator): Promise<object_t>;
      // public default java.util.Optional<java.util.Comparator<MK>> com.tinkerpop.gremlin.process.computer.MapReduce.getMapKeySort()
      getMapKeySort(): object_t;
      getMapKeySortP(): Promise<object_t>;
      // public abstract java.lang.String com.tinkerpop.gremlin.process.computer.MapReduce.getMemoryKey()
      getMemoryKey(): string;
      getMemoryKeyP(): Promise<string>;
      // public default java.util.Optional<java.util.Comparator<RK>> com.tinkerpop.gremlin.process.computer.MapReduce.getReduceKeySort()
      getReduceKeySort(): object_t;
      getReduceKeySortP(): Promise<object_t>;
      // public default void com.tinkerpop.gremlin.process.computer.MapReduce.loadState(org.apache.commons.configuration.Configuration)
      loadState(arg0: object_t): void;
      loadStateP(arg0: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.computer.MapReduce.map(com.tinkerpop.gremlin.structure.Vertex,com.tinkerpop.gremlin.process.computer.MapReduce.com.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter<MK, MV>)
      map(arg0: Vertex, arg1: object_t): void;
      mapP(arg0: Vertex, arg1: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.computer.MapReduce.reduce(MK,java.util.Iterator<MV>,com.tinkerpop.gremlin.process.computer.MapReduce.com.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<RK, RV>)
      reduce(arg0: object_t, arg1: Iterator, arg2: object_t): void;
      reduceP(arg0: object_t, arg1: Iterator, arg2: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.computer.MapReduce.storeState(org.apache.commons.configuration.Configuration)
      storeState(arg0: object_t): void;
      storeStateP(arg0: object_t): Promise<void>;
    }
    export module MapReduce {
      export interface Static {
        // public static <M,MK,MV,RK,RV,R> M com.tinkerpop.gremlin.process.computer.MapReduce.createMapReduce(org.apache.commons.configuration.Configuration)
        createMapReduce(arg0: object_t): MapReduce;
        createMapReduceP(arg0: object_t): Promise<MapReduce>;
        MAP_REDUCE: string;
      }
    }
  }

  export module javax.script {
    export interface CompiledScript extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.Object javax.script.CompiledScript.eval(javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: ScriptContext): object_t;
      evalP(arg0: ScriptContext): Promise<object_t>;
      // public java.lang.Object javax.script.CompiledScript.eval(javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: Bindings): object_t;
      evalP(arg0: Bindings): Promise<object_t>;
      // public java.lang.Object javax.script.CompiledScript.eval() throws javax.script.ScriptException
      eval(): object_t;
      evalP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract javax.script.ScriptEngine javax.script.CompiledScript.getEngine()
      getEngine(): ScriptEngine;
      getEngineP(): Promise<ScriptEngine>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module CompiledScript {
      export interface Static {
        new (): javax.script.CompiledScript;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Element extends Java.java.lang.Object {
      // public abstract com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.Element.iterators()
      iterators(): object_t;
      iteratorsP(): Promise<object_t>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public abstract <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void com.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
    }
    export module Element {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface Float extends Java.java.lang.Number {
      // public byte java.lang.Float.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Float.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Float.compareTo(java.lang.Float)
      compareTo(arg0: float_t): number;
      compareToP(arg0: float_t): Promise<number>;
      // public double java.lang.Float.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Float.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public float java.lang.Float.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int java.lang.Float.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.Float.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public boolean java.lang.Float.isInfinite()
      isInfinite(): boolean;
      isInfiniteP(): Promise<boolean>;
      // public boolean java.lang.Float.isNaN()
      isNaN(): boolean;
      isNaNP(): Promise<boolean>;
      // public long java.lang.Float.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Float.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Float.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Float {
      export interface Static {
        new (arg0: string_t): java.lang.Float;
        new (arg0: float_t): java.lang.Float;
        new (arg0: double_t): java.lang.Float;
        // public static int java.lang.Float.compare(float,float)
        compare(arg0: float_t, arg1: float_t): number;
        compareP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static int java.lang.Float.floatToIntBits(float)
        floatToIntBits(arg0: float_t): number;
        floatToIntBitsP(arg0: float_t): Promise<number>;
        // public static native int java.lang.Float.floatToRawIntBits(float)
        floatToRawIntBits(arg0: float_t): number;
        floatToRawIntBitsP(arg0: float_t): Promise<number>;
        // public static int java.lang.Float.hashCode(float)
        hashCode(arg0: float_t): number;
        hashCodeP(arg0: float_t): Promise<number>;
        // public static native float java.lang.Float.intBitsToFloat(int)
        intBitsToFloat(arg0: integer_t): number;
        intBitsToFloatP(arg0: integer_t): Promise<number>;
        // public static boolean java.lang.Float.isFinite(float)
        isFinite(arg0: float_t): boolean;
        isFiniteP(arg0: float_t): Promise<boolean>;
        // public static boolean java.lang.Float.isInfinite(float)
        isInfinite(arg0: float_t): boolean;
        isInfiniteP(arg0: float_t): Promise<boolean>;
        // public static boolean java.lang.Float.isNaN(float)
        isNaN(arg0: float_t): boolean;
        isNaNP(arg0: float_t): Promise<boolean>;
        // public static float java.lang.Float.max(float,float)
        max(arg0: float_t, arg1: float_t): number;
        maxP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static float java.lang.Float.min(float,float)
        min(arg0: float_t, arg1: float_t): number;
        minP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static float java.lang.Float.parseFloat(java.lang.String) throws java.lang.NumberFormatException
        parseFloat(arg0: string_t): number;
        parseFloatP(arg0: string_t): Promise<number>;
        // public static float java.lang.Float.sum(float,float)
        sum(arg0: float_t, arg1: float_t): number;
        sumP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static java.lang.String java.lang.Float.toHexString(float)
        toHexString(arg0: float_t): string;
        toHexStringP(arg0: float_t): Promise<string>;
        // public static java.lang.String java.lang.Float.toString(float)
        toString(arg0: float_t): string;
        toStringP(arg0: float_t): Promise<string>;
        // public static java.lang.Float java.lang.Float.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Float java.lang.Float.valueOf(float)
        valueOf(arg0: float_t): number;
        valueOfP(arg0: float_t): Promise<number>;
        POSITIVE_INFINITY: number;
        NEGATIVE_INFINITY: number;
        NaN: number;
        MAX_VALUE: number;
        MIN_NORMAL: number;
        MIN_VALUE: number;
        MAX_EXPONENT: number;
        MIN_EXPONENT: number;
        SIZE: number;
        BYTES: number;
        TYPE: Class;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.graph.traversal {
    export interface __ extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module __ {
      export interface Static {
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
        addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
        addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
        addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
        addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
        addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
        addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
        addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
        addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.addInE(java.lang.String,java.lang.String,java.lang.Object...)
        addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
        addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
        addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
        addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
        addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
        addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
        addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
        addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.aggregate(java.lang.String)
        aggregate(arg0: string_t): GraphTraversal;
        aggregateP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.aggregate()
        aggregate(): GraphTraversal;
        aggregateP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.and(com.tinkerpop.gremlin.process.Traversal<?, ?>...)
        and(...arg0: Traversal[]): GraphTraversal;
        and(arg0: array_t<Traversal>): GraphTraversal;
        andP(...arg0: Traversal[]): Promise<GraphTraversal>;
        andP(arg0: array_t<Traversal>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.as(java.lang.String)
        as(arg0: string_t): GraphTraversal;
        asP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.back(java.lang.String)
        back(arg0: string_t): GraphTraversal;
        backP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.barrier()
        barrier(): GraphTraversal;
        barrierP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.both(java.lang.String...)
        both(...arg0: string_t[]): GraphTraversal;
        both(arg0: array_t<string_t>): GraphTraversal;
        bothP(...arg0: string_t[]): Promise<GraphTraversal>;
        bothP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.__.bothE(java.lang.String...)
        bothE(...arg0: string_t[]): GraphTraversal;
        bothE(arg0: array_t<string_t>): GraphTraversal;
        bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
        bothEP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.bothV()
        bothV(): GraphTraversal;
        bothVP(): Promise<GraphTraversal>;
        // public static <A,M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.branch(com.tinkerpop.gremlin.process.Traversal<?, M>)
        branch(arg0: Traversal): GraphTraversal;
        branchP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A,M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, M>)
        branch(arg0: Function): GraphTraversal;
        branchP(arg0: Function): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.cap(java.lang.String...)
        cap(...arg0: string_t[]): GraphTraversal;
        cap(arg0: array_t<string_t>): GraphTraversal;
        capP(...arg0: string_t[]): Promise<GraphTraversal>;
        capP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A,M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.choose(com.tinkerpop.gremlin.process.Traversal<?, M>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
        choose(arg0: Traversal, arg1: Traversal, arg2: Traversal): GraphTraversal;
        chooseP(arg0: Traversal, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
        choose(arg0: Predicate, arg1: Traversal, arg2: Traversal): GraphTraversal;
        chooseP(arg0: Predicate, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
        // public static <A,M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.choose(com.tinkerpop.gremlin.process.Traversal<?, M>)
        choose(arg0: Traversal): GraphTraversal;
        chooseP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A,M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.choose(java.util.function.Function<A, M>)
        choose(arg0: Function): GraphTraversal;
        chooseP(arg0: Function): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.coalesce(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
        coalesce(...arg0: Traversal[]): GraphTraversal;
        coalesce(arg0: array_t<Traversal>): GraphTraversal;
        coalesceP(...arg0: Traversal[]): Promise<GraphTraversal>;
        coalesceP(arg0: array_t<Traversal>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.coin(double)
        coin(arg0: double_t): GraphTraversal;
        coinP(arg0: double_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.traversal.__.count()
        count(): GraphTraversal;
        countP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.cyclicPath()
        cyclicPath(): GraphTraversal;
        cyclicPathP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.dedup()
        dedup(): GraphTraversal;
        dedupP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
        emit(arg0: Traversal): GraphTraversal;
        emitP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
        emit(arg0: Predicate): GraphTraversal;
        emitP(arg0: Predicate): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.emit()
        emit(): GraphTraversal;
        emitP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.except(java.util.Collection<A>)
        except(arg0: Collection): GraphTraversal;
        exceptP(arg0: Collection): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.except(java.lang.String)
        except(arg0: string_t): GraphTraversal;
        exceptP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.except(java.lang.Object)
        except(arg0: object_t): GraphTraversal;
        exceptP(arg0: object_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
        filter(arg0: Predicate): GraphTraversal;
        filterP(arg0: Predicate): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
        flatMap(arg0: Function): GraphTraversal;
        flatMapP(arg0: Function): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.fold(E2,java.util.function.BiFunction<E2, A, E2>)
        fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
        foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.traversal.__.fold()
        fold(): GraphTraversal;
        foldP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.group(java.lang.String)
        group(arg0: string_t): GraphTraversal;
        groupP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.group()
        group(): GraphTraversal;
        groupP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.groupCount(java.lang.String)
        groupCount(arg0: string_t): GraphTraversal;
        groupCountP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.groupCount()
        groupCount(): GraphTraversal;
        groupCountP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
        has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
        hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
        has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
        hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
        has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
        hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.has(java.lang.String,java.lang.String,java.lang.Object)
        has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
        hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
        has(arg0: T, arg1: object_t): GraphTraversal;
        hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.has(java.lang.String,java.lang.Object)
        has(arg0: string_t, arg1: object_t): GraphTraversal;
        hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.has(com.tinkerpop.gremlin.process.Traversal<?, ?>)
        has(arg0: Traversal): GraphTraversal;
        hasP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.has(java.lang.String)
        has(arg0: string_t): GraphTraversal;
        hasP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.hasId(java.lang.Object...)
        hasId(...arg0: object_t[]): GraphTraversal;
        hasId(arg0: object_array_t): GraphTraversal;
        hasIdP(...arg0: object_t[]): Promise<GraphTraversal>;
        hasIdP(arg0: object_array_t): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.hasKey(java.lang.String...)
        hasKey(...arg0: string_t[]): GraphTraversal;
        hasKey(arg0: array_t<string_t>): GraphTraversal;
        hasKeyP(...arg0: string_t[]): Promise<GraphTraversal>;
        hasKeyP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.hasLabel(java.lang.String...)
        hasLabel(...arg0: string_t[]): GraphTraversal;
        hasLabel(arg0: array_t<string_t>): GraphTraversal;
        hasLabelP(...arg0: string_t[]): Promise<GraphTraversal>;
        hasLabelP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.hasNot(java.lang.String)
        hasNot(arg0: string_t): GraphTraversal;
        hasNotP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.hasValue(java.lang.Object...)
        hasValue(...arg0: object_t[]): GraphTraversal;
        hasValue(arg0: object_array_t): GraphTraversal;
        hasValueP(...arg0: object_t[]): Promise<GraphTraversal>;
        hasValueP(arg0: object_array_t): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Object> com.tinkerpop.gremlin.process.graph.traversal.__.id()
        id(): GraphTraversal;
        idP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.identity()
        identity(): GraphTraversal;
        identityP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.in(java.lang.String...)
        in(...arg0: string_t[]): GraphTraversal;
        in(arg0: array_t<string_t>): GraphTraversal;
        inP(...arg0: string_t[]): Promise<GraphTraversal>;
        inP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.__.inE(java.lang.String...)
        inE(...arg0: string_t[]): GraphTraversal;
        inE(arg0: array_t<string_t>): GraphTraversal;
        inEP(...arg0: string_t[]): Promise<GraphTraversal>;
        inEP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.inject(java.lang.Object...)
        inject(...arg0: object_t[]): GraphTraversal;
        inject(arg0: object_array_t): GraphTraversal;
        injectP(...arg0: object_t[]): Promise<GraphTraversal>;
        injectP(arg0: object_array_t): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.inV()
        inV(): GraphTraversal;
        inVP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.is(java.util.function.BiPredicate,java.lang.Object)
        is(arg0: BiPredicate, arg1: object_t): GraphTraversal;
        isP(arg0: BiPredicate, arg1: object_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.is(java.lang.Object)
        is(arg0: object_t): GraphTraversal;
        isP(arg0: object_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.iterate()
        iterate(): GraphTraversal;
        iterateP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.String> com.tinkerpop.gremlin.process.graph.traversal.__.key()
        key(): GraphTraversal;
        keyP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.String> com.tinkerpop.gremlin.process.graph.traversal.__.label()
        label(): GraphTraversal;
        labelP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.limit(long)
        limit(arg0: long_t): GraphTraversal;
        limitP(arg0: long_t): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
        local(arg0: Traversal): GraphTraversal;
        localP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
        map(arg0: Function): GraphTraversal;
        mapP(arg0: Function): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.__.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
        match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
        match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
        matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
        matchP(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.max()
        max(): GraphTraversal;
        maxP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.traversal.__.mean()
        mean(): GraphTraversal;
        meanP(): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.min()
        min(): GraphTraversal;
        minP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.or(com.tinkerpop.gremlin.process.Traversal<?, ?>...)
        or(...arg0: Traversal[]): GraphTraversal;
        or(arg0: array_t<Traversal>): GraphTraversal;
        orP(...arg0: Traversal[]): Promise<GraphTraversal>;
        orP(arg0: array_t<Traversal>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.order(com.tinkerpop.gremlin.process.Scope)
        order(arg0: Scope): GraphTraversal;
        orderP(arg0: Scope): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.order()
        order(): GraphTraversal;
        orderP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.otherV()
        otherV(): GraphTraversal;
        otherVP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.out(java.lang.String...)
        out(...arg0: string_t[]): GraphTraversal;
        out(arg0: array_t<string_t>): GraphTraversal;
        outP(...arg0: string_t[]): Promise<GraphTraversal>;
        outP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.__.outE(java.lang.String...)
        outE(...arg0: string_t[]): GraphTraversal;
        outE(arg0: array_t<string_t>): GraphTraversal;
        outEP(...arg0: string_t[]): Promise<GraphTraversal>;
        outEP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.outV()
        outV(): GraphTraversal;
        outVP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.traversal.__.path()
        path(): GraphTraversal;
        pathP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.profile()
        profile(): GraphTraversal;
        profileP(): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.traversal.__.properties(java.lang.String...)
        properties(...arg0: string_t[]): GraphTraversal;
        properties(arg0: array_t<string_t>): GraphTraversal;
        propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
        propertiesP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.__.propertyMap(java.lang.String...)
        propertyMap(...arg0: string_t[]): GraphTraversal;
        propertyMap(arg0: array_t<string_t>): GraphTraversal;
        propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
        propertyMapP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.range(long,long)
        range(arg0: long_t, arg1: long_t): GraphTraversal;
        rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
        repeat(arg0: Traversal): GraphTraversal;
        repeatP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.retain(java.util.Collection<A>)
        retain(arg0: Collection): GraphTraversal;
        retainP(arg0: Collection): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.retain(java.lang.String)
        retain(arg0: string_t): GraphTraversal;
        retainP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.retain(java.lang.Object)
        retain(arg0: object_t): GraphTraversal;
        retainP(arg0: object_t): Promise<GraphTraversal>;
        // public static <A,V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.sack(java.util.function.BinaryOperator<V>,java.lang.String)
        sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
        sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
        // public static <A,V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.sack(java.util.function.BiFunction<V, A, V>)
        sack(arg0: BiFunction): GraphTraversal;
        sackP(arg0: BiFunction): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.sack()
        sack(): GraphTraversal;
        sackP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.sample(int)
        sample(arg0: integer_t): GraphTraversal;
        sampleP(arg0: integer_t): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.__.select(java.lang.String...)
        select(...arg0: string_t[]): GraphTraversal;
        select(arg0: array_t<string_t>): GraphTraversal;
        selectP(...arg0: string_t[]): Promise<GraphTraversal>;
        selectP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.select(java.lang.String)
        select(arg0: string_t): GraphTraversal;
        selectP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
        sideEffect(arg0: Consumer): GraphTraversal;
        sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.simplePath()
        simplePath(): GraphTraversal;
        simplePathP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.start()
        start(): GraphTraversal;
        startP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.store(java.lang.String)
        store(arg0: string_t): GraphTraversal;
        storeP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.store()
        store(): GraphTraversal;
        storeP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.__.subgraph(java.lang.String)
        subgraph(arg0: string_t): GraphTraversal;
        subgraphP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.__.subgraph()
        subgraph(): GraphTraversal;
        subgraphP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
        submit(arg0: GraphComputer): GraphTraversal;
        submitP(arg0: GraphComputer): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.traversal.__.sum()
        sum(): GraphTraversal;
        sumP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.timeLimit(long)
        timeLimit(arg0: long_t): GraphTraversal;
        timeLimitP(arg0: long_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.times(int)
        times(arg0: integer_t): GraphTraversal;
        timesP(arg0: integer_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
        to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
        to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
        toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
        toP(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.__.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
        toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
        toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
        toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
        toEP(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.__.toV(com.tinkerpop.gremlin.structure.Direction)
        toV(arg0: Direction): GraphTraversal;
        toVP(arg0: Direction): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.tree(java.lang.String)
        tree(arg0: string_t): GraphTraversal;
        treeP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.tree()
        tree(): GraphTraversal;
        treeP(): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.unfold()
        unfold(): GraphTraversal;
        unfoldP(): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
        union(...arg0: Traversal[]): GraphTraversal;
        union(arg0: array_t<Traversal>): GraphTraversal;
        unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
        unionP(arg0: array_t<Traversal>): GraphTraversal;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
        until(arg0: Traversal): GraphTraversal;
        untilP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
        until(arg0: Predicate): GraphTraversal;
        untilP(arg0: Predicate): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.value()
        value(): GraphTraversal;
        valueP(): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.__.valueMap(boolean,java.lang.String...)
        valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
        valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
        valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
        valueMapP(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.__.valueMap(java.lang.String...)
        valueMap(...arg0: string_t[]): GraphTraversal;
        valueMap(arg0: array_t<string_t>): GraphTraversal;
        valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
        valueMapP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.__.values(java.lang.String...)
        values(...arg0: string_t[]): GraphTraversal;
        values(arg0: array_t<string_t>): GraphTraversal;
        valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
        valuesP(arg0: array_t<string_t>): GraphTraversal;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.__.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
        where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
        whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.__.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
        where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
        whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
        // public static <A,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.__.where(com.tinkerpop.gremlin.process.Traversal)
        where(arg0: Traversal): GraphTraversal;
        whereP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.withPath()
        withPath(): GraphTraversal;
        withPathP(): Promise<GraphTraversal>;
        // public static <A,B> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
        withSack(arg0: Supplier, arg1: UnaryOperator): GraphTraversal;
        withSackP(arg0: Supplier, arg1: UnaryOperator): Promise<GraphTraversal>;
        // public static <A,B> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.withSack(java.util.function.Supplier<B>)
        withSack(arg0: Supplier): GraphTraversal;
        withSackP(arg0: Supplier): Promise<GraphTraversal>;
        // public static <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.__.withSideEffect(java.lang.String,java.util.function.Supplier)
        withSideEffect(arg0: string_t, arg1: Supplier): GraphTraversal;
        withSideEffectP(arg0: string_t, arg1: Supplier): Promise<GraphTraversal>;
      }
    }
  }

  export module java.lang {
    export interface Short extends Java.java.lang.Number {
      // public byte java.lang.Short.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Short.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Short.compareTo(java.lang.Short)
      compareTo(arg0: short_t): number;
      compareToP(arg0: short_t): Promise<number>;
      // public double java.lang.Short.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Short.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public float java.lang.Short.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int java.lang.Short.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.Short.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public long java.lang.Short.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Short.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Short.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Short {
      export interface Static {
        new (arg0: string_t): java.lang.Short;
        new (arg0: short_t): java.lang.Short;
        // public static int java.lang.Short.compare(short,short)
        compare(arg0: short_t, arg1: short_t): number;
        compareP(arg0: short_t, arg1: short_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.decode(java.lang.String) throws java.lang.NumberFormatException
        decode(arg0: string_t): number;
        decodeP(arg0: string_t): Promise<number>;
        // public static int java.lang.Short.hashCode(short)
        hashCode(arg0: short_t): number;
        hashCodeP(arg0: short_t): Promise<number>;
        // public static short java.lang.Short.parseShort(java.lang.String,int) throws java.lang.NumberFormatException
        parseShort(arg0: string_t, arg1: integer_t): number;
        parseShortP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static short java.lang.Short.parseShort(java.lang.String) throws java.lang.NumberFormatException
        parseShort(arg0: string_t): number;
        parseShortP(arg0: string_t): Promise<number>;
        // public static short java.lang.Short.reverseBytes(short)
        reverseBytes(arg0: short_t): number;
        reverseBytesP(arg0: short_t): Promise<number>;
        // public static java.lang.String java.lang.Short.toString(short)
        toString(arg0: short_t): string;
        toStringP(arg0: short_t): Promise<string>;
        // public static int java.lang.Short.toUnsignedInt(short)
        toUnsignedInt(arg0: short_t): number;
        toUnsignedIntP(arg0: short_t): Promise<number>;
        // public static long java.lang.Short.toUnsignedLong(short)
        toUnsignedLong(arg0: short_t): longValue_t;
        toUnsignedLongP(arg0: short_t): Promise<longValue_t>;
        // public static java.lang.Short java.lang.Short.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOf(arg0: string_t, arg1: integer_t): number;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.valueOf(short)
        valueOf(arg0: short_t): number;
        valueOfP(arg0: short_t): Promise<number>;
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: Class;
        SIZE: number;
        BYTES: number;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Property extends Java.java.lang.Object {
      // public abstract com.tinkerpop.gremlin.structure.Element com.tinkerpop.gremlin.structure.Property.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public default void com.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public abstract boolean com.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: Supplier): object_t;
      orElseGetP(arg0: Supplier): Promise<object_t>;
      // public default <E> V com.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: Supplier): object_t;
      orElseThrowP(arg0: Supplier): Promise<object_t>;
      // public abstract void com.tinkerpop.gremlin.structure.Property.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract V com.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
    }
    export module Property {
      export interface Static {
        // public static <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Property.empty()
        empty(): Property;
        emptyP(): Promise<Property>;
      }
    }
  }

  export module java.util {
    export interface Map$Entry extends Java.java.lang.Object {
      // public abstract boolean java.util.Map$Entry.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract K java.util.Map$Entry.getKey()
      getKey(): object_t;
      getKeyP(): Promise<object_t>;
      // public abstract V java.util.Map$Entry.getValue()
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public abstract int java.util.Map$Entry.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract V java.util.Map$Entry.setValue(V)
      setValue(arg0: object_t): object_t;
      setValueP(arg0: object_t): Promise<object_t>;
    }
    export module Map$Entry {
      export interface Static {
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByKey(java.util.Comparator<? super K>)
        comparingByKey(arg0: Comparator): Comparator;
        comparingByKeyP(arg0: Comparator): Promise<Comparator>;
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByKey()
        comparingByKey(): Comparator;
        comparingByKeyP(): Promise<Comparator>;
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByValue(java.util.Comparator<? super V>)
        comparingByValue(arg0: Comparator): Comparator;
        comparingByValueP(arg0: Comparator): Promise<Comparator>;
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByValue()
        comparingByValue(): Comparator;
        comparingByValueP(): Promise<Comparator>;
      }
    }
  }

  export module java.lang {
    export interface Integer extends Java.java.lang.Number {
      // public byte java.lang.Integer.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Integer.compareTo(java.lang.Integer)
      compareTo(arg0: integer_t): number;
      compareToP(arg0: integer_t): Promise<number>;
      // public int java.lang.Integer.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public double java.lang.Integer.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Integer.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public float java.lang.Integer.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int java.lang.Integer.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.Integer.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public long java.lang.Integer.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Integer.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Integer.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Integer {
      export interface Static {
        new (arg0: string_t): java.lang.Integer;
        new (arg0: integer_t): java.lang.Integer;
        // public static int java.lang.Integer.bitCount(int)
        bitCount(arg0: integer_t): number;
        bitCountP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.compare(int,int)
        compare(arg0: integer_t, arg1: integer_t): number;
        compareP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.compareUnsigned(int,int)
        compareUnsigned(arg0: integer_t, arg1: integer_t): number;
        compareUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.decode(java.lang.String) throws java.lang.NumberFormatException
        decode(arg0: string_t): number;
        decodeP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.divideUnsigned(int,int)
        divideUnsigned(arg0: integer_t, arg1: integer_t): number;
        divideUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)
        getInteger(arg0: string_t, arg1: integer_t): number;
        getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,int)
        getInteger(arg0: string_t, arg1: integer_t): number;
        getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String)
        getInteger(arg0: string_t): number;
        getIntegerP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.hashCode(int)
        hashCode(arg0: integer_t): number;
        hashCodeP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.highestOneBit(int)
        highestOneBit(arg0: integer_t): number;
        highestOneBitP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.lowestOneBit(int)
        lowestOneBit(arg0: integer_t): number;
        lowestOneBitP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.max(int,int)
        max(arg0: integer_t, arg1: integer_t): number;
        maxP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.min(int,int)
        min(arg0: integer_t, arg1: integer_t): number;
        minP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.numberOfLeadingZeros(int)
        numberOfLeadingZeros(arg0: integer_t): number;
        numberOfLeadingZerosP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.numberOfTrailingZeros(int)
        numberOfTrailingZeros(arg0: integer_t): number;
        numberOfTrailingZerosP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseInt(arg0: string_t, arg1: integer_t): number;
        parseIntP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseInt(java.lang.String) throws java.lang.NumberFormatException
        parseInt(arg0: string_t): number;
        parseIntP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedInt(arg0: string_t, arg1: integer_t): number;
        parseUnsignedIntP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedInt(arg0: string_t): number;
        parseUnsignedIntP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.remainderUnsigned(int,int)
        remainderUnsigned(arg0: integer_t, arg1: integer_t): number;
        remainderUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.reverse(int)
        reverse(arg0: integer_t): number;
        reverseP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.reverseBytes(int)
        reverseBytes(arg0: integer_t): number;
        reverseBytesP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.rotateLeft(int,int)
        rotateLeft(arg0: integer_t, arg1: integer_t): number;
        rotateLeftP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.rotateRight(int,int)
        rotateRight(arg0: integer_t, arg1: integer_t): number;
        rotateRightP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.signum(int)
        signum(arg0: integer_t): number;
        signumP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.sum(int,int)
        sum(arg0: integer_t, arg1: integer_t): number;
        sumP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.String java.lang.Integer.toBinaryString(int)
        toBinaryString(arg0: integer_t): string;
        toBinaryStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toHexString(int)
        toHexString(arg0: integer_t): string;
        toHexStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toOctalString(int)
        toOctalString(arg0: integer_t): string;
        toOctalStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toString(int,int)
        toString(arg0: integer_t, arg1: integer_t): string;
        toStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toString(int)
        toString(arg0: integer_t): string;
        toStringP(arg0: integer_t): Promise<string>;
        // public static long java.lang.Integer.toUnsignedLong(int)
        toUnsignedLong(arg0: integer_t): longValue_t;
        toUnsignedLongP(arg0: integer_t): Promise<longValue_t>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int,int)
        toUnsignedString(arg0: integer_t, arg1: integer_t): string;
        toUnsignedStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int)
        toUnsignedString(arg0: integer_t): string;
        toUnsignedStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOf(arg0: string_t, arg1: integer_t): number;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.valueOf(int)
        valueOf(arg0: integer_t): number;
        valueOfP(arg0: integer_t): Promise<number>;
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: Class;
        SIZE: number;
        BYTES: number;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Transaction extends Java.java.lang.Object {
      // public abstract void com.tinkerpop.gremlin.structure.Transaction.close()
      close(): void;
      closeP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Transaction.commit()
      commit(): void;
      commitP(): Promise<void>;
      // public abstract <G> G com.tinkerpop.gremlin.structure.Transaction.create()
      create(): Graph;
      createP(): Promise<Graph>;
      // public abstract boolean com.tinkerpop.gremlin.structure.Transaction.isOpen()
      isOpen(): boolean;
      isOpenP(): Promise<boolean>;
      // public abstract com.tinkerpop.gremlin.structure.Transaction com.tinkerpop.gremlin.structure.Transaction.onClose(java.util.function.Consumer<com.tinkerpop.gremlin.structure.Transaction>)
      onClose(arg0: Consumer): Transaction;
      onCloseP(arg0: Consumer): Promise<Transaction>;
      // public abstract com.tinkerpop.gremlin.structure.Transaction com.tinkerpop.gremlin.structure.Transaction.onReadWrite(java.util.function.Consumer<com.tinkerpop.gremlin.structure.Transaction>)
      onReadWrite(arg0: Consumer): Transaction;
      onReadWriteP(arg0: Consumer): Promise<Transaction>;
      // public abstract void com.tinkerpop.gremlin.structure.Transaction.open()
      open(): void;
      openP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Transaction.readWrite()
      readWrite(): void;
      readWriteP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Transaction.rollback()
      rollback(): void;
      rollbackP(): Promise<void>;
      // public abstract <R> com.tinkerpop.gremlin.structure.Transaction.com.tinkerpop.gremlin.structure.Transaction$Workload<R> com.tinkerpop.gremlin.structure.Transaction.submit(java.util.function.Function<com.tinkerpop.gremlin.structure.Graph, R>)
      submit(arg0: Function): object_t;
      submitP(arg0: Function): Promise<object_t>;
    }
    export module Transaction {
      export interface Static {
      }
    }
  }

  export module groovy.lang {
    export interface MetaBeanProperty extends Java.groovy.lang.MetaProperty {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public org.codehaus.groovy.reflection.CachedField groovy.lang.MetaBeanProperty.getField()
      getField(): object_t;
      getFieldP(): Promise<object_t>;
      // public groovy.lang.MetaMethod groovy.lang.MetaBeanProperty.getGetter()
      getGetter(): MetaMethod;
      getGetterP(): Promise<MetaMethod>;
      // public int groovy.lang.MetaBeanProperty.getModifiers()
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public java.lang.String groovy.lang.MetaProperty.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public java.lang.Object groovy.lang.MetaBeanProperty.getProperty(java.lang.Object)
      getProperty(arg0: object_t): object_t;
      getPropertyP(arg0: object_t): Promise<object_t>;
      // public groovy.lang.MetaMethod groovy.lang.MetaBeanProperty.getSetter()
      getSetter(): MetaMethod;
      getSetterP(): Promise<MetaMethod>;
      // public java.lang.Class groovy.lang.MetaProperty.getType()
      getType(): Class;
      getTypeP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void groovy.lang.MetaBeanProperty.setField(org.codehaus.groovy.reflection.CachedField)
      setField(arg0: object_t): void;
      setFieldP(arg0: object_t): Promise<void>;
      // public void groovy.lang.MetaBeanProperty.setProperty(java.lang.Object,java.lang.Object)
      setProperty(arg0: object_t, arg1: object_t): void;
      setPropertyP(arg0: object_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MetaBeanProperty {
      export interface Static {
        new (arg0: string_t, arg1: Class, arg2: MetaMethod, arg3: MetaMethod): groovy.lang.MetaBeanProperty;
        // public static java.lang.String groovy.lang.MetaProperty.getGetterName(java.lang.String,java.lang.Class)
        getGetterName(arg0: string_t, arg1: Class): string;
        getGetterNameP(arg0: string_t, arg1: Class): Promise<string>;
        // public static java.lang.String groovy.lang.MetaProperty.getSetterName(java.lang.String)
        getSetterName(arg0: string_t): string;
        getSetterNameP(arg0: string_t): Promise<string>;
        PROPERTY_SET_PREFIX: string;
      }
    }
  }

  export module groovy.lang {
    export interface Reference extends Java.groovy.lang.GroovyObjectSupport {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public T groovy.lang.Reference.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public groovy.lang.MetaClass groovy.lang.GroovyObjectSupport.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object groovy.lang.Reference.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Object groovy.lang.Reference.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void groovy.lang.Reference.set(T)
      set(arg0: object_t): void;
      setP(arg0: object_t): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void groovy.lang.Reference.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Reference {
      export interface Static {
        new (arg0: object_t): groovy.lang.Reference;
        new (): groovy.lang.Reference;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Direction extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public final boolean java.lang.Enum.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public final int java.lang.Enum.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public com.tinkerpop.gremlin.structure.Direction com.tinkerpop.gremlin.structure.Direction.opposite()
      opposite(): Direction;
      oppositeP(): Promise<Direction>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Enum.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Direction {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.structure.Direction com.tinkerpop.gremlin.structure.Direction.valueOf(java.lang.String)
        valueOf(arg0: string_t): Direction;
        valueOfP(arg0: string_t): Promise<Direction>;
        // public static com.tinkerpop.gremlin.structure.Direction[] com.tinkerpop.gremlin.structure.Direction.values()
        values(): Direction[];
        valuesP(): Promise<Direction[]>;
        OUT: Direction;
        IN: Direction;
        BOTH: Direction;
        proper: Direction[];
      }
    }
  }

  export module java.util {
    export interface ListIterator extends Java.java.util.Iterator {
      // public abstract void java.util.ListIterator.add(E)
      add(arg0: object_t): void;
      addP(arg0: object_t): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract boolean java.util.ListIterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract boolean java.util.ListIterator.hasPrevious()
      hasPrevious(): boolean;
      hasPreviousP(): Promise<boolean>;
      // public abstract E java.util.ListIterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public abstract int java.util.ListIterator.nextIndex()
      nextIndex(): number;
      nextIndexP(): Promise<number>;
      // public abstract E java.util.ListIterator.previous()
      previous(): object_t;
      previousP(): Promise<object_t>;
      // public abstract int java.util.ListIterator.previousIndex()
      previousIndex(): number;
      previousIndexP(): Promise<number>;
      // public abstract void java.util.ListIterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void java.util.ListIterator.set(E)
      set(arg0: object_t): void;
      setP(arg0: object_t): Promise<void>;
    }
    export module ListIterator {
      export interface Static {
      }
    }
  }

  export module java.nio.charset {
    export interface StandardCharsets extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StandardCharsets {
      export interface Static {
        US_ASCII: Charset;
        ISO_8859_1: Charset;
        UTF_8: Charset;
        UTF_16BE: Charset;
        UTF_16LE: Charset;
        UTF_16: Charset;
      }
    }
  }

  export module java.util.function_ {
    export interface Consumer extends Java.java.lang.Object {
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
    }
    export module Consumer {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface VertexProperty extends Java.com.tinkerpop.gremlin.structure.Property,Java.com.tinkerpop.gremlin.structure.Element {
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.and(com.tinkerpop.gremlin.process.Traversal<?, ?>...)
      and(...arg0: Traversal[]): GraphTraversal;
      and(arg0: array_t<Traversal>): GraphTraversal;
      andP(...arg0: Traversal[]): Promise<GraphTraversal>;
      andP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.barrier()
      barrier(): GraphTraversal;
      barrierP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.branch(com.tinkerpop.gremlin.process.Traversal<?, M>)
      branch(arg0: Traversal): GraphTraversal;
      branchP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, M>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.cap(java.lang.String...)
      cap(...arg0: string_t[]): GraphTraversal;
      cap(arg0: array_t<string_t>): GraphTraversal;
      capP(...arg0: string_t[]): Promise<GraphTraversal>;
      capP(arg0: array_t<string_t>): GraphTraversal;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(com.tinkerpop.gremlin.process.Traversal<?, M>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: Traversal, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Traversal, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: Predicate, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Predicate, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(com.tinkerpop.gremlin.process.Traversal<?, M>)
      choose(arg0: Traversal): GraphTraversal;
      chooseP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(java.util.function.Function<A, M>)
      choose(arg0: Function): GraphTraversal;
      chooseP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.coalesce(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      coalesce(...arg0: Traversal[]): GraphTraversal;
      coalesce(arg0: array_t<Traversal>): GraphTraversal;
      coalesceP(...arg0: Traversal[]): Promise<GraphTraversal>;
      coalesceP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.structure.Element com.tinkerpop.gremlin.structure.VertexProperty.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public abstract com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.VertexProperty.element()
      element(): Vertex;
      elementP(): Promise<Vertex>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: Predicate): GraphTraversal;
      emitP(arg0: Predicate): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: Predicate): GraphTraversal;
      filterP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.VertexProperty.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      has(arg0: Traversal): GraphTraversal;
      hasP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasId(java.lang.Object...)
      hasId(...arg0: object_t[]): GraphTraversal;
      hasId(arg0: object_array_t): GraphTraversal;
      hasIdP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasIdP(arg0: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasKey(java.lang.String...)
      hasKey(...arg0: string_t[]): GraphTraversal;
      hasKey(arg0: array_t<string_t>): GraphTraversal;
      hasKeyP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasKeyP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasLabel(java.lang.String...)
      hasLabel(...arg0: string_t[]): GraphTraversal;
      hasLabel(arg0: array_t<string_t>): GraphTraversal;
      hasLabelP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasLabelP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasValue(java.lang.Object...)
      hasValue(...arg0: object_t[]): GraphTraversal;
      hasValue(arg0: object_array_t): GraphTraversal;
      hasValueP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasValueP(arg0: object_array_t): GraphTraversal;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default void com.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.is(java.util.function.BiPredicate,java.lang.Object)
      is(arg0: BiPredicate, arg1: object_t): GraphTraversal;
      isP(arg0: BiPredicate, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.is(java.lang.Object)
      is(arg0: object_t): GraphTraversal;
      isP(arg0: object_t): Promise<GraphTraversal>;
      // public abstract boolean com.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.iterate()
      iterate(): GraphTraversal;
      iterateP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.VertexProperty$Iterators com.tinkerpop.gremlin.structure.VertexProperty.iterators()
      iterators(): object_t;
      iteratorsP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.VertexProperty.iterators()
      iterators(): object_t;
      iteratorsP(): Promise<object_t>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public default java.lang.String com.tinkerpop.gremlin.structure.VertexProperty.label()
      label(): string;
      labelP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.max()
      max(): GraphTraversal;
      maxP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.mean()
      mean(): GraphTraversal;
      meanP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.min()
      min(): GraphTraversal;
      minP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.or(com.tinkerpop.gremlin.process.Traversal<?, ?>...)
      or(...arg0: Traversal[]): GraphTraversal;
      or(arg0: array_t<Traversal>): GraphTraversal;
      orP(...arg0: Traversal[]): Promise<GraphTraversal>;
      orP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.order(com.tinkerpop.gremlin.process.Scope)
      order(arg0: Scope): GraphTraversal;
      orderP(arg0: Scope): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: Supplier): object_t;
      orElseGetP(arg0: Supplier): Promise<object_t>;
      // public default <E> V com.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: Supplier): object_t;
      orElseThrowP(arg0: Supplier): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.traversal.VertexPropertyTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): GraphTraversal;
      // public abstract <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, com.tinkerpop.gremlin.structure.Property<E2>>> com.tinkerpop.gremlin.process.graph.traversal.VertexPropertyTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public abstract void com.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Property.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, com.tinkerpop.gremlin.structure.VertexProperty> com.tinkerpop.gremlin.process.graph.traversal.VertexPropertyTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.subgraph(java.lang.String)
      subgraph(arg0: string_t): GraphTraversal;
      subgraphP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.subgraph()
      subgraph(): GraphTraversal;
      subgraphP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: GraphComputer): GraphTraversal;
      submitP(arg0: GraphComputer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: Predicate): GraphTraversal;
      untilP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public abstract V com.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.VertexPropertyTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.VertexPropertyTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: Supplier, arg1: UnaryOperator): GraphTraversal;
      withSackP(arg0: Supplier, arg1: UnaryOperator): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: Supplier): GraphTraversal;
      withSackP(arg0: Supplier): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: Supplier): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: Supplier): Promise<GraphTraversal>;
    }
    export module VertexProperty {
      export interface Static {
        // public static <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.VertexProperty.empty()
        empty(): VertexProperty;
        emptyP(): Promise<VertexProperty>;
        DEFAULT_LABEL: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONWriter extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public void com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.writeEdge(java.io.OutputStream,com.tinkerpop.gremlin.structure.Edge) throws java.io.IOException
      writeEdge(arg0: object_t, arg1: Edge): void;
      writeEdgeP(arg0: object_t, arg1: Edge): Promise<void>;
      // public void com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.writeGraph(java.io.OutputStream,com.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
      writeGraph(arg0: object_t, arg1: Graph): void;
      writeGraphP(arg0: object_t, arg1: Graph): Promise<void>;
      // public void com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.writeVertex(java.io.OutputStream,com.tinkerpop.gremlin.structure.Vertex,com.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      writeVertex(arg0: object_t, arg1: Vertex, arg2: Direction): void;
      writeVertexP(arg0: object_t, arg1: Vertex, arg2: Direction): Promise<void>;
      // public void com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.writeVertex(java.io.OutputStream,com.tinkerpop.gremlin.structure.Vertex) throws java.io.IOException
      writeVertex(arg0: object_t, arg1: Vertex): void;
      writeVertexP(arg0: object_t, arg1: Vertex): Promise<void>;
      // public void com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.writeVertices(java.io.OutputStream,com.tinkerpop.gremlin.process.Traversal<?, com.tinkerpop.gremlin.structure.Vertex>,com.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      writeVertices(arg0: object_t, arg1: Traversal, arg2: Direction): void;
      writeVerticesP(arg0: object_t, arg1: Traversal, arg2: Direction): Promise<void>;
      // public void com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.writeVertices(java.io.OutputStream,com.tinkerpop.gremlin.process.Traversal<?, com.tinkerpop.gremlin.structure.Vertex>) throws java.io.IOException
      writeVertices(arg0: object_t, arg1: Traversal): void;
      writeVerticesP(arg0: object_t, arg1: Traversal): Promise<void>;
    }
    export module GraphSONWriter {
      export interface Static {
        // public static com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.build()
        build(): GraphSONWriter$Builder;
        buildP(): Promise<GraphSONWriter$Builder>;
      }
    }
  }

  export module groovy.lang {
    export interface IntRange extends Java.java.util.AbstractList,Java.groovy.lang.Range {
      // public void java.util.AbstractList.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public boolean java.util.AbstractList.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractList.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public boolean java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public void java.util.AbstractList.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public boolean groovy.lang.IntRange.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean groovy.lang.IntRange.containsAll(java.util.Collection)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean groovy.lang.IntRange.containsWithinBounds(java.lang.Object)
      containsWithinBounds(arg0: object_t): boolean;
      containsWithinBoundsP(arg0: object_t): Promise<boolean>;
      // public boolean groovy.lang.IntRange.equals(groovy.lang.IntRange)
      equals(arg0: IntRange): boolean;
      equalsP(arg0: IntRange): Promise<boolean>;
      // public boolean groovy.lang.IntRange.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public java.lang.Integer groovy.lang.IntRange.get(int)
      get(arg0: integer_t): number;
      getP(arg0: integer_t): Promise<number>;
      // public java.lang.Object groovy.lang.IntRange.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.Comparable groovy.lang.IntRange.getFrom()
      getFrom(): object_t;
      getFromP(): Promise<object_t>;
      // public java.lang.Integer groovy.lang.IntRange.getFrom()
      getFrom(): number;
      getFromP(): Promise<number>;
      // public int groovy.lang.IntRange.getFromInt()
      getFromInt(): number;
      getFromIntP(): Promise<number>;
      // public java.lang.Boolean groovy.lang.IntRange.getInclusive()
      getInclusive(): boolean;
      getInclusiveP(): Promise<boolean>;
      // public java.lang.Comparable groovy.lang.IntRange.getTo()
      getTo(): object_t;
      getToP(): Promise<object_t>;
      // public java.lang.Integer groovy.lang.IntRange.getTo()
      getTo(): number;
      getToP(): Promise<number>;
      // public int groovy.lang.IntRange.getToInt()
      getToInt(): number;
      getToIntP(): Promise<number>;
      // public int java.util.AbstractList.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.util.AbstractList.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public java.lang.String groovy.lang.IntRange.inspect()
      inspect(): string;
      inspectP(): Promise<string>;
      // public boolean java.util.AbstractCollection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public boolean groovy.lang.IntRange.isReverse()
      isReverse(): boolean;
      isReverseP(): Promise<boolean>;
      // public java.util.Iterator<java.lang.Integer> groovy.lang.IntRange.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public int java.util.AbstractList.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public java.util.ListIterator<E> java.util.AbstractList.listIterator(int)
      listIterator(arg0: integer_t): ListIterator;
      listIteratorP(arg0: integer_t): Promise<ListIterator>;
      // public java.util.ListIterator<E> java.util.AbstractList.listIterator()
      listIterator(): ListIterator;
      listIteratorP(): Promise<ListIterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public boolean java.util.AbstractCollection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public E java.util.AbstractList.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public boolean java.util.AbstractCollection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: UnaryOperator): void;
      replaceAllP(arg0: UnaryOperator): Promise<void>;
      // public boolean java.util.AbstractCollection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public E java.util.AbstractList.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public int groovy.lang.IntRange.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: Comparator): void;
      sortP(arg0: Comparator): Promise<void>;
      // public default java.util.Spliterator<E> java.util.List.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public void groovy.lang.IntRange.step(int,groovy.lang.Closure)
      step(arg0: integer_t, arg1: Closure): void;
      stepP(arg0: integer_t, arg1: Closure): Promise<void>;
      // public java.util.List<java.lang.Integer> groovy.lang.IntRange.step(int)
      step(arg0: integer_t): List;
      stepP(arg0: integer_t): Promise<List>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public java.util.List<java.lang.Integer> groovy.lang.IntRange.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public org.codehaus.groovy.runtime.RangeInfo groovy.lang.IntRange.subListBorders(int)
      subListBorders(arg0: integer_t): object_t;
      subListBordersP(arg0: integer_t): Promise<object_t>;
      // public <T> T[] java.util.AbstractCollection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.Object[] java.util.AbstractCollection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String groovy.lang.IntRange.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IntRange {
      export interface Static {
        new (arg0: boolean_t, arg1: integer_t, arg2: integer_t): groovy.lang.IntRange;
        new (arg0: integer_t, arg1: integer_t): groovy.lang.IntRange;
      }
    }
  }

  export module java.util {
    export interface Iterator extends Java.java.lang.Object {
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
    }
    export module Iterator {
      export interface Static {
      }
    }
  }

  export module org.codehaus.groovy.ast {
    export interface ClassNode extends Java.java.lang.Object {
      // public void org.codehaus.groovy.ast.AnnotatedNode.addAnnotation(org.codehaus.groovy.ast.AnnotationNode)
      addAnnotation(arg0: object_t): void;
      addAnnotationP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.AnnotatedNode.addAnnotations(java.util.List<org.codehaus.groovy.ast.AnnotationNode>)
      addAnnotations(arg0: List): void;
      addAnnotationsP(arg0: List): Promise<void>;
      // public org.codehaus.groovy.ast.ConstructorNode org.codehaus.groovy.ast.ClassNode.addConstructor(int,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)
      addConstructor(arg0: integer_t, arg1: object_array_t, arg2: array_t<ClassNode>, arg3: object_t): object_t;
      addConstructorP(arg0: integer_t, arg1: object_array_t, arg2: array_t<ClassNode>, arg3: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addConstructor(org.codehaus.groovy.ast.ConstructorNode)
      addConstructor(arg0: object_t): void;
      addConstructorP(arg0: object_t): Promise<void>;
      // public org.codehaus.groovy.ast.FieldNode org.codehaus.groovy.ast.ClassNode.addField(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)
      addField(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t): object_t;
      addFieldP(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addField(org.codehaus.groovy.ast.FieldNode)
      addField(arg0: object_t): void;
      addFieldP(arg0: object_t): Promise<void>;
      // public org.codehaus.groovy.ast.FieldNode org.codehaus.groovy.ast.ClassNode.addFieldFirst(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)
      addFieldFirst(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t): object_t;
      addFieldFirstP(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addFieldFirst(org.codehaus.groovy.ast.FieldNode)
      addFieldFirst(arg0: object_t): void;
      addFieldFirstP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.addInterface(org.codehaus.groovy.ast.ClassNode)
      addInterface(arg0: ClassNode): void;
      addInterfaceP(arg0: ClassNode): Promise<void>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.addMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)
      addMethod(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_array_t, arg4: array_t<ClassNode>, arg5: object_t): object_t;
      addMethodP(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_array_t, arg4: array_t<ClassNode>, arg5: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addMethod(org.codehaus.groovy.ast.MethodNode)
      addMethod(arg0: object_t): void;
      addMethodP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.addMixin(org.codehaus.groovy.ast.MixinNode)
      addMixin(arg0: object_t): void;
      addMixinP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.addObjectInitializerStatements(org.codehaus.groovy.ast.stmt.Statement)
      addObjectInitializerStatements(arg0: object_t): void;
      addObjectInitializerStatementsP(arg0: object_t): Promise<void>;
      // public org.codehaus.groovy.ast.PropertyNode org.codehaus.groovy.ast.ClassNode.addProperty(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)
      addProperty(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t, arg4: object_t, arg5: object_t): object_t;
      addPropertyP(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t, arg4: object_t, arg5: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addProperty(org.codehaus.groovy.ast.PropertyNode)
      addProperty(arg0: object_t): void;
      addPropertyP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.addStaticInitializerStatements(java.util.List<org.codehaus.groovy.ast.stmt.Statement>,boolean)
      addStaticInitializerStatements(arg0: List, arg1: boolean_t): void;
      addStaticInitializerStatementsP(arg0: List, arg1: boolean_t): Promise<void>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.addSyntheticMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)
      addSyntheticMethod(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_array_t, arg4: array_t<ClassNode>, arg5: object_t): object_t;
      addSyntheticMethodP(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_array_t, arg4: array_t<ClassNode>, arg5: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addTransform(java.lang.Class<? extends org.codehaus.groovy.transform.ASTTransformation>,org.codehaus.groovy.ast.ASTNode)
      addTransform(arg0: Class, arg1: object_t): void;
      addTransformP(arg0: Class, arg1: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.copyNodeMetaData(org.codehaus.groovy.ast.ASTNode)
      copyNodeMetaData(arg0: object_t): void;
      copyNodeMetaDataP(arg0: object_t): Promise<void>;
      // public boolean org.codehaus.groovy.ast.ClassNode.declaresInterface(org.codehaus.groovy.ast.ClassNode)
      declaresInterface(arg0: ClassNode): boolean;
      declaresInterfaceP(arg0: ClassNode): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.List<org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getAbstractMethods()
      getAbstractMethods(): List;
      getAbstractMethodsP(): Promise<List>;
      // public java.util.List<org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getAllDeclaredMethods()
      getAllDeclaredMethods(): List;
      getAllDeclaredMethodsP(): Promise<List>;
      // public java.util.Set<org.codehaus.groovy.ast.ClassNode> org.codehaus.groovy.ast.ClassNode.getAllInterfaces()
      getAllInterfaces(): Set;
      getAllInterfacesP(): Promise<Set>;
      // public java.util.List<org.codehaus.groovy.ast.AnnotationNode> org.codehaus.groovy.ast.ClassNode.getAnnotations(org.codehaus.groovy.ast.ClassNode)
      getAnnotations(arg0: ClassNode): List;
      getAnnotationsP(arg0: ClassNode): Promise<List>;
      // public java.util.List<org.codehaus.groovy.ast.AnnotationNode> org.codehaus.groovy.ast.ClassNode.getAnnotations()
      getAnnotations(): List;
      getAnnotationsP(): Promise<List>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int org.codehaus.groovy.ast.ASTNode.getColumnNumber()
      getColumnNumber(): number;
      getColumnNumberP(): Promise<number>;
      // public org.codehaus.groovy.ast.CompileUnit org.codehaus.groovy.ast.ClassNode.getCompileUnit()
      getCompileUnit(): object_t;
      getCompileUnitP(): Promise<object_t>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getComponentType()
      getComponentType(): ClassNode;
      getComponentTypeP(): Promise<ClassNode>;
      // public org.codehaus.groovy.ast.ConstructorNode org.codehaus.groovy.ast.ClassNode.getDeclaredConstructor(org.codehaus.groovy.ast.Parameter[])
      getDeclaredConstructor(arg0: object_array_t): object_t;
      getDeclaredConstructorP(arg0: object_array_t): Promise<object_t>;
      // public java.util.List<org.codehaus.groovy.ast.ConstructorNode> org.codehaus.groovy.ast.ClassNode.getDeclaredConstructors()
      getDeclaredConstructors(): List;
      getDeclaredConstructorsP(): Promise<List>;
      // public org.codehaus.groovy.ast.FieldNode org.codehaus.groovy.ast.ClassNode.getDeclaredField(java.lang.String)
      getDeclaredField(arg0: string_t): object_t;
      getDeclaredFieldP(arg0: string_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getDeclaredMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])
      getDeclaredMethod(arg0: string_t, arg1: object_array_t): object_t;
      getDeclaredMethodP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
      // public java.util.List<org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getDeclaredMethods(java.lang.String)
      getDeclaredMethods(arg0: string_t): List;
      getDeclaredMethodsP(arg0: string_t): Promise<List>;
      // public java.util.Map<java.lang.String, org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getDeclaredMethodsMap()
      getDeclaredMethodsMap(): Map;
      getDeclaredMethodsMapP(): Promise<Map>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.AnnotatedNode.getDeclaringClass()
      getDeclaringClass(): ClassNode;
      getDeclaringClassP(): Promise<ClassNode>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getEnclosingMethod()
      getEnclosingMethod(): object_t;
      getEnclosingMethodP(): Promise<object_t>;
      // public org.codehaus.groovy.ast.FieldNode org.codehaus.groovy.ast.ClassNode.getField(java.lang.String)
      getField(arg0: string_t): object_t;
      getFieldP(arg0: string_t): Promise<object_t>;
      // public java.util.List<org.codehaus.groovy.ast.FieldNode> org.codehaus.groovy.ast.ClassNode.getFields()
      getFields(): List;
      getFieldsP(): Promise<List>;
      // public org.codehaus.groovy.ast.GenericsType[] org.codehaus.groovy.ast.ClassNode.getGenericsTypes()
      getGenericsTypes(): object_t[];
      getGenericsTypesP(): Promise<object_t[]>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getGetterMethod(java.lang.String)
      getGetterMethod(arg0: string_t): object_t;
      getGetterMethodP(arg0: string_t): Promise<object_t>;
      // public java.util.Iterator<org.codehaus.groovy.ast.InnerClassNode> org.codehaus.groovy.ast.ClassNode.getInnerClasses()
      getInnerClasses(): Iterator;
      getInnerClassesP(): Promise<Iterator>;
      // public org.codehaus.groovy.ast.ClassNode[] org.codehaus.groovy.ast.ClassNode.getInterfaces()
      getInterfaces(): ClassNode[];
      getInterfacesP(): Promise<ClassNode[]>;
      // public int org.codehaus.groovy.ast.ASTNode.getLastColumnNumber()
      getLastColumnNumber(): number;
      getLastColumnNumberP(): Promise<number>;
      // public int org.codehaus.groovy.ast.ASTNode.getLastLineNumber()
      getLastLineNumber(): number;
      getLastLineNumberP(): Promise<number>;
      // public int org.codehaus.groovy.ast.ASTNode.getLineNumber()
      getLineNumber(): number;
      getLineNumberP(): Promise<number>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])
      getMethod(arg0: string_t, arg1: object_array_t): object_t;
      getMethodP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
      // public java.util.List<org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getMethods(java.lang.String)
      getMethods(arg0: string_t): List;
      getMethodsP(arg0: string_t): Promise<List>;
      // public java.util.List<org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getMethods()
      getMethods(): List;
      getMethodsP(): Promise<List>;
      // public org.codehaus.groovy.ast.MixinNode[] org.codehaus.groovy.ast.ClassNode.getMixins()
      getMixins(): object_t[];
      getMixinsP(): Promise<object_t[]>;
      // public int org.codehaus.groovy.ast.ClassNode.getModifiers()
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public org.codehaus.groovy.ast.ModuleNode org.codehaus.groovy.ast.ClassNode.getModule()
      getModule(): object_t;
      getModuleP(): Promise<object_t>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.getNameWithoutPackage()
      getNameWithoutPackage(): string;
      getNameWithoutPackageP(): Promise<string>;
      // public <T> T org.codehaus.groovy.ast.ASTNode.getNodeMetaData(java.lang.Object)
      getNodeMetaData(arg0: object_t): object_t;
      getNodeMetaDataP(arg0: object_t): Promise<object_t>;
      // public java.util.Map<?, ?> org.codehaus.groovy.ast.ASTNode.getNodeMetaData()
      getNodeMetaData(): Map;
      getNodeMetaDataP(): Promise<Map>;
      // public java.util.List<org.codehaus.groovy.ast.stmt.Statement> org.codehaus.groovy.ast.ClassNode.getObjectInitializerStatements()
      getObjectInitializerStatements(): List;
      getObjectInitializerStatementsP(): Promise<List>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getOuterClass()
      getOuterClass(): ClassNode;
      getOuterClassP(): Promise<ClassNode>;
      // public org.codehaus.groovy.ast.FieldNode org.codehaus.groovy.ast.ClassNode.getOuterField(java.lang.String)
      getOuterField(arg0: string_t): object_t;
      getOuterFieldP(arg0: string_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.PackageNode org.codehaus.groovy.ast.ClassNode.getPackage()
      getPackage(): object_t;
      getPackageP(): Promise<object_t>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.getPackageName()
      getPackageName(): string;
      getPackageNameP(): Promise<string>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getPlainNodeReference()
      getPlainNodeReference(): ClassNode;
      getPlainNodeReferenceP(): Promise<ClassNode>;
      // public java.util.List<org.codehaus.groovy.ast.PropertyNode> org.codehaus.groovy.ast.ClassNode.getProperties()
      getProperties(): List;
      getPropertiesP(): Promise<List>;
      // public org.codehaus.groovy.ast.PropertyNode org.codehaus.groovy.ast.ClassNode.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getSetterMethod(java.lang.String,boolean)
      getSetterMethod(arg0: string_t, arg1: boolean_t): object_t;
      getSetterMethodP(arg0: string_t, arg1: boolean_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getSetterMethod(java.lang.String)
      getSetterMethod(arg0: string_t): object_t;
      getSetterMethodP(arg0: string_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getSuperClass()
      getSuperClass(): ClassNode;
      getSuperClassP(): Promise<ClassNode>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.getText()
      getText(): string;
      getTextP(): Promise<string>;
      // public java.util.Map<java.lang.Class<? extends org.codehaus.groovy.transform.ASTTransformation>, java.util.Set<org.codehaus.groovy.ast.ASTNode>> org.codehaus.groovy.ast.ClassNode.getTransforms(org.codehaus.groovy.control.CompilePhase)
      getTransforms(arg0: object_t): Map;
      getTransformsP(arg0: object_t): Promise<Map>;
      // public java.lang.Class org.codehaus.groovy.ast.ClassNode.getTypeClass()
      getTypeClass(): Class;
      getTypeClassP(): Promise<Class>;
      // public org.codehaus.groovy.ast.ClassNode[] org.codehaus.groovy.ast.ClassNode.getUnresolvedInterfaces(boolean)
      getUnresolvedInterfaces(arg0: boolean_t): ClassNode[];
      getUnresolvedInterfacesP(arg0: boolean_t): Promise<ClassNode[]>;
      // public org.codehaus.groovy.ast.ClassNode[] org.codehaus.groovy.ast.ClassNode.getUnresolvedInterfaces()
      getUnresolvedInterfaces(): ClassNode[];
      getUnresolvedInterfacesP(): Promise<ClassNode[]>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.getUnresolvedName()
      getUnresolvedName(): string;
      getUnresolvedNameP(): Promise<string>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getUnresolvedSuperClass(boolean)
      getUnresolvedSuperClass(arg0: boolean_t): ClassNode;
      getUnresolvedSuperClassP(arg0: boolean_t): Promise<ClassNode>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getUnresolvedSuperClass()
      getUnresolvedSuperClass(): ClassNode;
      getUnresolvedSuperClassP(): Promise<ClassNode>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasDeclaredMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])
      hasDeclaredMethod(arg0: string_t, arg1: object_array_t): boolean;
      hasDeclaredMethodP(arg0: string_t, arg1: object_array_t): Promise<boolean>;
      // public int org.codehaus.groovy.ast.ClassNode.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])
      hasMethod(arg0: string_t, arg1: object_array_t): boolean;
      hasMethodP(arg0: string_t, arg1: object_array_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.AnnotatedNode.hasNoRealSourcePosition()
      hasNoRealSourcePosition(): boolean;
      hasNoRealSourcePositionP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasPackageName()
      hasPackageName(): boolean;
      hasPackageNameP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasPossibleMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)
      hasPossibleMethod(arg0: string_t, arg1: object_t): boolean;
      hasPossibleMethodP(arg0: string_t, arg1: object_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasPossibleStaticMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)
      hasPossibleStaticMethod(arg0: string_t, arg1: object_t): boolean;
      hasPossibleStaticMethodP(arg0: string_t, arg1: object_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasProperty(java.lang.String)
      hasProperty(arg0: string_t): boolean;
      hasPropertyP(arg0: string_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.implementsInterface(org.codehaus.groovy.ast.ClassNode)
      implementsInterface(arg0: ClassNode): boolean;
      implementsInterfaceP(arg0: ClassNode): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isAnnotated()
      isAnnotated(): boolean;
      isAnnotatedP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isAnnotationDefinition()
      isAnnotationDefinition(): boolean;
      isAnnotationDefinitionP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isArray()
      isArray(): boolean;
      isArrayP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isDerivedFrom(org.codehaus.groovy.ast.ClassNode)
      isDerivedFrom(arg0: ClassNode): boolean;
      isDerivedFromP(arg0: ClassNode): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isDerivedFromGroovyObject()
      isDerivedFromGroovyObject(): boolean;
      isDerivedFromGroovyObjectP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isEnum()
      isEnum(): boolean;
      isEnumP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isGenericsPlaceHolder()
      isGenericsPlaceHolder(): boolean;
      isGenericsPlaceHolderP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isInterface()
      isInterface(): boolean;
      isInterfaceP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isPrimaryClassNode()
      isPrimaryClassNode(): boolean;
      isPrimaryClassNodeP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isRedirectNode()
      isRedirectNode(): boolean;
      isRedirectNodeP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isResolved()
      isResolved(): boolean;
      isResolvedP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isScript()
      isScript(): boolean;
      isScriptP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isScriptBody()
      isScriptBody(): boolean;
      isScriptBodyP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isStaticClass()
      isStaticClass(): boolean;
      isStaticClassP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.AnnotatedNode.isSynthetic()
      isSynthetic(): boolean;
      isSyntheticP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isSyntheticPublic()
      isSyntheticPublic(): boolean;
      isSyntheticPublicP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isUsingGenerics()
      isUsingGenerics(): boolean;
      isUsingGenericsP(): Promise<boolean>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.makeArray()
      makeArray(): ClassNode;
      makeArrayP(): Promise<ClassNode>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.positionStmtsAfterEnumInitStmts(java.util.List<org.codehaus.groovy.ast.stmt.Statement>)
      positionStmtsAfterEnumInitStmts(arg0: List): void;
      positionStmtsAfterEnumInitStmtsP(arg0: List): Promise<void>;
      // public java.lang.Object org.codehaus.groovy.ast.ASTNode.putNodeMetaData(java.lang.Object,java.lang.Object)
      putNodeMetaData(arg0: object_t, arg1: object_t): object_t;
      putNodeMetaDataP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.redirect()
      redirect(): ClassNode;
      redirectP(): Promise<ClassNode>;
      // public void org.codehaus.groovy.ast.ClassNode.removeConstructor(org.codehaus.groovy.ast.ConstructorNode)
      removeConstructor(arg0: object_t): void;
      removeConstructorP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.removeField(java.lang.String)
      removeField(arg0: string_t): void;
      removeFieldP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.removeMethod(org.codehaus.groovy.ast.MethodNode)
      removeMethod(arg0: object_t): void;
      removeMethodP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.removeNodeMetaData(java.lang.Object)
      removeNodeMetaData(arg0: object_t): void;
      removeNodeMetaDataP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.renameField(java.lang.String,java.lang.String)
      renameField(arg0: string_t, arg1: string_t): void;
      renameFieldP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setAnnotated(boolean)
      setAnnotated(arg0: boolean_t): void;
      setAnnotatedP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.setColumnNumber(int)
      setColumnNumber(arg0: integer_t): void;
      setColumnNumberP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.ast.AnnotatedNode.setDeclaringClass(org.codehaus.groovy.ast.ClassNode)
      setDeclaringClass(arg0: ClassNode): void;
      setDeclaringClassP(arg0: ClassNode): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setEnclosingMethod(org.codehaus.groovy.ast.MethodNode)
      setEnclosingMethod(arg0: object_t): void;
      setEnclosingMethodP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setGenericsPlaceHolder(boolean)
      setGenericsPlaceHolder(arg0: boolean_t): void;
      setGenericsPlaceHolderP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setGenericsTypes(org.codehaus.groovy.ast.GenericsType[])
      setGenericsTypes(arg0: object_array_t): void;
      setGenericsTypesP(arg0: object_array_t): Promise<void>;
      // public void org.codehaus.groovy.ast.AnnotatedNode.setHasNoRealSourcePosition(boolean)
      setHasNoRealSourcePosition(arg0: boolean_t): void;
      setHasNoRealSourcePositionP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setInterfaces(org.codehaus.groovy.ast.ClassNode[])
      setInterfaces(arg0: array_t<ClassNode>): void;
      setInterfacesP(arg0: array_t<ClassNode>): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.setLastColumnNumber(int)
      setLastColumnNumber(arg0: integer_t): void;
      setLastColumnNumberP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.setLastLineNumber(int)
      setLastLineNumber(arg0: integer_t): void;
      setLastLineNumberP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.setLineNumber(int)
      setLineNumber(arg0: integer_t): void;
      setLineNumberP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setModifiers(int)
      setModifiers(arg0: integer_t): void;
      setModifiersP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setModule(org.codehaus.groovy.ast.ModuleNode)
      setModule(arg0: object_t): void;
      setModuleP(arg0: object_t): Promise<void>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.setName(java.lang.String)
      setName(arg0: string_t): string;
      setNameP(arg0: string_t): Promise<string>;
      // public void org.codehaus.groovy.ast.ASTNode.setNodeMetaData(java.lang.Object,java.lang.Object)
      setNodeMetaData(arg0: object_t, arg1: object_t): void;
      setNodeMetaDataP(arg0: object_t, arg1: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setRedirect(org.codehaus.groovy.ast.ClassNode)
      setRedirect(arg0: ClassNode): void;
      setRedirectP(arg0: ClassNode): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setScript(boolean)
      setScript(arg0: boolean_t): void;
      setScriptP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setScriptBody(boolean)
      setScriptBody(arg0: boolean_t): void;
      setScriptBodyP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.setSourcePosition(org.codehaus.groovy.ast.ASTNode)
      setSourcePosition(arg0: object_t): void;
      setSourcePositionP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setStaticClass(boolean)
      setStaticClass(arg0: boolean_t): void;
      setStaticClassP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setSuperClass(org.codehaus.groovy.ast.ClassNode)
      setSuperClass(arg0: ClassNode): void;
      setSuperClassP(arg0: ClassNode): Promise<void>;
      // public void org.codehaus.groovy.ast.AnnotatedNode.setSynthetic(boolean)
      setSynthetic(arg0: boolean_t): void;
      setSyntheticP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setSyntheticPublic(boolean)
      setSyntheticPublic(arg0: boolean_t): void;
      setSyntheticPublicP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setUnresolvedSuperClass(org.codehaus.groovy.ast.ClassNode)
      setUnresolvedSuperClass(arg0: ClassNode): void;
      setUnresolvedSuperClassP(arg0: ClassNode): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setUsingGenerics(boolean)
      setUsingGenerics(arg0: boolean_t): void;
      setUsingGenericsP(arg0: boolean_t): Promise<void>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.toString(boolean)
      toString(arg0: boolean_t): string;
      toStringP(arg0: boolean_t): Promise<string>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.tryFindPossibleMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)
      tryFindPossibleMethod(arg0: string_t, arg1: object_t): object_t;
      tryFindPossibleMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ASTNode.visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
      visit(arg0: object_t): void;
      visitP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.visitContents(org.codehaus.groovy.ast.GroovyClassVisitor)
      visitContents(arg0: object_t): void;
      visitContentsP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ClassNode {
      export interface Static {
        new (arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: array_t<ClassNode>, arg4: object_array_t): org.codehaus.groovy.ast.ClassNode;
        new (arg0: string_t, arg1: integer_t, arg2: ClassNode): org.codehaus.groovy.ast.ClassNode;
        new (arg0: Class): org.codehaus.groovy.ast.ClassNode;
        EMPTY_ARRAY: ClassNode[];
        THIS: ClassNode;
        SUPER: ClassNode;
        ASM4: number;
        ASM5: number;
        V1_1: number;
        V1_2: number;
        V1_3: number;
        V1_4: number;
        V1_5: number;
        V1_6: number;
        V1_7: number;
        V1_8: number;
        ACC_PUBLIC: number;
        ACC_PRIVATE: number;
        ACC_PROTECTED: number;
        ACC_STATIC: number;
        ACC_FINAL: number;
        ACC_SUPER: number;
        ACC_SYNCHRONIZED: number;
        ACC_VOLATILE: number;
        ACC_BRIDGE: number;
        ACC_VARARGS: number;
        ACC_TRANSIENT: number;
        ACC_NATIVE: number;
        ACC_INTERFACE: number;
        ACC_ABSTRACT: number;
        ACC_STRICT: number;
        ACC_SYNTHETIC: number;
        ACC_ANNOTATION: number;
        ACC_ENUM: number;
        ACC_MANDATED: number;
        ACC_DEPRECATED: number;
        T_BOOLEAN: number;
        T_CHAR: number;
        T_FLOAT: number;
        T_DOUBLE: number;
        T_BYTE: number;
        T_SHORT: number;
        T_INT: number;
        T_LONG: number;
        H_GETFIELD: number;
        H_GETSTATIC: number;
        H_PUTFIELD: number;
        H_PUTSTATIC: number;
        H_INVOKEVIRTUAL: number;
        H_INVOKESTATIC: number;
        H_INVOKESPECIAL: number;
        H_NEWINVOKESPECIAL: number;
        H_INVOKEINTERFACE: number;
        F_NEW: number;
        F_FULL: number;
        F_APPEND: number;
        F_CHOP: number;
        F_SAME: number;
        F_SAME1: number;
        TOP: number;
        INTEGER: number;
        FLOAT: number;
        DOUBLE: number;
        LONG: number;
        NULL: number;
        UNINITIALIZED_THIS: number;
        NOP: number;
        ACONST_NULL: number;
        ICONST_M1: number;
        ICONST_0: number;
        ICONST_1: number;
        ICONST_2: number;
        ICONST_3: number;
        ICONST_4: number;
        ICONST_5: number;
        LCONST_0: number;
        LCONST_1: number;
        FCONST_0: number;
        FCONST_1: number;
        FCONST_2: number;
        DCONST_0: number;
        DCONST_1: number;
        BIPUSH: number;
        SIPUSH: number;
        LDC: number;
        ILOAD: number;
        LLOAD: number;
        FLOAD: number;
        DLOAD: number;
        ALOAD: number;
        IALOAD: number;
        LALOAD: number;
        FALOAD: number;
        DALOAD: number;
        AALOAD: number;
        BALOAD: number;
        CALOAD: number;
        SALOAD: number;
        ISTORE: number;
        LSTORE: number;
        FSTORE: number;
        DSTORE: number;
        ASTORE: number;
        IASTORE: number;
        LASTORE: number;
        FASTORE: number;
        DASTORE: number;
        AASTORE: number;
        BASTORE: number;
        CASTORE: number;
        SASTORE: number;
        POP: number;
        POP2: number;
        DUP: number;
        DUP_X1: number;
        DUP_X2: number;
        DUP2: number;
        DUP2_X1: number;
        DUP2_X2: number;
        SWAP: number;
        IADD: number;
        LADD: number;
        FADD: number;
        DADD: number;
        ISUB: number;
        LSUB: number;
        FSUB: number;
        DSUB: number;
        IMUL: number;
        LMUL: number;
        FMUL: number;
        DMUL: number;
        IDIV: number;
        LDIV: number;
        FDIV: number;
        DDIV: number;
        IREM: number;
        LREM: number;
        FREM: number;
        DREM: number;
        INEG: number;
        LNEG: number;
        FNEG: number;
        DNEG: number;
        ISHL: number;
        LSHL: number;
        ISHR: number;
        LSHR: number;
        IUSHR: number;
        LUSHR: number;
        IAND: number;
        LAND: number;
        IOR: number;
        LOR: number;
        IXOR: number;
        LXOR: number;
        IINC: number;
        I2L: number;
        I2F: number;
        I2D: number;
        L2I: number;
        L2F: number;
        L2D: number;
        F2I: number;
        F2L: number;
        F2D: number;
        D2I: number;
        D2L: number;
        D2F: number;
        I2B: number;
        I2C: number;
        I2S: number;
        LCMP: number;
        FCMPL: number;
        FCMPG: number;
        DCMPL: number;
        DCMPG: number;
        IFEQ: number;
        IFNE: number;
        IFLT: number;
        IFGE: number;
        IFGT: number;
        IFLE: number;
        IF_ICMPEQ: number;
        IF_ICMPNE: number;
        IF_ICMPLT: number;
        IF_ICMPGE: number;
        IF_ICMPGT: number;
        IF_ICMPLE: number;
        IF_ACMPEQ: number;
        IF_ACMPNE: number;
        GOTO: number;
        JSR: number;
        RET: number;
        TABLESWITCH: number;
        LOOKUPSWITCH: number;
        IRETURN: number;
        LRETURN: number;
        FRETURN: number;
        DRETURN: number;
        ARETURN: number;
        RETURN: number;
        GETSTATIC: number;
        PUTSTATIC: number;
        GETFIELD: number;
        PUTFIELD: number;
        INVOKEVIRTUAL: number;
        INVOKESPECIAL: number;
        INVOKESTATIC: number;
        INVOKEINTERFACE: number;
        INVOKEDYNAMIC: number;
        NEW: number;
        NEWARRAY: number;
        ANEWARRAY: number;
        ARRAYLENGTH: number;
        ATHROW: number;
        CHECKCAST: number;
        INSTANCEOF: number;
        MONITORENTER: number;
        MONITOREXIT: number;
        MULTIANEWARRAY: number;
        IFNULL: number;
        IFNONNULL: number;
      }
    }
  }

  export module java.util.function_ {
    export interface Function extends Java.java.lang.Object {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
    }
    export module Function {
      export interface Static {
        // public static <T> java.util.function.Function<T, T> java.util.function.Function.identity()
        identity(): Function;
        identityP(): Promise<Function>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.computer {
    export interface GraphComputer extends Java.java.lang.Object {
      // public default com.tinkerpop.gremlin.process.computer.GraphComputer$Features com.tinkerpop.gremlin.process.computer.GraphComputer.features()
      features(): object_t;
      featuresP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.computer.GraphComputer com.tinkerpop.gremlin.process.computer.GraphComputer.isolation(com.tinkerpop.gremlin.process.computer.GraphComputer$Isolation)
      isolation(arg0: object_t): GraphComputer;
      isolationP(arg0: object_t): Promise<GraphComputer>;
      // public abstract com.tinkerpop.gremlin.process.computer.GraphComputer com.tinkerpop.gremlin.process.computer.GraphComputer.mapReduce(com.tinkerpop.gremlin.process.computer.MapReduce)
      mapReduce(arg0: MapReduce): GraphComputer;
      mapReduceP(arg0: MapReduce): Promise<GraphComputer>;
      // public abstract com.tinkerpop.gremlin.process.computer.GraphComputer com.tinkerpop.gremlin.process.computer.GraphComputer.program(com.tinkerpop.gremlin.process.computer.VertexProgram)
      program(arg0: VertexProgram): GraphComputer;
      programP(arg0: VertexProgram): Promise<GraphComputer>;
      // public abstract java.util.concurrent.Future<com.tinkerpop.gremlin.process.computer.ComputerResult> com.tinkerpop.gremlin.process.computer.GraphComputer.submit()
      submit(): object_t;
      submitP(): Promise<object_t>;
    }
    export module GraphComputer {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface HashMap extends Java.java.util.AbstractMap,Java.java.util.Map {
      // public void java.util.HashMap.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.HashMap.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public V java.util.HashMap.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      compute(arg0: object_t, arg1: BiFunction): object_t;
      computeP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public V java.util.HashMap.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsent(arg0: object_t, arg1: Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Function): Promise<object_t>;
      // public V java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresent(arg0: object_t, arg1: BiFunction): object_t;
      computeIfPresentP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public boolean java.util.HashMap.containsKey(java.lang.Object)
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.HashMap.containsValue(java.lang.Object)
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.HashMap.entrySet()
      entrySet(): Set;
      entrySetP(): Promise<Set>;
      // public boolean java.util.AbstractMap.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void java.util.HashMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public V java.util.HashMap.get(java.lang.Object)
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public V java.util.HashMap.getOrDefault(java.lang.Object,V)
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public int java.util.AbstractMap.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.HashMap.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public java.util.Set<K> java.util.HashMap.keySet()
      keySet(): Set;
      keySetP(): Promise<Set>;
      // public V java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      merge(arg0: object_t, arg1: object_t, arg2: BiFunction): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: BiFunction): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public V java.util.HashMap.put(K,V)
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public void java.util.HashMap.putAll(java.util.Map<? extends K, ? extends V>)
      putAll(arg0: Map): void;
      putAllP(arg0: Map): Promise<void>;
      // public V java.util.HashMap.putIfAbsent(K,V)
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public boolean java.util.HashMap.remove(java.lang.Object,java.lang.Object)
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public V java.util.HashMap.remove(java.lang.Object)
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public boolean java.util.HashMap.replace(K,V,V)
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public V java.util.HashMap.replace(K,V)
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public void java.util.HashMap.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAll(arg0: BiFunction): void;
      replaceAllP(arg0: BiFunction): Promise<void>;
      // public int java.util.HashMap.size()
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.util.AbstractMap.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public java.util.Collection<V> java.util.HashMap.values()
      values(): Collection;
      valuesP(): Promise<Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module HashMap {
      export interface Static {
        new (arg0: integer_t, arg1: float_t): java.util.HashMap;
        new (arg0: Map): java.util.HashMap;
        new (arg0: integer_t): java.util.HashMap;
        new (): java.util.HashMap;
      }
    }
  }

  export module groovy.lang {
    export interface GroovyResourceLoader extends Java.java.lang.Object {
      // public abstract java.net.URL groovy.lang.GroovyResourceLoader.loadGroovySource(java.lang.String) throws java.net.MalformedURLException
      loadGroovySource(arg0: string_t): object_t;
      loadGroovySourceP(arg0: string_t): Promise<object_t>;
    }
    export module GroovyResourceLoader {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface Long extends Java.java.lang.Number {
      // public byte java.lang.Long.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Long.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Long.compareTo(java.lang.Long)
      compareTo(arg0: long_t): number;
      compareToP(arg0: long_t): Promise<number>;
      // public double java.lang.Long.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Long.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public float java.lang.Long.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int java.lang.Long.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.Long.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public long java.lang.Long.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Long.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Long.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Long {
      export interface Static {
        new (arg0: string_t): java.lang.Long;
        new (arg0: long_t): java.lang.Long;
        // public static int java.lang.Long.bitCount(long)
        bitCount(arg0: long_t): number;
        bitCountP(arg0: long_t): Promise<number>;
        // public static int java.lang.Long.compare(long,long)
        compare(arg0: long_t, arg1: long_t): number;
        compareP(arg0: long_t, arg1: long_t): Promise<number>;
        // public static int java.lang.Long.compareUnsigned(long,long)
        compareUnsigned(arg0: long_t, arg1: long_t): number;
        compareUnsignedP(arg0: long_t, arg1: long_t): Promise<number>;
        // public static java.lang.Long java.lang.Long.decode(java.lang.String) throws java.lang.NumberFormatException
        decode(arg0: string_t): longValue_t;
        decodeP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.divideUnsigned(long,long)
        divideUnsigned(arg0: long_t, arg1: long_t): longValue_t;
        divideUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String,java.lang.Long)
        getLong(arg0: string_t, arg1: long_t): longValue_t;
        getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String,long)
        getLong(arg0: string_t, arg1: long_t): longValue_t;
        getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String)
        getLong(arg0: string_t): longValue_t;
        getLongP(arg0: string_t): Promise<longValue_t>;
        // public static int java.lang.Long.hashCode(long)
        hashCode(arg0: long_t): number;
        hashCodeP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.highestOneBit(long)
        highestOneBit(arg0: long_t): longValue_t;
        highestOneBitP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.lowestOneBit(long)
        lowestOneBit(arg0: long_t): longValue_t;
        lowestOneBitP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.max(long,long)
        max(arg0: long_t, arg1: long_t): longValue_t;
        maxP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.min(long,long)
        min(arg0: long_t, arg1: long_t): longValue_t;
        minP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static int java.lang.Long.numberOfLeadingZeros(long)
        numberOfLeadingZeros(arg0: long_t): number;
        numberOfLeadingZerosP(arg0: long_t): Promise<number>;
        // public static int java.lang.Long.numberOfTrailingZeros(long)
        numberOfTrailingZeros(arg0: long_t): number;
        numberOfTrailingZerosP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.parseLong(java.lang.String,int) throws java.lang.NumberFormatException
        parseLong(arg0: string_t, arg1: integer_t): longValue_t;
        parseLongP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseLong(java.lang.String) throws java.lang.NumberFormatException
        parseLong(arg0: string_t): longValue_t;
        parseLongP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseUnsignedLong(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedLong(arg0: string_t, arg1: integer_t): longValue_t;
        parseUnsignedLongP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseUnsignedLong(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedLong(arg0: string_t): longValue_t;
        parseUnsignedLongP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.remainderUnsigned(long,long)
        remainderUnsigned(arg0: long_t, arg1: long_t): longValue_t;
        remainderUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.reverse(long)
        reverse(arg0: long_t): longValue_t;
        reverseP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.reverseBytes(long)
        reverseBytes(arg0: long_t): longValue_t;
        reverseBytesP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.rotateLeft(long,int)
        rotateLeft(arg0: long_t, arg1: integer_t): longValue_t;
        rotateLeftP(arg0: long_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.rotateRight(long,int)
        rotateRight(arg0: long_t, arg1: integer_t): longValue_t;
        rotateRightP(arg0: long_t, arg1: integer_t): Promise<longValue_t>;
        // public static int java.lang.Long.signum(long)
        signum(arg0: long_t): number;
        signumP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.sum(long,long)
        sum(arg0: long_t, arg1: long_t): longValue_t;
        sumP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.String java.lang.Long.toBinaryString(long)
        toBinaryString(arg0: long_t): string;
        toBinaryStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toHexString(long)
        toHexString(arg0: long_t): string;
        toHexStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toOctalString(long)
        toOctalString(arg0: long_t): string;
        toOctalStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toString(long,int)
        toString(arg0: long_t, arg1: integer_t): string;
        toStringP(arg0: long_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toString(long)
        toString(arg0: long_t): string;
        toStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toUnsignedString(long,int)
        toUnsignedString(arg0: long_t, arg1: integer_t): string;
        toUnsignedStringP(arg0: long_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toUnsignedString(long)
        toUnsignedString(arg0: long_t): string;
        toUnsignedStringP(arg0: long_t): Promise<string>;
        // public static java.lang.Long java.lang.Long.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOf(arg0: string_t, arg1: integer_t): longValue_t;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): longValue_t;
        valueOfP(arg0: string_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.valueOf(long)
        valueOf(arg0: long_t): longValue_t;
        valueOfP(arg0: long_t): Promise<longValue_t>;
        MIN_VALUE: longValue_t;
        MAX_VALUE: longValue_t;
        TYPE: Class;
        SIZE: number;
        BYTES: number;
      }
    }
  }

  export module groovy.lang {
    export interface DelegatingMetaClass extends Java.java.lang.Object,Java.groovy.lang.MetaClass {
      // public void groovy.lang.DelegatingMetaClass.addMetaBeanProperty(groovy.lang.MetaBeanProperty)
      addMetaBeanProperty(arg0: MetaBeanProperty): void;
      addMetaBeanPropertyP(arg0: MetaBeanProperty): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.addMetaMethod(groovy.lang.MetaMethod)
      addMetaMethod(arg0: MetaMethod): void;
      addMetaMethodP(arg0: MetaMethod): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.addNewInstanceMethod(java.lang.reflect.Method)
      addNewInstanceMethod(arg0: object_t): void;
      addNewInstanceMethodP(arg0: object_t): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.addNewStaticMethod(java.lang.reflect.Method)
      addNewStaticMethod(arg0: object_t): void;
      addNewStaticMethodP(arg0: object_t): Promise<void>;
      // public boolean groovy.lang.DelegatingMetaClass.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public groovy.lang.MetaClass groovy.lang.DelegatingMetaClass.getAdaptee()
      getAdaptee(): MetaClass;
      getAdapteeP(): Promise<MetaClass>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.getAttribute(java.lang.Class,java.lang.Object,java.lang.String,boolean)
      getAttribute(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t): object_t;
      getAttributeP(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.getAttribute(java.lang.Object,java.lang.String)
      getAttribute(arg0: object_t, arg1: string_t): object_t;
      getAttributeP(arg0: object_t, arg1: string_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public org.codehaus.groovy.ast.ClassNode groovy.lang.DelegatingMetaClass.getClassNode()
      getClassNode(): ClassNode;
      getClassNodeP(): Promise<ClassNode>;
      // public groovy.lang.MetaClass groovy.lang.DelegatingMetaClass.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public groovy.lang.MetaMethod groovy.lang.DelegatingMetaClass.getMetaMethod(java.lang.String,java.lang.Object[])
      getMetaMethod(arg0: string_t, arg1: object_array_t): MetaMethod;
      getMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<MetaMethod>;
      // public java.util.List<groovy.lang.MetaMethod> groovy.lang.DelegatingMetaClass.getMetaMethods()
      getMetaMethods(): List;
      getMetaMethodsP(): Promise<List>;
      // public groovy.lang.MetaProperty groovy.lang.DelegatingMetaClass.getMetaProperty(java.lang.String)
      getMetaProperty(arg0: string_t): MetaProperty;
      getMetaPropertyP(arg0: string_t): Promise<MetaProperty>;
      // public java.util.List<groovy.lang.MetaMethod> groovy.lang.DelegatingMetaClass.getMethods()
      getMethods(): List;
      getMethodsP(): Promise<List>;
      // public java.util.List<groovy.lang.MetaProperty> groovy.lang.DelegatingMetaClass.getProperties()
      getProperties(): List;
      getPropertiesP(): Promise<List>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.getProperty(java.lang.Class,java.lang.Object,java.lang.String,boolean,boolean)
      getProperty(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): object_t;
      getPropertyP(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.getProperty(java.lang.Object,java.lang.String)
      getProperty(arg0: object_t, arg1: string_t): object_t;
      getPropertyP(arg0: object_t, arg1: string_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public groovy.lang.MetaMethod groovy.lang.DelegatingMetaClass.getStaticMetaMethod(java.lang.String,java.lang.Object[])
      getStaticMetaMethod(arg0: string_t, arg1: object_array_t): MetaMethod;
      getStaticMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<MetaMethod>;
      // public groovy.lang.MetaMethod groovy.lang.DelegatingMetaClass.getStaticMetaMethod(java.lang.String,java.lang.Class[])
      getStaticMetaMethod(arg0: string_t, arg1: array_t<Class>): MetaMethod;
      getStaticMetaMethodP(arg0: string_t, arg1: array_t<Class>): Promise<MetaMethod>;
      // public java.lang.Class groovy.lang.DelegatingMetaClass.getTheClass()
      getTheClass(): Class;
      getTheClassP(): Promise<Class>;
      // public int groovy.lang.DelegatingMetaClass.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public groovy.lang.MetaProperty groovy.lang.DelegatingMetaClass.hasProperty(java.lang.Object,java.lang.String)
      hasProperty(arg0: object_t, arg1: string_t): MetaProperty;
      hasPropertyP(arg0: object_t, arg1: string_t): Promise<MetaProperty>;
      // public void groovy.lang.DelegatingMetaClass.initialize()
      initialize(): void;
      initializeP(): Promise<void>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.invokeConstructor(java.lang.Object[])
      invokeConstructor(arg0: object_array_t): object_t;
      invokeConstructorP(arg0: object_array_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.invokeMethod(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean,boolean)
      invokeMethod(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): object_t;
      invokeMethodP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)
      invokeMethod(arg0: object_t, arg1: string_t, arg2: object_t): object_t;
      invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.invokeMissingMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeMissingMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeMissingMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.invokeMissingProperty(java.lang.Object,java.lang.String,java.lang.Object,boolean)
      invokeMissingProperty(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): object_t;
      invokeMissingPropertyP(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.invokeStaticMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeStaticMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeStaticMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public boolean groovy.lang.DelegatingMetaClass.isGroovyObject()
      isGroovyObject(): boolean;
      isGroovyObjectP(): Promise<boolean>;
      // public boolean groovy.lang.DelegatingMetaClass.isModified()
      isModified(): boolean;
      isModifiedP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public groovy.lang.MetaMethod groovy.lang.DelegatingMetaClass.pickMethod(java.lang.String,java.lang.Class[])
      pickMethod(arg0: string_t, arg1: array_t<Class>): MetaMethod;
      pickMethodP(arg0: string_t, arg1: array_t<Class>): Promise<MetaMethod>;
      // public java.util.List<groovy.lang.MetaMethod> groovy.lang.DelegatingMetaClass.respondsTo(java.lang.Object,java.lang.String,java.lang.Object[])
      respondsTo(arg0: object_t, arg1: string_t, arg2: object_array_t): List;
      respondsToP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<List>;
      // public java.util.List<groovy.lang.MetaMethod> groovy.lang.DelegatingMetaClass.respondsTo(java.lang.Object,java.lang.String)
      respondsTo(arg0: object_t, arg1: string_t): List;
      respondsToP(arg0: object_t, arg1: string_t): Promise<List>;
      // public int groovy.lang.DelegatingMetaClass.selectConstructorAndTransformArguments(int,java.lang.Object[])
      selectConstructorAndTransformArguments(arg0: integer_t, arg1: object_array_t): number;
      selectConstructorAndTransformArgumentsP(arg0: integer_t, arg1: object_array_t): Promise<number>;
      // public void groovy.lang.DelegatingMetaClass.setAdaptee(groovy.lang.MetaClass)
      setAdaptee(arg0: MetaClass): void;
      setAdapteeP(arg0: MetaClass): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.setAttribute(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object,boolean,boolean)
      setAttribute(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
      setAttributeP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.setAttribute(java.lang.Object,java.lang.String,java.lang.Object)
      setAttribute(arg0: object_t, arg1: string_t, arg2: object_t): void;
      setAttributeP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.setProperty(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object,boolean,boolean)
      setProperty(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
      setPropertyP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.setProperty(java.lang.Object,java.lang.String,java.lang.Object)
      setProperty(arg0: object_t, arg1: string_t, arg2: object_t): void;
      setPropertyP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String groovy.lang.DelegatingMetaClass.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DelegatingMetaClass {
      export interface Static {
        new (arg0: MetaClass): groovy.lang.DelegatingMetaClass;
        new (arg0: Class): groovy.lang.DelegatingMetaClass;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Compare extends Java.java.lang.Enum,Java.java.util.function_.BiPredicate {
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public final boolean java.lang.Enum.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public final int java.lang.Enum.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract com.tinkerpop.gremlin.structure.Compare com.tinkerpop.gremlin.structure.Compare.opposite()
      opposite(): Compare;
      oppositeP(): Promise<Compare>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public abstract boolean com.tinkerpop.gremlin.structure.Compare.test(java.lang.Object,java.lang.Object)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Enum.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Compare {
      export interface Static {
        // public static final boolean com.tinkerpop.gremlin.structure.Compare.hasCompare(java.lang.String)
        hasCompare(arg0: string_t): boolean;
        hasCompareP(arg0: string_t): Promise<boolean>;
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.structure.Compare com.tinkerpop.gremlin.structure.Compare.valueOf(java.lang.String)
        valueOf(arg0: string_t): Compare;
        valueOfP(arg0: string_t): Promise<Compare>;
        // public static com.tinkerpop.gremlin.structure.Compare[] com.tinkerpop.gremlin.structure.Compare.values()
        values(): Compare[];
        valuesP(): Promise<Compare[]>;
        eq: Compare;
        neq: Compare;
        gt: Compare;
        gte: Compare;
        lt: Compare;
        lte: Compare;
        inside: Compare;
        outside: Compare;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Edge extends Java.com.tinkerpop.gremlin.structure.Element {
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.and(com.tinkerpop.gremlin.process.Traversal<?, ?>...)
      and(...arg0: Traversal[]): GraphTraversal;
      and(arg0: array_t<Traversal>): GraphTraversal;
      andP(...arg0: Traversal[]): Promise<GraphTraversal>;
      andP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.barrier()
      barrier(): GraphTraversal;
      barrierP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.branch(com.tinkerpop.gremlin.process.Traversal<?, M>)
      branch(arg0: Traversal): GraphTraversal;
      branchP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, M>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.cap(java.lang.String...)
      cap(...arg0: string_t[]): GraphTraversal;
      cap(arg0: array_t<string_t>): GraphTraversal;
      capP(...arg0: string_t[]): Promise<GraphTraversal>;
      capP(arg0: array_t<string_t>): GraphTraversal;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(com.tinkerpop.gremlin.process.Traversal<?, M>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: Traversal, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Traversal, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: Predicate, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Predicate, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(com.tinkerpop.gremlin.process.Traversal<?, M>)
      choose(arg0: Traversal): GraphTraversal;
      chooseP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(java.util.function.Function<A, M>)
      choose(arg0: Function): GraphTraversal;
      chooseP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.coalesce(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      coalesce(...arg0: Traversal[]): GraphTraversal;
      coalesce(arg0: array_t<Traversal>): GraphTraversal;
      coalesceP(...arg0: Traversal[]): Promise<GraphTraversal>;
      coalesceP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: Predicate): GraphTraversal;
      emitP(arg0: Predicate): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: Predicate): GraphTraversal;
      filterP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      has(arg0: Traversal): GraphTraversal;
      hasP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasId(java.lang.Object...)
      hasId(...arg0: object_t[]): GraphTraversal;
      hasId(arg0: object_array_t): GraphTraversal;
      hasIdP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasIdP(arg0: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasKey(java.lang.String...)
      hasKey(...arg0: string_t[]): GraphTraversal;
      hasKey(arg0: array_t<string_t>): GraphTraversal;
      hasKeyP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasKeyP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasLabel(java.lang.String...)
      hasLabel(...arg0: string_t[]): GraphTraversal;
      hasLabel(arg0: array_t<string_t>): GraphTraversal;
      hasLabelP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasLabelP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasValue(java.lang.Object...)
      hasValue(...arg0: object_t[]): GraphTraversal;
      hasValue(arg0: object_array_t): GraphTraversal;
      hasValueP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasValueP(arg0: object_array_t): GraphTraversal;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.is(java.util.function.BiPredicate,java.lang.Object)
      is(arg0: BiPredicate, arg1: object_t): GraphTraversal;
      isP(arg0: BiPredicate, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.is(java.lang.Object)
      is(arg0: object_t): GraphTraversal;
      isP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.iterate()
      iterate(): GraphTraversal;
      iterateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.Edge.iterators()
      iterators(): object_t;
      iteratorsP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.structure.Edge$Iterators com.tinkerpop.gremlin.structure.Edge.iterators()
      iterators(): object_t;
      iteratorsP(): Promise<object_t>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.max()
      max(): GraphTraversal;
      maxP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.mean()
      mean(): GraphTraversal;
      meanP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.min()
      min(): GraphTraversal;
      minP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.or(com.tinkerpop.gremlin.process.Traversal<?, ?>...)
      or(...arg0: Traversal[]): GraphTraversal;
      or(arg0: array_t<Traversal>): GraphTraversal;
      orP(...arg0: Traversal[]): Promise<GraphTraversal>;
      orP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.order(com.tinkerpop.gremlin.process.Scope)
      order(arg0: Scope): GraphTraversal;
      orderP(arg0: Scope): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.traversal.EdgeTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): GraphTraversal;
      // public abstract <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, com.tinkerpop.gremlin.structure.Property<E2>>> com.tinkerpop.gremlin.process.graph.traversal.EdgeTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public abstract void com.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.EdgeTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.subgraph(java.lang.String)
      subgraph(arg0: string_t): GraphTraversal;
      subgraphP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.subgraph()
      subgraph(): GraphTraversal;
      subgraphP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: GraphComputer): GraphTraversal;
      submitP(arg0: GraphComputer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: Predicate): GraphTraversal;
      untilP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, E2> com.tinkerpop.gremlin.process.graph.traversal.EdgeTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.EdgeTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.EdgeTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: Supplier, arg1: UnaryOperator): GraphTraversal;
      withSackP(arg0: Supplier, arg1: UnaryOperator): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: Supplier): GraphTraversal;
      withSackP(arg0: Supplier): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: Supplier): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: Supplier): Promise<GraphTraversal>;
    }
    export module Edge {
      export interface Static {
        DEFAULT_LABEL: string;
      }
    }
  }

  export module javax.script {
    export interface ScriptEngineFactory extends Java.java.lang.Object {
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getEngineName()
      getEngineName(): string;
      getEngineNameP(): Promise<string>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getEngineVersion()
      getEngineVersion(): string;
      getEngineVersionP(): Promise<string>;
      // public abstract java.util.List<java.lang.String> javax.script.ScriptEngineFactory.getExtensions()
      getExtensions(): List;
      getExtensionsP(): Promise<List>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getLanguageName()
      getLanguageName(): string;
      getLanguageNameP(): Promise<string>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getLanguageVersion()
      getLanguageVersion(): string;
      getLanguageVersionP(): Promise<string>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getMethodCallSyntax(java.lang.String,java.lang.String,java.lang.String...)
      getMethodCallSyntax(arg0: string_t, arg1: string_t, ...arg2: string_t[]): string;
      getMethodCallSyntax(arg0: string_t, arg1: string_t, arg2: array_t<string_t>): string;
      getMethodCallSyntaxP(arg0: string_t, arg1: string_t, ...arg2: string_t[]): Promise<string>;
      getMethodCallSyntaxP(arg0: string_t, arg1: string_t, arg2: array_t<string_t>): string;
      // public abstract java.util.List<java.lang.String> javax.script.ScriptEngineFactory.getMimeTypes()
      getMimeTypes(): List;
      getMimeTypesP(): Promise<List>;
      // public abstract java.util.List<java.lang.String> javax.script.ScriptEngineFactory.getNames()
      getNames(): List;
      getNamesP(): Promise<List>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getOutputStatement(java.lang.String)
      getOutputStatement(arg0: string_t): string;
      getOutputStatementP(arg0: string_t): Promise<string>;
      // public abstract java.lang.Object javax.script.ScriptEngineFactory.getParameter(java.lang.String)
      getParameter(arg0: string_t): object_t;
      getParameterP(arg0: string_t): Promise<object_t>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getProgram(java.lang.String...)
      getProgram(...arg0: string_t[]): string;
      getProgram(arg0: array_t<string_t>): string;
      getProgramP(...arg0: string_t[]): Promise<string>;
      getProgramP(arg0: array_t<string_t>): string;
      // public abstract javax.script.ScriptEngine javax.script.ScriptEngineFactory.getScriptEngine()
      getScriptEngine(): ScriptEngine;
      getScriptEngineP(): Promise<ScriptEngine>;
    }
    export module ScriptEngineFactory {
      export interface Static {
      }
    }
  }

  export module java.io {
    export interface FileInputStream extends Java.java.lang.Object {
      // public native int java.io.FileInputStream.available() throws java.io.IOException
      available(): number;
      availableP(): Promise<number>;
      // public void java.io.FileInputStream.close() throws java.io.IOException
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.nio.channels.FileChannel java.io.FileInputStream.getChannel()
      getChannel(): object_t;
      getChannelP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.io.FileDescriptor java.io.FileInputStream.getFD() throws java.io.IOException
      getFD(): object_t;
      getFDP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized void java.io.InputStream.mark(int)
      mark(arg0: integer_t): void;
      markP(arg0: integer_t): Promise<void>;
      // public boolean java.io.InputStream.markSupported()
      markSupported(): boolean;
      markSupportedP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.io.FileInputStream.read(byte[],int,int) throws java.io.IOException
      read(arg0: object_array_t, arg1: integer_t, arg2: integer_t): number;
      readP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<number>;
      // public int java.io.FileInputStream.read(byte[]) throws java.io.IOException
      read(arg0: object_array_t): number;
      readP(arg0: object_array_t): Promise<number>;
      // public int java.io.FileInputStream.read() throws java.io.IOException
      read(): number;
      readP(): Promise<number>;
      // public synchronized void java.io.InputStream.reset() throws java.io.IOException
      reset(): void;
      resetP(): Promise<void>;
      // public native long java.io.FileInputStream.skip(long) throws java.io.IOException
      skip(arg0: long_t): longValue_t;
      skipP(arg0: long_t): Promise<longValue_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module FileInputStream {
      export interface Static {
        new (arg0: object_t): java.io.FileInputStream;
        new (arg0: string_t): java.io.FileInputStream;
        new (arg0: object_t): java.io.FileInputStream;
      }
    }
  }

  export module groovy.lang {
    export interface MetaClass extends Java.java.lang.Object {
      // public abstract java.lang.Object groovy.lang.MetaClass.getAttribute(java.lang.Class,java.lang.Object,java.lang.String,boolean)
      getAttribute(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t): object_t;
      getAttributeP(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.getAttribute(java.lang.Object,java.lang.String)
      getAttribute(arg0: object_t, arg1: string_t): object_t;
      getAttributeP(arg0: object_t, arg1: string_t): Promise<object_t>;
      // public abstract org.codehaus.groovy.ast.ClassNode groovy.lang.MetaClass.getClassNode()
      getClassNode(): ClassNode;
      getClassNodeP(): Promise<ClassNode>;
      // public abstract groovy.lang.MetaMethod groovy.lang.MetaObjectProtocol.getMetaMethod(java.lang.String,java.lang.Object[])
      getMetaMethod(arg0: string_t, arg1: object_array_t): MetaMethod;
      getMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<MetaMethod>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaClass.getMetaMethods()
      getMetaMethods(): List;
      getMetaMethodsP(): Promise<List>;
      // public abstract groovy.lang.MetaProperty groovy.lang.MetaObjectProtocol.getMetaProperty(java.lang.String)
      getMetaProperty(arg0: string_t): MetaProperty;
      getMetaPropertyP(arg0: string_t): Promise<MetaProperty>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaClass.getMethods()
      getMethods(): List;
      getMethodsP(): Promise<List>;
      // public abstract java.util.List<groovy.lang.MetaProperty> groovy.lang.MetaClass.getProperties()
      getProperties(): List;
      getPropertiesP(): Promise<List>;
      // public abstract java.lang.Object groovy.lang.MetaClass.getProperty(java.lang.Class,java.lang.Object,java.lang.String,boolean,boolean)
      getProperty(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): object_t;
      getPropertyP(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.getProperty(java.lang.Object,java.lang.String)
      getProperty(arg0: object_t, arg1: string_t): object_t;
      getPropertyP(arg0: object_t, arg1: string_t): Promise<object_t>;
      // public abstract groovy.lang.MetaMethod groovy.lang.MetaObjectProtocol.getStaticMetaMethod(java.lang.String,java.lang.Object[])
      getStaticMetaMethod(arg0: string_t, arg1: object_array_t): MetaMethod;
      getStaticMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<MetaMethod>;
      // public abstract java.lang.Class groovy.lang.MetaObjectProtocol.getTheClass()
      getTheClass(): Class;
      getTheClassP(): Promise<Class>;
      // public abstract groovy.lang.MetaProperty groovy.lang.MetaObjectProtocol.hasProperty(java.lang.Object,java.lang.String)
      hasProperty(arg0: object_t, arg1: string_t): MetaProperty;
      hasPropertyP(arg0: object_t, arg1: string_t): Promise<MetaProperty>;
      // public abstract void groovy.lang.MetaClass.initialize()
      initialize(): void;
      initializeP(): Promise<void>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeConstructor(java.lang.Object[])
      invokeConstructor(arg0: object_array_t): object_t;
      invokeConstructorP(arg0: object_array_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaClass.invokeMethod(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean,boolean)
      invokeMethod(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): object_t;
      invokeMethodP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)
      invokeMethod(arg0: object_t, arg1: string_t, arg2: object_t): object_t;
      invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaClass.invokeMissingMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeMissingMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeMissingMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaClass.invokeMissingProperty(java.lang.Object,java.lang.String,java.lang.Object,boolean)
      invokeMissingProperty(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): object_t;
      invokeMissingPropertyP(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeStaticMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeStaticMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeStaticMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public abstract groovy.lang.MetaMethod groovy.lang.MetaClass.pickMethod(java.lang.String,java.lang.Class[])
      pickMethod(arg0: string_t, arg1: array_t<Class>): MetaMethod;
      pickMethodP(arg0: string_t, arg1: array_t<Class>): Promise<MetaMethod>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaObjectProtocol.respondsTo(java.lang.Object,java.lang.String,java.lang.Object[])
      respondsTo(arg0: object_t, arg1: string_t, arg2: object_array_t): List;
      respondsToP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<List>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaObjectProtocol.respondsTo(java.lang.Object,java.lang.String)
      respondsTo(arg0: object_t, arg1: string_t): List;
      respondsToP(arg0: object_t, arg1: string_t): Promise<List>;
      // public abstract int groovy.lang.MetaClass.selectConstructorAndTransformArguments(int,java.lang.Object[])
      selectConstructorAndTransformArguments(arg0: integer_t, arg1: object_array_t): number;
      selectConstructorAndTransformArgumentsP(arg0: integer_t, arg1: object_array_t): Promise<number>;
      // public abstract void groovy.lang.MetaClass.setAttribute(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object,boolean,boolean)
      setAttribute(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
      setAttributeP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
      // public abstract void groovy.lang.MetaObjectProtocol.setAttribute(java.lang.Object,java.lang.String,java.lang.Object)
      setAttribute(arg0: object_t, arg1: string_t, arg2: object_t): void;
      setAttributeP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
      // public abstract void groovy.lang.MetaClass.setProperty(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object,boolean,boolean)
      setProperty(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
      setPropertyP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
      // public abstract void groovy.lang.MetaObjectProtocol.setProperty(java.lang.Object,java.lang.String,java.lang.Object)
      setProperty(arg0: object_t, arg1: string_t, arg2: object_t): void;
      setPropertyP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
    }
    export module MetaClass {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface Object  {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Object {
      export interface Static {
        new (): java.lang.Object;
      }
    }
  }

  export module java.util.function_ {
    export interface BiConsumer extends Java.java.lang.Object {
      // public abstract void java.util.function.BiConsumer.accept(T,U)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public default java.util.function.BiConsumer<T, U> java.util.function.BiConsumer.andThen(java.util.function.BiConsumer<? super T, ? super U>)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
    }
    export module BiConsumer {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface Boolean extends Java.java.lang.Object {
      // public boolean java.lang.Boolean.booleanValue()
      booleanValue(): boolean;
      booleanValueP(): Promise<boolean>;
      // public int java.lang.Boolean.compareTo(java.lang.Boolean)
      compareTo(arg0: boolean_t): number;
      compareToP(arg0: boolean_t): Promise<number>;
      // public int java.lang.Boolean.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public boolean java.lang.Boolean.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int java.lang.Boolean.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Boolean.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Boolean {
      export interface Static {
        new (arg0: string_t): java.lang.Boolean;
        new (arg0: boolean_t): java.lang.Boolean;
        // public static int java.lang.Boolean.compare(boolean,boolean)
        compare(arg0: boolean_t, arg1: boolean_t): number;
        compareP(arg0: boolean_t, arg1: boolean_t): Promise<number>;
        // public static boolean java.lang.Boolean.getBoolean(java.lang.String)
        getBoolean(arg0: string_t): boolean;
        getBooleanP(arg0: string_t): Promise<boolean>;
        // public static int java.lang.Boolean.hashCode(boolean)
        hashCode(arg0: boolean_t): number;
        hashCodeP(arg0: boolean_t): Promise<number>;
        // public static boolean java.lang.Boolean.logicalAnd(boolean,boolean)
        logicalAnd(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalAndP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.logicalOr(boolean,boolean)
        logicalOr(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalOrP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.logicalXor(boolean,boolean)
        logicalXor(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalXorP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.parseBoolean(java.lang.String)
        parseBoolean(arg0: string_t): boolean;
        parseBooleanP(arg0: string_t): Promise<boolean>;
        // public static java.lang.String java.lang.Boolean.toString(boolean)
        toString(arg0: boolean_t): string;
        toStringP(arg0: boolean_t): Promise<string>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)
        valueOf(arg0: string_t): boolean;
        valueOfP(arg0: string_t): Promise<boolean>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)
        valueOf(arg0: boolean_t): boolean;
        valueOfP(arg0: boolean_t): Promise<boolean>;
        TRUE: boolean;
        FALSE: boolean;
        TYPE: Class;
      }
    }
  }

  export module co.redseal.gremlinnode.function_ {
    export interface IdentityGlobFunction extends Java.co.redseal.gremlinnode.function_.AbstractGlobFunction {
      // public void co.redseal.gremlinnode.function.IdentityGlobFunction.accept(java.lang.Object,java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public void co.redseal.gremlinnode.function.IdentityGlobFunction.accept(java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public void co.redseal.gremlinnode.function.IdentityGlobFunction.accept(java.lang.Object)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default com.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> com.tinkerpop.gremlin.util.function.TriConsumer.andThen(com.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(co.redseal.gremlinnode.function.GlobFunction)
      andThen(arg0: GlobFunction): GlobFunction;
      andThenP(arg0: GlobFunction): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): GlobFunction;
      andThenP(arg0: BiConsumer): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): GlobFunction;
      andThenP(arg0: Function): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): GlobFunction;
      andThenP(arg0: Consumer): Promise<GlobFunction>;
      // public java.util.function.BiConsumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
      // public java.util.function.BiFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public java.util.function.Function co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public java.util.function.Consumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public java.lang.Object co.redseal.gremlinnode.function.IdentityGlobFunction.apply(java.lang.Object,java.lang.Object)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public java.lang.Object co.redseal.gremlinnode.function.IdentityGlobFunction.apply(java.lang.Object)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Object co.redseal.gremlinnode.function.IdentityGlobFunction.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): GlobFunction;
      negateP(): Promise<GlobFunction>;
      // public java.util.function.BiPredicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public java.util.function.Predicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public boolean co.redseal.gremlinnode.function.IdentityGlobFunction.test(java.lang.Object,java.lang.Object)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public boolean co.redseal.gremlinnode.function.IdentityGlobFunction.test(java.lang.Object)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.String co.redseal.gremlinnode.function.AbstractGlobFunction.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IdentityGlobFunction {
      export interface Static {
        new (arg0: GlobFunction): co.redseal.gremlinnode.function_.IdentityGlobFunction;
      }
    }
  }

  export module org.codehaus.groovy.tools.shell {
    export interface Groovysh extends Java.java.lang.Object {
      // public void org.codehaus.groovy.tools.shell.Groovysh.displayBuffer(java.util.List)
      displayBuffer(arg0: List): void;
      displayBufferP(arg0: List): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.displayWelcomeBanner(org.codehaus.groovy.tools.shell.InteractiveShellRunner)
      displayWelcomeBanner(arg0: object_t): void;
      displayWelcomeBannerP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Object org.codehaus.groovy.tools.shell.Groovysh.execute(java.lang.String)
      execute(arg0: string_t): object_t;
      executeP(arg0: string_t): Promise<object_t>;
      // public org.codehaus.groovy.tools.shell.Command org.codehaus.groovy.tools.shell.Shell.findCommand(java.lang.String,java.util.List<java.lang.String>)
      findCommand(arg0: string_t, arg1: List): object_t;
      findCommandP(arg0: string_t, arg1: List): Promise<object_t>;
      // public org.codehaus.groovy.tools.shell.Command org.codehaus.groovy.tools.shell.Shell.findCommand(java.lang.String)
      findCommand(arg0: string_t): object_t;
      findCommandP(arg0: string_t): Promise<object_t>;
      // public final org.codehaus.groovy.tools.shell.BufferManager org.codehaus.groovy.tools.shell.Groovysh.getBuffers()
      getBuffers(): object_t;
      getBuffersP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final groovy.lang.Closure org.codehaus.groovy.tools.shell.Groovysh.getDefaultErrorHook()
      getDefaultErrorHook(): Closure;
      getDefaultErrorHookP(): Promise<Closure>;
      // public final groovy.lang.Closure org.codehaus.groovy.tools.shell.Groovysh.getDefaultResultHook()
      getDefaultResultHook(): Closure;
      getDefaultResultHookP(): Promise<Closure>;
      // public groovy.lang.Closure org.codehaus.groovy.tools.shell.Groovysh.getErrorHook()
      getErrorHook(): Closure;
      getErrorHookP(): Promise<Closure>;
      // public java.lang.String org.codehaus.groovy.tools.shell.Groovysh.getEvictedLine()
      getEvictedLine(): string;
      getEvictedLineP(): Promise<string>;
      // public jline.console.history.FileHistory org.codehaus.groovy.tools.shell.Groovysh.getHistory()
      getHistory(): object_t;
      getHistoryP(): Promise<object_t>;
      // public boolean org.codehaus.groovy.tools.shell.Groovysh.getHistoryFull()
      getHistoryFull(): boolean;
      getHistoryFullP(): Promise<boolean>;
      // public final java.util.List<java.lang.String> org.codehaus.groovy.tools.shell.Groovysh.getImports()
      getImports(): List;
      getImportsP(): Promise<List>;
      // public java.lang.String org.codehaus.groovy.tools.shell.Groovysh.getImportStatements()
      getImportStatements(): string;
      getImportStatementsP(): Promise<string>;
      // public java.lang.String org.codehaus.groovy.tools.shell.Groovysh.getIndentPrefix()
      getIndentPrefix(): string;
      getIndentPrefixP(): Promise<string>;
      // public int org.codehaus.groovy.tools.shell.Groovysh.getIndentSize()
      getIndentSize(): number;
      getIndentSizeP(): Promise<number>;
      // public final org.codehaus.groovy.tools.shell.Interpreter org.codehaus.groovy.tools.shell.Groovysh.getInterp()
      getInterp(): object_t;
      getInterpP(): Promise<object_t>;
      // public final org.codehaus.groovy.tools.shell.IO org.codehaus.groovy.tools.shell.Shell.getIo()
      getIo(): object_t;
      getIoP(): Promise<object_t>;
      // public groovy.lang.MetaClass org.codehaus.groovy.tools.shell.Shell.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public org.codehaus.groovy.tools.shell.util.PackageHelper org.codehaus.groovy.tools.shell.Groovysh.getPackageHelper()
      getPackageHelper(): object_t;
      getPackageHelperP(): Promise<object_t>;
      // public final org.codehaus.groovy.tools.shell.Parser org.codehaus.groovy.tools.shell.Groovysh.getParser()
      getParser(): object_t;
      getParserP(): Promise<object_t>;
      // public java.lang.Object org.codehaus.groovy.tools.shell.Shell.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public final org.codehaus.groovy.tools.shell.CommandRegistry org.codehaus.groovy.tools.shell.Shell.getRegistry()
      getRegistry(): object_t;
      getRegistryP(): Promise<object_t>;
      // public groovy.lang.Closure org.codehaus.groovy.tools.shell.Groovysh.getResultHook()
      getResultHook(): Closure;
      getResultHookP(): Promise<Closure>;
      // public org.codehaus.groovy.tools.shell.InteractiveShellRunner org.codehaus.groovy.tools.shell.Groovysh.getRunner()
      getRunner(): object_t;
      getRunnerP(): Promise<object_t>;
      // public java.io.File org.codehaus.groovy.tools.shell.Groovysh.getUserStateDirectory()
      getUserStateDirectory(): object_t;
      getUserStateDirectoryP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Object org.codehaus.groovy.tools.shell.Shell.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public boolean org.codehaus.groovy.tools.shell.Shell.isExecutable(java.lang.String)
      isExecutable(arg0: string_t): boolean;
      isExecutableP(arg0: string_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.tools.shell.Groovysh.isHistoryFull()
      isHistoryFull(): boolean;
      isHistoryFullP(): Promise<boolean>;
      // public org.codehaus.groovy.tools.shell.Command org.codehaus.groovy.tools.shell.Shell.leftShift(org.codehaus.groovy.tools.shell.Command)
      leftShift(arg0: object_t): object_t;
      leftShiftP(arg0: object_t): Promise<object_t>;
      // public java.lang.Object org.codehaus.groovy.tools.shell.Shell.leftShift(java.lang.String)
      leftShift(arg0: string_t): object_t;
      leftShiftP(arg0: string_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.codehaus.groovy.tools.shell.Command org.codehaus.groovy.tools.shell.Shell.register(org.codehaus.groovy.tools.shell.Command)
      register(arg0: object_t): object_t;
      registerP(arg0: object_t): Promise<object_t>;
      // public java.lang.String org.codehaus.groovy.tools.shell.Groovysh.renderPrompt()
      renderPrompt(): string;
      renderPromptP(): Promise<string>;
      // public int org.codehaus.groovy.tools.shell.Groovysh.run(java.lang.String,java.util.List<java.lang.String>)
      run(arg0: string_t, arg1: List): number;
      runP(arg0: string_t, arg1: List): Promise<number>;
      // public int org.codehaus.groovy.tools.shell.Groovysh.run(java.lang.String)
      run(arg0: string_t): number;
      runP(arg0: string_t): Promise<number>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setErrorHook(groovy.lang.Closure)
      setErrorHook(arg0: Closure): void;
      setErrorHookP(arg0: Closure): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setEvictedLine(java.lang.String)
      setEvictedLine(arg0: string_t): void;
      setEvictedLineP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setHistory(jline.console.history.FileHistory)
      setHistory(arg0: object_t): void;
      setHistoryP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setHistoryFull(boolean)
      setHistoryFull(arg0: boolean_t): void;
      setHistoryFullP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setIndentSize(int)
      setIndentSize(arg0: integer_t): void;
      setIndentSizeP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Shell.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setPackageHelper(org.codehaus.groovy.tools.shell.util.PackageHelper)
      setPackageHelper(arg0: object_t): void;
      setPackageHelperP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Shell.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setResultHook(groovy.lang.Closure)
      setResultHook(arg0: Closure): void;
      setResultHookP(arg0: Closure): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setRunner(org.codehaus.groovy.tools.shell.InteractiveShellRunner)
      setRunner(arg0: object_t): void;
      setRunnerP(arg0: object_t): Promise<void>;
      // public groovy.lang.MetaClass org.codehaus.groovy.tools.shell.Groovysh.super$2$$getStaticMetaClass()
      super$2$$getStaticMetaClass(): MetaClass;
      super$2$$getStaticMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object org.codehaus.groovy.tools.shell.Groovysh.super$2$execute(java.lang.String)
      super$2$execute(arg0: string_t): object_t;
      super$2$executeP(arg0: string_t): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Groovysh {
      export interface Static {
        new (arg0: ClassLoader, arg1: Binding, arg2: object_t, arg3: Closure): org.codehaus.groovy.tools.shell.Groovysh;
        new (arg0: ClassLoader, arg1: Binding, arg2: object_t): org.codehaus.groovy.tools.shell.Groovysh;
        new (arg0: Binding, arg1: object_t): org.codehaus.groovy.tools.shell.Groovysh;
        new (arg0: object_t): org.codehaus.groovy.tools.shell.Groovysh;
        new (): org.codehaus.groovy.tools.shell.Groovysh;
        // public static boolean org.codehaus.groovy.tools.shell.Groovysh.isTypeOrMethodDeclaration(java.util.List<java.lang.String>)
        isTypeOrMethodDeclaration(arg0: List): boolean;
        isTypeOrMethodDeclarationP(arg0: List): Promise<boolean>;
        COLLECTED_BOUND_VARS_MAP_VARNAME: string;
        INTERPRETER_MODE_PREFERENCE_KEY: string;
        AUTOINDENT_PREFERENCE_KEY: string;
        COLORS_PREFERENCE_KEY: string;
        METACLASS_COMPLETION_PREFIX_LENGTH_PREFERENCE_KEY: string;
        __$stMC: boolean;
      }
    }
  }

  export module java.util {
    export interface HashSet extends Java.java.util.AbstractSet,Java.java.util.Set {
      // public boolean java.util.HashSet.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public void java.util.HashSet.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.HashSet.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.util.HashSet.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractCollection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.util.AbstractSet.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int java.util.AbstractSet.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.HashSet.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public java.util.Iterator<E> java.util.HashSet.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public boolean java.util.HashSet.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractSet.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public boolean java.util.AbstractCollection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public int java.util.HashSet.size()
      size(): number;
      sizeP(): Promise<number>;
      // public java.util.Spliterator<E> java.util.HashSet.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public <T> T[] java.util.AbstractCollection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.Object[] java.util.AbstractCollection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.util.AbstractCollection.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module HashSet {
      export interface Static {
        new (arg0: integer_t, arg1: float_t): java.util.HashSet;
        new (arg0: Collection): java.util.HashSet;
        new (arg0: integer_t): java.util.HashSet;
        new (): java.util.HashSet;
      }
    }
  }

  export module java.lang.reflect {
    export interface Array extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Array {
      export interface Static {
        // public static native java.lang.Object java.lang.reflect.Array.get(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        get(arg0: object_t, arg1: integer_t): object_t;
        getP(arg0: object_t, arg1: integer_t): Promise<object_t>;
        // public static native boolean java.lang.reflect.Array.getBoolean(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getBoolean(arg0: object_t, arg1: integer_t): boolean;
        getBooleanP(arg0: object_t, arg1: integer_t): Promise<boolean>;
        // public static native byte java.lang.reflect.Array.getByte(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getByte(arg0: object_t, arg1: integer_t): object_t;
        getByteP(arg0: object_t, arg1: integer_t): Promise<object_t>;
        // public static native char java.lang.reflect.Array.getChar(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getChar(arg0: object_t, arg1: integer_t): object_t;
        getCharP(arg0: object_t, arg1: integer_t): Promise<object_t>;
        // public static native double java.lang.reflect.Array.getDouble(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getDouble(arg0: object_t, arg1: integer_t): number;
        getDoubleP(arg0: object_t, arg1: integer_t): Promise<number>;
        // public static native float java.lang.reflect.Array.getFloat(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getFloat(arg0: object_t, arg1: integer_t): number;
        getFloatP(arg0: object_t, arg1: integer_t): Promise<number>;
        // public static native int java.lang.reflect.Array.getInt(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getInt(arg0: object_t, arg1: integer_t): number;
        getIntP(arg0: object_t, arg1: integer_t): Promise<number>;
        // public static native int java.lang.reflect.Array.getLength(java.lang.Object) throws java.lang.IllegalArgumentException
        getLength(arg0: object_t): number;
        getLengthP(arg0: object_t): Promise<number>;
        // public static native long java.lang.reflect.Array.getLong(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getLong(arg0: object_t, arg1: integer_t): longValue_t;
        getLongP(arg0: object_t, arg1: integer_t): Promise<longValue_t>;
        // public static native short java.lang.reflect.Array.getShort(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getShort(arg0: object_t, arg1: integer_t): number;
        getShortP(arg0: object_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Object java.lang.reflect.Array.newInstance(java.lang.Class<?>,int...) throws java.lang.IllegalArgumentException,java.lang.NegativeArraySizeException
        newInstance(arg0: Class, ...arg1: integer_t[]): object_t;
        newInstance(arg0: Class, arg1: array_t<integer_t>): object_t;
        newInstanceP(arg0: Class, ...arg1: integer_t[]): Promise<object_t>;
        newInstanceP(arg0: Class, arg1: array_t<integer_t>): object_t;
        // public static java.lang.Object java.lang.reflect.Array.newInstance(java.lang.Class<?>,int) throws java.lang.NegativeArraySizeException
        newInstance(arg0: Class, arg1: integer_t): object_t;
        newInstanceP(arg0: Class, arg1: integer_t): Promise<object_t>;
        // public static native void java.lang.reflect.Array.set(java.lang.Object,int,java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        set(arg0: object_t, arg1: integer_t, arg2: object_t): void;
        setP(arg0: object_t, arg1: integer_t, arg2: object_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setBoolean(java.lang.Object,int,boolean) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setBoolean(arg0: object_t, arg1: integer_t, arg2: boolean_t): void;
        setBooleanP(arg0: object_t, arg1: integer_t, arg2: boolean_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setByte(java.lang.Object,int,byte) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setByte(arg0: object_t, arg1: integer_t, arg2: object_t): void;
        setByteP(arg0: object_t, arg1: integer_t, arg2: object_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setChar(java.lang.Object,int,char) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setChar(arg0: object_t, arg1: integer_t, arg2: object_t): void;
        setCharP(arg0: object_t, arg1: integer_t, arg2: object_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setDouble(java.lang.Object,int,double) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setDouble(arg0: object_t, arg1: integer_t, arg2: double_t): void;
        setDoubleP(arg0: object_t, arg1: integer_t, arg2: double_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setFloat(java.lang.Object,int,float) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setFloat(arg0: object_t, arg1: integer_t, arg2: float_t): void;
        setFloatP(arg0: object_t, arg1: integer_t, arg2: float_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setInt(java.lang.Object,int,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setInt(arg0: object_t, arg1: integer_t, arg2: integer_t): void;
        setIntP(arg0: object_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setLong(java.lang.Object,int,long) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setLong(arg0: object_t, arg1: integer_t, arg2: long_t): void;
        setLongP(arg0: object_t, arg1: integer_t, arg2: long_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setShort(java.lang.Object,int,short) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setShort(arg0: object_t, arg1: integer_t, arg2: short_t): void;
        setShortP(arg0: object_t, arg1: integer_t, arg2: short_t): Promise<void>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure.strategy {
    export interface StrategyGraph extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.structure.Graph {
      // public com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.strategy.StrategyGraph.addVertex(java.lang.Object...)
      addVertex(...arg0: object_t[]): Vertex;
      addVertex(arg0: object_array_t): Vertex;
      addVertexP(...arg0: object_t[]): Promise<Vertex>;
      addVertexP(arg0: object_array_t): Vertex;
      // public default com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.String)
      addVertex(arg0: string_t): Vertex;
      addVertexP(arg0: string_t): Promise<Vertex>;
      // public void com.tinkerpop.gremlin.structure.strategy.StrategyGraph.close() throws java.lang.Exception
      close(): void;
      closeP(): Promise<void>;
      // public <T> T com.tinkerpop.gremlin.structure.strategy.StrategyGraph.compose(java.util.function.Function<com.tinkerpop.gremlin.structure.strategy.GraphStrategy, java.util.function.UnaryOperator<T>>,T)
      compose(arg0: Function, arg1: object_t): object_t;
      composeP(arg0: Function, arg1: object_t): Promise<object_t>;
      // public com.tinkerpop.gremlin.process.computer.GraphComputer com.tinkerpop.gremlin.structure.strategy.StrategyGraph.compute(java.lang.Class...)
      compute(...arg0: Class[]): GraphComputer;
      compute(arg0: array_t<Class>): GraphComputer;
      computeP(...arg0: Class[]): Promise<GraphComputer>;
      computeP(arg0: array_t<Class>): GraphComputer;
      // public org.apache.commons.configuration.Configuration com.tinkerpop.gremlin.structure.strategy.StrategyGraph.configuration()
      configuration(): object_t;
      configurationP(): Promise<object_t>;
      // public com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.structure.strategy.StrategyGraph.E(java.lang.Object...)
      E(...arg0: object_t[]): GraphTraversal;
      E(arg0: object_array_t): GraphTraversal;
      EP(...arg0: object_t[]): Promise<GraphTraversal>;
      EP(arg0: object_array_t): GraphTraversal;
      // public java.util.Iterator<com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.structure.strategy.StrategyGraph.edgeIterator(java.lang.Object...)
      edgeIterator(...arg0: object_t[]): Iterator;
      edgeIterator(arg0: object_array_t): Iterator;
      edgeIteratorP(...arg0: object_t[]): Promise<Iterator>;
      edgeIteratorP(arg0: object_array_t): Iterator;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public com.tinkerpop.gremlin.structure.Graph$Features com.tinkerpop.gremlin.structure.strategy.StrategyGraph.features()
      features(): object_t;
      featuresP(): Promise<object_t>;
      // public com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.strategy.StrategyGraph.getBaseGraph()
      getBaseGraph(): Graph;
      getBaseGraphP(): Promise<Graph>;
      // public java.lang.Object com.tinkerpop.gremlin.structure.strategy.StrategyGraph.getBaseGraph()
      getBaseGraph(): object_t;
      getBaseGraphP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public com.tinkerpop.gremlin.structure.strategy.GraphStrategy com.tinkerpop.gremlin.structure.strategy.StrategyGraph.getStrategy()
      getStrategy(): GraphStrategy;
      getStrategyP(): Promise<GraphStrategy>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default com.tinkerpop.gremlin.structure.Graph$Io com.tinkerpop.gremlin.structure.Graph.io()
      io(): object_t;
      ioP(): Promise<object_t>;
      // public com.tinkerpop.gremlin.structure.Graph$Iterators com.tinkerpop.gremlin.structure.strategy.StrategyGraph.iterators()
      iterators(): object_t;
      iteratorsP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public <T,S> T com.tinkerpop.gremlin.structure.strategy.StrategyGraph.of(java.lang.Class<T>)
      of(arg0: Class): Traversal;
      ofP(arg0: Class): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.structure.strategy.StrategyGraph com.tinkerpop.gremlin.structure.Graph.strategy(com.tinkerpop.gremlin.structure.strategy.GraphStrategy...)
      strategy(...arg0: GraphStrategy[]): StrategyGraph;
      strategy(arg0: array_t<GraphStrategy>): StrategyGraph;
      strategyP(...arg0: GraphStrategy[]): Promise<StrategyGraph>;
      strategyP(arg0: array_t<GraphStrategy>): StrategyGraph;
      // public java.lang.String com.tinkerpop.gremlin.structure.strategy.StrategyGraph.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public com.tinkerpop.gremlin.structure.Transaction com.tinkerpop.gremlin.structure.strategy.StrategyGraph.tx()
      tx(): Transaction;
      txP(): Promise<Transaction>;
      // public com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.strategy.StrategyGraph.V(java.lang.Object...)
      V(...arg0: object_t[]): GraphTraversal;
      V(arg0: object_array_t): GraphTraversal;
      VP(...arg0: object_t[]): Promise<GraphTraversal>;
      VP(arg0: object_array_t): GraphTraversal;
      // public com.tinkerpop.gremlin.structure.Graph$Variables com.tinkerpop.gremlin.structure.strategy.StrategyGraph.variables()
      variables(): object_t;
      variablesP(): Promise<object_t>;
      // public java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.strategy.StrategyGraph.vertexIterator(java.lang.Object...)
      vertexIterator(...arg0: object_t[]): Iterator;
      vertexIterator(arg0: object_array_t): Iterator;
      vertexIteratorP(...arg0: object_t[]): Promise<Iterator>;
      vertexIteratorP(arg0: object_array_t): Iterator;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StrategyGraph {
      export interface Static {
        new (arg0: Graph, arg1: GraphStrategy): com.tinkerpop.gremlin.structure.strategy.StrategyGraph;
        new (arg0: Graph): com.tinkerpop.gremlin.structure.strategy.StrategyGraph;
        GRAPH: string;
      }
    }
  }

  export module java.lang {
    export interface Enum extends Java.java.lang.Object {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public final boolean java.lang.Enum.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public final int java.lang.Enum.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Enum.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Enum {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure.strategy {
    export interface StrategyContext extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public T com.tinkerpop.gremlin.structure.strategy.StrategyContext.getCurrent()
      getCurrent(): object_t;
      getCurrentP(): Promise<object_t>;
      // public com.tinkerpop.gremlin.structure.strategy.StrategyGraph com.tinkerpop.gremlin.structure.strategy.StrategyContext.getStrategyGraph()
      getStrategyGraph(): StrategyGraph;
      getStrategyGraphP(): Promise<StrategyGraph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StrategyContext {
      export interface Static {
        new (arg0: StrategyGraph, arg1: object_t): com.tinkerpop.gremlin.structure.strategy.StrategyContext;
      }
    }
  }

  export module java.util.function_ {
    export interface BiFunction extends Java.java.lang.Object {
      // public default <V> java.util.function.BiFunction<T, U, V> java.util.function.BiFunction.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public abstract R java.util.function.BiFunction.apply(T,U)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
    }
    export module BiFunction {
      export interface Static {
      }
    }
  }

  export module java.io {
    export interface ByteArrayOutputStream extends Java.java.lang.Object {
      // public void java.io.ByteArrayOutputStream.close() throws java.io.IOException
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void java.io.OutputStream.flush() throws java.io.IOException
      flush(): void;
      flushP(): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public synchronized void java.io.ByteArrayOutputStream.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public synchronized int java.io.ByteArrayOutputStream.size()
      size(): number;
      sizeP(): Promise<number>;
      // public synchronized byte[] java.io.ByteArrayOutputStream.toByteArray()
      toByteArray(): object_t[];
      toByteArrayP(): Promise<object_t[]>;
      // public synchronized java.lang.String java.io.ByteArrayOutputStream.toString(java.lang.String) throws java.io.UnsupportedEncodingException
      toString(arg0: string_t): string;
      toStringP(arg0: string_t): Promise<string>;
      // public synchronized java.lang.String java.io.ByteArrayOutputStream.toString(int)
      toString(arg0: integer_t): string;
      toStringP(arg0: integer_t): Promise<string>;
      // public synchronized java.lang.String java.io.ByteArrayOutputStream.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public synchronized void java.io.ByteArrayOutputStream.write(byte[],int,int)
      write(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
      writeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
      // public void java.io.OutputStream.write(byte[]) throws java.io.IOException
      write(arg0: object_array_t): void;
      writeP(arg0: object_array_t): Promise<void>;
      // public synchronized void java.io.ByteArrayOutputStream.write(int)
      write(arg0: integer_t): void;
      writeP(arg0: integer_t): Promise<void>;
      // public synchronized void java.io.ByteArrayOutputStream.writeTo(java.io.OutputStream) throws java.io.IOException
      writeTo(arg0: object_t): void;
      writeToP(arg0: object_t): Promise<void>;
    }
    export module ByteArrayOutputStream {
      export interface Static {
        new (arg0: integer_t): java.io.ByteArrayOutputStream;
        new (): java.io.ByteArrayOutputStream;
      }
    }
  }

  export module groovy.lang {
    export interface GroovyCodeSource extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.io.File groovy.lang.GroovyCodeSource.getFile()
      getFile(): object_t;
      getFileP(): Promise<object_t>;
      // public java.lang.String groovy.lang.GroovyCodeSource.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public java.lang.String groovy.lang.GroovyCodeSource.getScriptText()
      getScriptText(): string;
      getScriptTextP(): Promise<string>;
      // public java.net.URL groovy.lang.GroovyCodeSource.getURL()
      getURL(): object_t;
      getURLP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean groovy.lang.GroovyCodeSource.isCachable()
      isCachable(): boolean;
      isCachableP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void groovy.lang.GroovyCodeSource.setCachable(boolean)
      setCachable(arg0: boolean_t): void;
      setCachableP(arg0: boolean_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GroovyCodeSource {
      export interface Static {
        new (arg0: string_t, arg1: string_t, arg2: string_t): groovy.lang.GroovyCodeSource;
        new (arg0: object_t, arg1: string_t, arg2: string_t): groovy.lang.GroovyCodeSource;
        new (arg0: object_t, arg1: string_t): groovy.lang.GroovyCodeSource;
        new (arg0: object_t): groovy.lang.GroovyCodeSource;
        new (arg0: object_t): groovy.lang.GroovyCodeSource;
        new (arg0: object_t): groovy.lang.GroovyCodeSource;
      }
    }
  }

  export module java.util {
    export interface Comparator extends Java.java.lang.Object {
      // public abstract int java.util.Comparator.compare(T,T)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public abstract boolean java.util.Comparator.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): Comparator;
      reversedP(): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: Comparator): Comparator;
      thenComparingP(arg0: Function, arg1: Comparator): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): Comparator;
      thenComparingP(arg0: Function): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: Comparator): Comparator;
      thenComparingP(arg0: Comparator): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): Comparator;
      thenComparingDoubleP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): Comparator;
      thenComparingIntP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): Comparator;
      thenComparingLongP(arg0: object_t): Promise<Comparator>;
    }
    export module Comparator {
      export interface Static {
        // public static <T,U> java.util.Comparator<T> java.util.Comparator.comparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
        comparing(arg0: Function, arg1: Comparator): Comparator;
        comparingP(arg0: Function, arg1: Comparator): Promise<Comparator>;
        // public static <T,U> java.util.Comparator<T> java.util.Comparator.comparing(java.util.function.Function<? super T, ? extends U>)
        comparing(arg0: Function): Comparator;
        comparingP(arg0: Function): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.comparingDouble(java.util.function.ToDoubleFunction<? super T>)
        comparingDouble(arg0: object_t): Comparator;
        comparingDoubleP(arg0: object_t): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.comparingInt(java.util.function.ToIntFunction<? super T>)
        comparingInt(arg0: object_t): Comparator;
        comparingIntP(arg0: object_t): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.comparingLong(java.util.function.ToLongFunction<? super T>)
        comparingLong(arg0: object_t): Comparator;
        comparingLongP(arg0: object_t): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.naturalOrder()
        naturalOrder(): Comparator;
        naturalOrderP(): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.nullsFirst(java.util.Comparator<? super T>)
        nullsFirst(arg0: Comparator): Comparator;
        nullsFirstP(arg0: Comparator): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.nullsLast(java.util.Comparator<? super T>)
        nullsLast(arg0: Comparator): Comparator;
        nullsLastP(arg0: Comparator): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.reverseOrder()
        reverseOrder(): Comparator;
        reverseOrderP(): Promise<Comparator>;
      }
    }
  }

  export module co.redseal.gremlinnode.function_ {
    export interface GlobFunction extends Java.java.util.function_.Function,Java.java.util.function_.UnaryOperator,Java.java.util.function_.BiFunction,Java.java.util.function_.BinaryOperator,Java.java.util.function_.Supplier,Java.java.util.function_.Consumer,Java.java.util.function_.BiConsumer,Java.com.tinkerpop.gremlin.util.function_.TriConsumer,Java.java.util.function_.Predicate,Java.java.util.function_.BiPredicate {
      // public abstract void com.tinkerpop.gremlin.util.function.TriConsumer.accept(A,B,C)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public abstract void java.util.function.BiConsumer.accept(T,U)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default com.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> com.tinkerpop.gremlin.util.function.TriConsumer.andThen(com.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
      // public abstract co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GlobFunction.andThen(co.redseal.gremlinnode.function.GlobFunction)
      andThen(arg0: GlobFunction): GlobFunction;
      andThenP(arg0: GlobFunction): Promise<GlobFunction>;
      // public abstract co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): GlobFunction;
      andThenP(arg0: BiConsumer): Promise<GlobFunction>;
      // public abstract co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): GlobFunction;
      andThenP(arg0: Function): Promise<GlobFunction>;
      // public abstract co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): GlobFunction;
      andThenP(arg0: Consumer): Promise<GlobFunction>;
      // public default java.util.function.BiConsumer co.redseal.gremlinnode.function.GlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
      // public default java.util.function.BiFunction co.redseal.gremlinnode.function.GlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public default java.util.function.Function co.redseal.gremlinnode.function.GlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public default java.util.function.Consumer co.redseal.gremlinnode.function.GlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public abstract R java.util.function.BiFunction.apply(T,U)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public abstract co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GlobFunction.negate()
      negate(): GlobFunction;
      negateP(): Promise<GlobFunction>;
      // public default java.util.function.BiPredicate co.redseal.gremlinnode.function.GlobFunction.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public default java.util.function.Predicate co.redseal.gremlinnode.function.GlobFunction.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public abstract boolean java.util.function.BiPredicate.test(T,U)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
    }
    export module GlobFunction {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface ArrayList extends Java.java.util.AbstractList,Java.java.util.List {
      // public void java.util.ArrayList.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public boolean java.util.ArrayList.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.ArrayList.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public boolean java.util.ArrayList.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public void java.util.ArrayList.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.ArrayList.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.util.ArrayList.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractCollection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public void java.util.ArrayList.ensureCapacity(int)
      ensureCapacity(arg0: integer_t): void;
      ensureCapacityP(arg0: integer_t): Promise<void>;
      // public boolean java.util.AbstractList.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void java.util.ArrayList.forEach(java.util.function.Consumer<? super E>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public E java.util.ArrayList.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int java.util.AbstractList.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.util.ArrayList.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public boolean java.util.ArrayList.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public java.util.Iterator<E> java.util.ArrayList.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public int java.util.ArrayList.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public java.util.ListIterator<E> java.util.ArrayList.listIterator(int)
      listIterator(arg0: integer_t): ListIterator;
      listIteratorP(arg0: integer_t): Promise<ListIterator>;
      // public java.util.ListIterator<E> java.util.ArrayList.listIterator()
      listIterator(): ListIterator;
      listIteratorP(): Promise<ListIterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public boolean java.util.ArrayList.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public E java.util.ArrayList.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public boolean java.util.ArrayList.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public void java.util.ArrayList.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: UnaryOperator): void;
      replaceAllP(arg0: UnaryOperator): Promise<void>;
      // public boolean java.util.ArrayList.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public E java.util.ArrayList.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public int java.util.ArrayList.size()
      size(): number;
      sizeP(): Promise<number>;
      // public void java.util.ArrayList.sort(java.util.Comparator<? super E>)
      sort(arg0: Comparator): void;
      sortP(arg0: Comparator): Promise<void>;
      // public java.util.Spliterator<E> java.util.ArrayList.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public java.util.List<E> java.util.ArrayList.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public <T> T[] java.util.ArrayList.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.Object[] java.util.ArrayList.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.util.AbstractCollection.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public void java.util.ArrayList.trimToSize()
      trimToSize(): void;
      trimToSizeP(): Promise<void>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ArrayList {
      export interface Static {
        new (arg0: Collection): java.util.ArrayList;
        new (arg0: integer_t): java.util.ArrayList;
        new (): java.util.ArrayList;
      }
    }
  }

  export module org.codehaus.groovy.control.customizers {
    export interface CompilationCustomizer extends Java.java.lang.Object {
      // public abstract void org.codehaus.groovy.control.CompilationUnit$PrimaryClassNodeOperation.call(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.classgen.GeneratorContext,org.codehaus.groovy.ast.ClassNode) throws org.codehaus.groovy.control.CompilationFailedException
      call(arg0: object_t, arg1: object_t, arg2: ClassNode): void;
      callP(arg0: object_t, arg1: object_t, arg2: ClassNode): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public org.codehaus.groovy.control.CompilePhase org.codehaus.groovy.control.customizers.CompilationCustomizer.getPhase()
      getPhase(): object_t;
      getPhaseP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean org.codehaus.groovy.control.CompilationUnit$PrimaryClassNodeOperation.needSortedInput()
      needSortedInput(): boolean;
      needSortedInputP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module CompilationCustomizer {
      export interface Static {
        new (arg0: object_t): org.codehaus.groovy.control.customizers.CompilationCustomizer;
      }
    }
  }

  export module java.lang {
    export interface ClassLoader extends Java.java.lang.Object {
      // public void java.lang.ClassLoader.clearAssertionStatus()
      clearAssertionStatus(): void;
      clearAssertionStatusP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.ClassLoader java.lang.ClassLoader.getParent()
      getParent(): ClassLoader;
      getParentP(): Promise<ClassLoader>;
      // public java.net.URL java.lang.ClassLoader.getResource(java.lang.String)
      getResource(arg0: string_t): object_t;
      getResourceP(arg0: string_t): Promise<object_t>;
      // public java.io.InputStream java.lang.ClassLoader.getResourceAsStream(java.lang.String)
      getResourceAsStream(arg0: string_t): object_t;
      getResourceAsStreamP(arg0: string_t): Promise<object_t>;
      // public java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getResources(java.lang.String) throws java.io.IOException
      getResources(arg0: string_t): object_t;
      getResourcesP(arg0: string_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Class<?> java.lang.ClassLoader.loadClass(java.lang.String) throws java.lang.ClassNotFoundException
      loadClass(arg0: string_t): Class;
      loadClassP(arg0: string_t): Promise<Class>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.ClassLoader.setClassAssertionStatus(java.lang.String,boolean)
      setClassAssertionStatus(arg0: string_t, arg1: boolean_t): void;
      setClassAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public void java.lang.ClassLoader.setDefaultAssertionStatus(boolean)
      setDefaultAssertionStatus(arg0: boolean_t): void;
      setDefaultAssertionStatusP(arg0: boolean_t): Promise<void>;
      // public void java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)
      setPackageAssertionStatus(arg0: string_t, arg1: boolean_t): void;
      setPackageAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ClassLoader {
      export interface Static {
        // public static java.lang.ClassLoader java.lang.ClassLoader.getSystemClassLoader()
        getSystemClassLoader(): ClassLoader;
        getSystemClassLoaderP(): Promise<ClassLoader>;
        // public static java.net.URL java.lang.ClassLoader.getSystemResource(java.lang.String)
        getSystemResource(arg0: string_t): object_t;
        getSystemResourceP(arg0: string_t): Promise<object_t>;
        // public static java.io.InputStream java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
        getSystemResourceAsStream(arg0: string_t): object_t;
        getSystemResourceAsStreamP(arg0: string_t): Promise<object_t>;
        // public static java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getSystemResources(java.lang.String) throws java.io.IOException
        getSystemResources(arg0: string_t): object_t;
        getSystemResourcesP(arg0: string_t): Promise<object_t>;
      }
    }
  }

  export module co.redseal.gremlinnode.testing {
    export interface TestClass extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String co.redseal.gremlinnode.testing.TestClass.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TestClass {
      export interface Static {
        new (): co.redseal.gremlinnode.testing.TestClass;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.graph.traversal {
    export interface GraphTraversal extends Java.com.tinkerpop.gremlin.process.Traversal {
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.and(com.tinkerpop.gremlin.process.Traversal<?, ?>...)
      and(...arg0: Traversal[]): GraphTraversal;
      and(arg0: array_t<Traversal>): GraphTraversal;
      andP(...arg0: Traversal[]): Promise<GraphTraversal>;
      andP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal$Admin<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.asAdmin()
      asAdmin(): object_t;
      asAdminP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.Traversal$Admin com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.asAdmin()
      asAdmin(): object_t;
      asAdminP(): Promise<object_t>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.barrier()
      barrier(): GraphTraversal;
      barrierP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.branch(com.tinkerpop.gremlin.process.Traversal<?, M>)
      branch(arg0: Traversal): GraphTraversal;
      branchP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<E>, M>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.by(java.util.function.Function<com.tinkerpop.gremlin.structure.Element, V>,java.util.Comparator<V>)
      by(arg0: Function, arg1: Comparator): GraphTraversal;
      byP(arg0: Function, arg1: Comparator): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.by(java.lang.String,java.util.Comparator<V>)
      by(arg0: string_t, arg1: Comparator): GraphTraversal;
      byP(arg0: string_t, arg1: Comparator): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.by(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      by(arg0: Traversal): GraphTraversal;
      byP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.by(com.tinkerpop.gremlin.structure.Order)
      by(arg0: Order): GraphTraversal;
      byP(arg0: Order): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.by(com.tinkerpop.gremlin.process.T)
      by(arg0: T): GraphTraversal;
      byP(arg0: T): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.by(java.util.function.Function<V, java.lang.Object>)
      by(arg0: Function): GraphTraversal;
      byP(arg0: Function): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.by(java.util.Comparator<E>)
      by(arg0: Comparator): GraphTraversal;
      byP(arg0: Comparator): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.by(java.lang.String)
      by(arg0: string_t): GraphTraversal;
      byP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.by()
      by(): GraphTraversal;
      byP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.cap(java.lang.String...)
      cap(...arg0: string_t[]): GraphTraversal;
      cap(arg0: array_t<string_t>): GraphTraversal;
      capP(...arg0: string_t[]): Promise<GraphTraversal>;
      capP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.choose(com.tinkerpop.gremlin.process.Traversal<?, ?>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: Traversal, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Traversal, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.choose(java.util.function.Predicate<E>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: Predicate, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Predicate, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.choose(com.tinkerpop.gremlin.process.Traversal<?, M>)
      choose(arg0: Traversal): GraphTraversal;
      chooseP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.choose(java.util.function.Function<E, M>)
      choose(arg0: Function): GraphTraversal;
      chooseP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.coalesce(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      coalesce(...arg0: Traversal[]): GraphTraversal;
      coalesce(arg0: array_t<Traversal>): GraphTraversal;
      coalesceP(...arg0: Traversal[]): Promise<GraphTraversal>;
      coalesceP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.lang.Long> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<E>>)
      emit(arg0: Predicate): GraphTraversal;
      emitP(arg0: Predicate): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.except(java.util.Collection<E>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.except(E)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default <C> C com.tinkerpop.gremlin.process.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<E>>)
      filter(arg0: Predicate): GraphTraversal;
      filterP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<E>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.fold(E2,java.util.function.BiFunction<E2, E, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.util.List<E>> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default <E2> void com.tinkerpop.gremlin.process.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: Class, arg1: Consumer): void;
      forEachRemainingP(arg0: Class, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.has(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      has(arg0: Traversal): GraphTraversal;
      hasP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.hasId(java.lang.Object...)
      hasId(...arg0: object_t[]): GraphTraversal;
      hasId(arg0: object_array_t): GraphTraversal;
      hasIdP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasIdP(arg0: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.hasKey(java.lang.String...)
      hasKey(...arg0: string_t[]): GraphTraversal;
      hasKey(arg0: array_t<string_t>): GraphTraversal;
      hasKeyP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasKeyP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.hasLabel(java.lang.String...)
      hasLabel(...arg0: string_t[]): GraphTraversal;
      hasLabel(arg0: array_t<string_t>): GraphTraversal;
      hasLabelP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasLabelP(arg0: array_t<string_t>): GraphTraversal;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.hasValue(java.lang.Object...)
      hasValue(...arg0: object_t[]): GraphTraversal;
      hasValue(arg0: object_array_t): GraphTraversal;
      hasValueP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasValueP(arg0: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.lang.Object> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.id()
      id(): GraphTraversal;
      idP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.inject(E...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.is(java.util.function.BiPredicate,java.lang.Object)
      is(arg0: BiPredicate, arg1: object_t): GraphTraversal;
      isP(arg0: BiPredicate, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.is(java.lang.Object)
      is(arg0: object_t): GraphTraversal;
      isP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.iterate()
      iterate(): GraphTraversal;
      iterateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.Traversal com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.lang.String> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.key()
      key(): GraphTraversal;
      keyP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.lang.String> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.label()
      label(): GraphTraversal;
      labelP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<E>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.max()
      max(): GraphTraversal;
      maxP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.lang.Double> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.mean()
      mean(): GraphTraversal;
      meanP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.min()
      min(): GraphTraversal;
      minP(): Promise<GraphTraversal>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.option(M,com.tinkerpop.gremlin.process.Traversal<E, E2>)
      option(arg0: object_t, arg1: Traversal): GraphTraversal;
      optionP(arg0: object_t, arg1: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.option(com.tinkerpop.gremlin.process.Traversal<E, E2>)
      option(arg0: Traversal): GraphTraversal;
      optionP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.or(com.tinkerpop.gremlin.process.Traversal<?, ?>...)
      or(...arg0: Traversal[]): GraphTraversal;
      or(arg0: array_t<Traversal>): GraphTraversal;
      orP(...arg0: Traversal[]): Promise<GraphTraversal>;
      orP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.order(com.tinkerpop.gremlin.process.Scope)
      order(arg0: Scope): GraphTraversal;
      orderP(arg0: Scope): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default void com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, E>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.retain(java.util.Collection<E>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.retain(E)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.sack(java.util.function.BiFunction<V, E, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<E>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.subgraph(java.lang.String)
      subgraph(arg0: string_t): GraphTraversal;
      subgraphP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.subgraph()
      subgraph(): GraphTraversal;
      subgraphP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: GraphComputer): GraphTraversal;
      submitP(arg0: GraphComputer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.Traversal com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: GraphComputer): Traversal;
      submitP(arg0: GraphComputer): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.lang.Double> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.util.BulkSet<E> com.tinkerpop.gremlin.process.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> com.tinkerpop.gremlin.process.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default java.util.Optional<E> com.tinkerpop.gremlin.process.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<E>>)
      until(arg0: Predicate): GraphTraversal;
      untilP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.withSack(java.util.function.Supplier<A>,java.util.function.UnaryOperator<A>)
      withSack(arg0: Supplier, arg1: UnaryOperator): GraphTraversal;
      withSackP(arg0: Supplier, arg1: UnaryOperator): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.withSack(java.util.function.Supplier<A>)
      withSack(arg0: Supplier): GraphTraversal;
      withSackP(arg0: Supplier): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: Supplier): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: Supplier): Promise<GraphTraversal>;
    }
    export module GraphTraversal {
      export interface Static {
        OF: string;
      }
    }
  }

  export module org.codehaus.groovy.util {
    export interface ManagedReference extends Java.java.lang.Object {
      // public final void org.codehaus.groovy.util.ManagedReference.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void org.codehaus.groovy.util.ManagedReference.finalizeReference()
      finalizeReference(): void;
      finalizeReferenceP(): Promise<void>;
      // public final T org.codehaus.groovy.util.ManagedReference.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ManagedReference {
      export interface Static {
        new (arg0: object_t, arg1: object_t, arg2: object_t): org.codehaus.groovy.util.ManagedReference;
        new (arg0: ReferenceBundle, arg1: object_t): org.codehaus.groovy.util.ManagedReference;
      }
    }
  }

  export module co.redseal.gremlinnode.function_ {
    export interface AbstractGlobFunction extends Java.java.lang.Object,Java.co.redseal.gremlinnode.function_.GlobFunction {
      // public abstract void com.tinkerpop.gremlin.util.function.TriConsumer.accept(A,B,C)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public abstract void java.util.function.BiConsumer.accept(T,U)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default com.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> com.tinkerpop.gremlin.util.function.TriConsumer.andThen(com.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(co.redseal.gremlinnode.function.GlobFunction)
      andThen(arg0: GlobFunction): GlobFunction;
      andThenP(arg0: GlobFunction): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): GlobFunction;
      andThenP(arg0: BiConsumer): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): GlobFunction;
      andThenP(arg0: Function): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): GlobFunction;
      andThenP(arg0: Consumer): Promise<GlobFunction>;
      // public java.util.function.BiConsumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
      // public java.util.function.BiFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public java.util.function.Function co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public java.util.function.Consumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public abstract R java.util.function.BiFunction.apply(T,U)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): GlobFunction;
      negateP(): Promise<GlobFunction>;
      // public java.util.function.BiPredicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public java.util.function.Predicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public abstract boolean java.util.function.BiPredicate.test(T,U)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.String co.redseal.gremlinnode.function.AbstractGlobFunction.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractGlobFunction {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Vertex extends Java.com.tinkerpop.gremlin.structure.Element {
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      // public abstract com.tinkerpop.gremlin.structure.Edge com.tinkerpop.gremlin.structure.Vertex.addEdge(java.lang.String,com.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addEdge(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Edge;
      addEdge(arg0: string_t, arg1: Vertex, arg2: object_array_t): Edge;
      addEdgeP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<Edge>;
      addEdgeP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Edge;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.and(com.tinkerpop.gremlin.process.Traversal<?, ?>...)
      and(...arg0: Traversal[]): GraphTraversal;
      and(arg0: array_t<Traversal>): GraphTraversal;
      andP(...arg0: Traversal[]): Promise<GraphTraversal>;
      andP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.barrier()
      barrier(): GraphTraversal;
      barrierP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.branch(com.tinkerpop.gremlin.process.Traversal<?, M>)
      branch(arg0: Traversal): GraphTraversal;
      branchP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, M>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.cap(java.lang.String...)
      cap(...arg0: string_t[]): GraphTraversal;
      cap(arg0: array_t<string_t>): GraphTraversal;
      capP(...arg0: string_t[]): Promise<GraphTraversal>;
      capP(arg0: array_t<string_t>): GraphTraversal;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(com.tinkerpop.gremlin.process.Traversal<?, M>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: Traversal, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Traversal, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: Predicate, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Predicate, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(com.tinkerpop.gremlin.process.Traversal<?, M>)
      choose(arg0: Traversal): GraphTraversal;
      chooseP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.choose(java.util.function.Function<A, M>)
      choose(arg0: Function): GraphTraversal;
      chooseP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.coalesce(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      coalesce(...arg0: Traversal[]): GraphTraversal;
      coalesce(arg0: array_t<Traversal>): GraphTraversal;
      coalesceP(...arg0: Traversal[]): Promise<GraphTraversal>;
      coalesceP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: Predicate): GraphTraversal;
      emitP(arg0: Predicate): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: Predicate): GraphTraversal;
      filterP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      has(arg0: Traversal): GraphTraversal;
      hasP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasId(java.lang.Object...)
      hasId(...arg0: object_t[]): GraphTraversal;
      hasId(arg0: object_array_t): GraphTraversal;
      hasIdP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasIdP(arg0: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasKey(java.lang.String...)
      hasKey(...arg0: string_t[]): GraphTraversal;
      hasKey(arg0: array_t<string_t>): GraphTraversal;
      hasKeyP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasKeyP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasLabel(java.lang.String...)
      hasLabel(...arg0: string_t[]): GraphTraversal;
      hasLabel(arg0: array_t<string_t>): GraphTraversal;
      hasLabelP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasLabelP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.hasValue(java.lang.Object...)
      hasValue(...arg0: object_t[]): GraphTraversal;
      hasValue(arg0: object_array_t): GraphTraversal;
      hasValueP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasValueP(arg0: object_array_t): GraphTraversal;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.is(java.util.function.BiPredicate,java.lang.Object)
      is(arg0: BiPredicate, arg1: object_t): GraphTraversal;
      isP(arg0: BiPredicate, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.is(java.lang.Object)
      is(arg0: object_t): GraphTraversal;
      isP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.iterate()
      iterate(): GraphTraversal;
      iterateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.Vertex.iterators()
      iterators(): object_t;
      iteratorsP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.structure.Vertex$Iterators com.tinkerpop.gremlin.structure.Vertex.iterators()
      iterators(): object_t;
      iteratorsP(): Promise<object_t>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.max()
      max(): GraphTraversal;
      maxP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.mean()
      mean(): GraphTraversal;
      meanP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.min()
      min(): GraphTraversal;
      minP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.or(com.tinkerpop.gremlin.process.Traversal<?, ?>...)
      or(...arg0: Traversal[]): GraphTraversal;
      or(arg0: array_t<Traversal>): GraphTraversal;
      orP(...arg0: Traversal[]): Promise<GraphTraversal>;
      orP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.order(com.tinkerpop.gremlin.process.Scope)
      order(arg0: Scope): GraphTraversal;
      orderP(arg0: Scope): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, com.tinkerpop.gremlin.structure.VertexProperty<E2>> com.tinkerpop.gremlin.process.graph.traversal.VertexTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): GraphTraversal;
      // public default <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V,java.lang.Object...)
      property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): VertexProperty;
      property(arg0: string_t, arg1: object_t, arg2: object_array_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<VertexProperty>;
      propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): VertexProperty;
      // public abstract <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t): Promise<VertexProperty>;
      // public default com.tinkerpop.gremlin.structure.Property com.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,java.lang.Object)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.property(java.lang.String)
      property(arg0: string_t): VertexProperty;
      propertyP(arg0: string_t): Promise<VertexProperty>;
      // public default com.tinkerpop.gremlin.structure.Property com.tinkerpop.gremlin.structure.Vertex.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<com.tinkerpop.gremlin.structure.VertexProperty<E2>>>> com.tinkerpop.gremlin.process.graph.traversal.VertexTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public abstract void com.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.singleProperty(java.lang.String,V,java.lang.Object...)
      singleProperty(arg0: string_t, arg1: object_t, ...arg2: object_t[]): VertexProperty;
      singleProperty(arg0: string_t, arg1: object_t, arg2: object_array_t): VertexProperty;
      singlePropertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<VertexProperty>;
      singlePropertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): VertexProperty;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.VertexTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.subgraph(java.lang.String)
      subgraph(arg0: string_t): GraphTraversal;
      subgraphP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.subgraph()
      subgraph(): GraphTraversal;
      subgraphP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: GraphComputer): GraphTraversal;
      submitP(arg0: GraphComputer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): GraphTraversal;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: Predicate): GraphTraversal;
      untilP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, E2> com.tinkerpop.gremlin.process.graph.traversal.VertexTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<E2>>> com.tinkerpop.gremlin.process.graph.traversal.VertexTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<E2>>> com.tinkerpop.gremlin.process.graph.traversal.VertexTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): GraphTraversal;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: Supplier, arg1: UnaryOperator): GraphTraversal;
      withSackP(arg0: Supplier, arg1: UnaryOperator): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: Supplier): GraphTraversal;
      withSackP(arg0: Supplier): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.traversal.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: Supplier): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: Supplier): Promise<GraphTraversal>;
    }
    export module Vertex {
      export interface Static {
        DEFAULT_LABEL: string;
      }
    }
  }

  export module co.redseal.gremlinnode.function_ {
    export interface NegateGlobFunction extends Java.co.redseal.gremlinnode.function_.IdentityGlobFunction {
      // public void co.redseal.gremlinnode.function.IdentityGlobFunction.accept(java.lang.Object,java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public void co.redseal.gremlinnode.function.IdentityGlobFunction.accept(java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public void co.redseal.gremlinnode.function.IdentityGlobFunction.accept(java.lang.Object)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default com.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> com.tinkerpop.gremlin.util.function.TriConsumer.andThen(com.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(co.redseal.gremlinnode.function.GlobFunction)
      andThen(arg0: GlobFunction): GlobFunction;
      andThenP(arg0: GlobFunction): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): GlobFunction;
      andThenP(arg0: BiConsumer): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): GlobFunction;
      andThenP(arg0: Function): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): GlobFunction;
      andThenP(arg0: Consumer): Promise<GlobFunction>;
      // public java.util.function.BiConsumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
      // public java.util.function.BiFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public java.util.function.Function co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public java.util.function.Consumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public java.lang.Object co.redseal.gremlinnode.function.IdentityGlobFunction.apply(java.lang.Object,java.lang.Object)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public java.lang.Object co.redseal.gremlinnode.function.IdentityGlobFunction.apply(java.lang.Object)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Object co.redseal.gremlinnode.function.IdentityGlobFunction.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): GlobFunction;
      negateP(): Promise<GlobFunction>;
      // public java.util.function.BiPredicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public java.util.function.Predicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public boolean co.redseal.gremlinnode.function.NegateGlobFunction.test(java.lang.Object,java.lang.Object)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public boolean co.redseal.gremlinnode.function.NegateGlobFunction.test(java.lang.Object)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String co.redseal.gremlinnode.function.NegateGlobFunction.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module NegateGlobFunction {
      export interface Static {
        new (arg0: GlobFunction): co.redseal.gremlinnode.function_.NegateGlobFunction;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerFactory extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerFactory {
      export interface Static {
        new (): com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory;
        // public static com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.createClassic()
        createClassic(): TinkerGraph;
        createClassicP(): Promise<TinkerGraph>;
        // public static com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.createModern()
        createModern(): TinkerGraph;
        createModernP(): Promise<TinkerGraph>;
        // public static com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.createTheCrew()
        createTheCrew(): TinkerGraph;
        createTheCrewP(): Promise<TinkerGraph>;
        // public static void com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.generateClassic(com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        generateClassic(arg0: TinkerGraph): void;
        generateClassicP(arg0: TinkerGraph): Promise<void>;
        // public static void com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.generateModern(com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        generateModern(arg0: TinkerGraph): void;
        generateModernP(arg0: TinkerGraph): Promise<void>;
        // public static void com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.generateTheCrew(com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        generateTheCrew(arg0: TinkerGraph): void;
        generateTheCrewP(arg0: TinkerGraph): Promise<void>;
      }
    }
  }

  export module javax.script {
    export interface ScriptEngine extends Java.java.lang.Object {
      // public abstract javax.script.Bindings javax.script.ScriptEngine.createBindings()
      createBindings(): Bindings;
      createBindingsP(): Promise<Bindings>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: ScriptContext): object_t;
      evalP(arg0: string_t, arg1: ScriptContext): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: ScriptContext): object_t;
      evalP(arg0: object_t, arg1: ScriptContext): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: Bindings): object_t;
      evalP(arg0: string_t, arg1: Bindings): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: Bindings): object_t;
      evalP(arg0: object_t, arg1: Bindings): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String) throws javax.script.ScriptException
      eval(arg0: string_t): object_t;
      evalP(arg0: string_t): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader) throws javax.script.ScriptException
      eval(arg0: object_t): object_t;
      evalP(arg0: object_t): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.get(java.lang.String)
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public abstract javax.script.Bindings javax.script.ScriptEngine.getBindings(int)
      getBindings(arg0: integer_t): Bindings;
      getBindingsP(arg0: integer_t): Promise<Bindings>;
      // public abstract javax.script.ScriptContext javax.script.ScriptEngine.getContext()
      getContext(): ScriptContext;
      getContextP(): Promise<ScriptContext>;
      // public abstract javax.script.ScriptEngineFactory javax.script.ScriptEngine.getFactory()
      getFactory(): ScriptEngineFactory;
      getFactoryP(): Promise<ScriptEngineFactory>;
      // public abstract void javax.script.ScriptEngine.put(java.lang.String,java.lang.Object)
      put(arg0: string_t, arg1: object_t): void;
      putP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void javax.script.ScriptEngine.setBindings(javax.script.Bindings,int)
      setBindings(arg0: Bindings, arg1: integer_t): void;
      setBindingsP(arg0: Bindings, arg1: integer_t): Promise<void>;
      // public abstract void javax.script.ScriptEngine.setContext(javax.script.ScriptContext)
      setContext(arg0: ScriptContext): void;
      setContextP(arg0: ScriptContext): Promise<void>;
    }
    export module ScriptEngine {
      export interface Static {
        ARGV: string;
        FILENAME: string;
        ENGINE: string;
        ENGINE_VERSION: string;
        NAME: string;
        LANGUAGE: string;
        LANGUAGE_VERSION: string;
      }
    }
  }

  export module javax.script {
    export interface Bindings extends Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      compute(arg0: object_t, arg1: BiFunction): object_t;
      computeP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsent(arg0: object_t, arg1: Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresent(arg0: object_t, arg1: BiFunction): object_t;
      computeIfPresentP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public abstract boolean javax.script.Bindings.containsKey(java.lang.Object)
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySet(): Set;
      entrySetP(): Promise<Set>;
      // public abstract boolean java.util.Map.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract java.lang.Object javax.script.Bindings.get(java.lang.Object)
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Map.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySet(): Set;
      keySetP(): Promise<Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      merge(arg0: object_t, arg1: object_t, arg2: BiFunction): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: BiFunction): Promise<object_t>;
      // public abstract java.lang.Object javax.script.Bindings.put(java.lang.String,java.lang.Object)
      put(arg0: string_t, arg1: object_t): object_t;
      putP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public default java.lang.Object javax.script.Bindings.put(java.lang.Object,java.lang.Object)
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void javax.script.Bindings.putAll(java.util.Map<? extends java.lang.String, ?>)
      putAll(arg0: Map): void;
      putAllP(arg0: Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract java.lang.Object javax.script.Bindings.remove(java.lang.Object)
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAll(arg0: BiFunction): void;
      replaceAllP(arg0: BiFunction): Promise<void>;
      // public abstract int java.util.Map.size()
      size(): number;
      sizeP(): Promise<number>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      values(): Collection;
      valuesP(): Promise<Collection>;
    }
    export module Bindings {
      export interface Static {
      }
    }
  }

  export module javax.script {
    export interface ScriptContext extends Java.java.lang.Object {
      // public abstract java.lang.Object javax.script.ScriptContext.getAttribute(java.lang.String,int)
      getAttribute(arg0: string_t, arg1: integer_t): object_t;
      getAttributeP(arg0: string_t, arg1: integer_t): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptContext.getAttribute(java.lang.String)
      getAttribute(arg0: string_t): object_t;
      getAttributeP(arg0: string_t): Promise<object_t>;
      // public abstract int javax.script.ScriptContext.getAttributesScope(java.lang.String)
      getAttributesScope(arg0: string_t): number;
      getAttributesScopeP(arg0: string_t): Promise<number>;
      // public abstract javax.script.Bindings javax.script.ScriptContext.getBindings(int)
      getBindings(arg0: integer_t): Bindings;
      getBindingsP(arg0: integer_t): Promise<Bindings>;
      // public abstract java.io.Writer javax.script.ScriptContext.getErrorWriter()
      getErrorWriter(): object_t;
      getErrorWriterP(): Promise<object_t>;
      // public abstract java.io.Reader javax.script.ScriptContext.getReader()
      getReader(): object_t;
      getReaderP(): Promise<object_t>;
      // public abstract java.util.List<java.lang.Integer> javax.script.ScriptContext.getScopes()
      getScopes(): List;
      getScopesP(): Promise<List>;
      // public abstract java.io.Writer javax.script.ScriptContext.getWriter()
      getWriter(): object_t;
      getWriterP(): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptContext.removeAttribute(java.lang.String,int)
      removeAttribute(arg0: string_t, arg1: integer_t): object_t;
      removeAttributeP(arg0: string_t, arg1: integer_t): Promise<object_t>;
      // public abstract void javax.script.ScriptContext.setAttribute(java.lang.String,java.lang.Object,int)
      setAttribute(arg0: string_t, arg1: object_t, arg2: integer_t): void;
      setAttributeP(arg0: string_t, arg1: object_t, arg2: integer_t): Promise<void>;
      // public abstract void javax.script.ScriptContext.setBindings(javax.script.Bindings,int)
      setBindings(arg0: Bindings, arg1: integer_t): void;
      setBindingsP(arg0: Bindings, arg1: integer_t): Promise<void>;
      // public abstract void javax.script.ScriptContext.setErrorWriter(java.io.Writer)
      setErrorWriter(arg0: object_t): void;
      setErrorWriterP(arg0: object_t): Promise<void>;
      // public abstract void javax.script.ScriptContext.setReader(java.io.Reader)
      setReader(arg0: object_t): void;
      setReaderP(arg0: object_t): Promise<void>;
      // public abstract void javax.script.ScriptContext.setWriter(java.io.Writer)
      setWriter(arg0: object_t): void;
      setWriterP(arg0: object_t): Promise<void>;
    }
    export module ScriptContext {
      export interface Static {
        ENGINE_SCOPE: number;
        GLOBAL_SCOPE: number;
      }
    }
  }

  export module java.util {
    export interface AbstractMap extends Java.java.lang.Object,Java.java.util.Map {
      // public void java.util.AbstractMap.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      compute(arg0: object_t, arg1: BiFunction): object_t;
      computeP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsent(arg0: object_t, arg1: Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresent(arg0: object_t, arg1: BiFunction): object_t;
      computeIfPresentP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public boolean java.util.AbstractMap.containsKey(java.lang.Object)
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractMap.containsValue(java.lang.Object)
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.AbstractMap.entrySet()
      entrySet(): Set;
      entrySetP(): Promise<Set>;
      // public boolean java.util.AbstractMap.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public V java.util.AbstractMap.get(java.lang.Object)
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public int java.util.AbstractMap.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.AbstractMap.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public java.util.Set<K> java.util.AbstractMap.keySet()
      keySet(): Set;
      keySetP(): Promise<Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      merge(arg0: object_t, arg1: object_t, arg2: BiFunction): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: BiFunction): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public V java.util.AbstractMap.put(K,V)
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public void java.util.AbstractMap.putAll(java.util.Map<? extends K, ? extends V>)
      putAll(arg0: Map): void;
      putAllP(arg0: Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public V java.util.AbstractMap.remove(java.lang.Object)
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAll(arg0: BiFunction): void;
      replaceAllP(arg0: BiFunction): Promise<void>;
      // public int java.util.AbstractMap.size()
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.util.AbstractMap.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public java.util.Collection<V> java.util.AbstractMap.values()
      values(): Collection;
      valuesP(): Promise<Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractMap {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure.strategy {
    export interface GraphStrategy extends Java.java.lang.Object {
      // public default java.util.function.UnaryOperator<com.tinkerpop.gremlin.util.function.TriFunction<java.lang.String, com.tinkerpop.gremlin.structure.Vertex, java.lang.Object[], com.tinkerpop.gremlin.structure.Edge>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getAddEdgeStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getAddEdgeStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getAddEdgeStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Function<java.lang.Object[], com.tinkerpop.gremlin.structure.Vertex>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getAddVertexStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyGraph>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getAddVertexStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getAddVertexStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Function<java.lang.String, com.tinkerpop.gremlin.structure.Property<V>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getEdgeGetPropertyStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyEdge>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getEdgeGetPropertyStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getEdgeGetPropertyStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<com.tinkerpop.gremlin.structure.Graph>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getEdgeGraphStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyEdge>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getEdgeGraphStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getEdgeGraphStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.Object>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getEdgeIdStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyEdge>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getEdgeIdStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getEdgeIdStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Function<java.lang.String[], java.util.Iterator<com.tinkerpop.gremlin.structure.Property<V>>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getEdgeIteratorsPropertyIteratorStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyEdge>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getEdgeIteratorsPropertyIteratorStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getEdgeIteratorsPropertyIteratorStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Function<java.lang.String[], java.util.Iterator<V>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getEdgeIteratorsValueIteratorStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyEdge>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getEdgeIteratorsValueIteratorStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getEdgeIteratorsValueIteratorStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Function<com.tinkerpop.gremlin.structure.Direction, java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getEdgeIteratorsVertexIteratorStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyEdge>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getEdgeIteratorsVertexIteratorStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getEdgeIteratorsVertexIteratorStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<java.util.Set<java.lang.String>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getEdgeKeysStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyEdge>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getEdgeKeysStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getEdgeKeysStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.String>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getEdgeLabelStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyEdge>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getEdgeLabelStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getEdgeLabelStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.BiFunction<java.lang.String, V, com.tinkerpop.gremlin.structure.Property<V>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getEdgePropertyStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyEdge>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getEdgePropertyStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getEdgePropertyStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Function<java.lang.String, V>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getEdgeValueStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyEdge>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getEdgeValueStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getEdgeValueStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.Void>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getGraphCloseStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyGraph>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getGraphCloseStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getGraphCloseStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Function<java.lang.Object[], com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, com.tinkerpop.gremlin.structure.Edge>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getGraphEStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyGraph>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getGraphEStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getGraphEStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Function<java.lang.Object[], java.util.Iterator<com.tinkerpop.gremlin.structure.Edge>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getGraphIteratorsEdgeIteratorStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyGraph>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getGraphIteratorsEdgeIteratorStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getGraphIteratorsEdgeIteratorStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Function<java.lang.Object[], java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getGraphIteratorsVertexIteratorStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyGraph>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getGraphIteratorsVertexIteratorStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getGraphIteratorsVertexIteratorStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Function<java.lang.Object[], com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, com.tinkerpop.gremlin.structure.Vertex>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getGraphVStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyGraph>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getGraphVStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getGraphVStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.String>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getPropertyKeyStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyProperty<V>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getPropertyKeyStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getPropertyKeyStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Supplier<V>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getPropertyValueStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyProperty<V>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getPropertyValueStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getPropertyValueStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.Void>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getRemoveEdgeStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyEdge>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getRemoveEdgeStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getRemoveEdgeStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.Void>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getRemovePropertyStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyProperty<V>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getRemovePropertyStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getRemovePropertyStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.Void>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getRemoveVertexPropertyStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertexProperty<V>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getRemoveVertexPropertyStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getRemoveVertexPropertyStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.Void>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getRemoveVertexStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getRemoveVertexStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getRemoveVertexStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<java.util.Map<java.lang.String, java.lang.Object>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVariableAsMapStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVariables>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVariableAsMapStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVariableAsMapStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <R> java.util.function.UnaryOperator<java.util.function.Function<java.lang.String, java.util.Optional<R>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVariableGetStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVariables>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVariableGetStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVariableGetStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<java.util.Set<java.lang.String>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVariableKeysStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVariables>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVariableKeysStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVariableKeysStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Consumer<java.lang.String>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVariableRemoveStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVariables>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVariableRemoveStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVariableRemoveStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.BiConsumer<java.lang.String, java.lang.Object>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVariableSetStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVariables>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVariableSetStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVariableSetStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Function<java.lang.String, com.tinkerpop.gremlin.structure.VertexProperty<V>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexGetPropertyStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexGetPropertyStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexGetPropertyStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<com.tinkerpop.gremlin.structure.Graph>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexGraphStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexGraphStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexGraphStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.Object>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexIdStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexIdStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexIdStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.BiFunction<com.tinkerpop.gremlin.structure.Direction, java.lang.String[], java.util.Iterator<com.tinkerpop.gremlin.structure.Edge>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexIteratorsEdgeIteratorStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexIteratorsEdgeIteratorStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexIteratorsEdgeIteratorStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Function<java.lang.String[], java.util.Iterator<com.tinkerpop.gremlin.structure.VertexProperty<V>>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexIteratorsPropertyIteratorStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexIteratorsPropertyIteratorStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexIteratorsPropertyIteratorStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Function<java.lang.String[], java.util.Iterator<V>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexIteratorsValueIteratorStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexIteratorsValueIteratorStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexIteratorsValueIteratorStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.BiFunction<com.tinkerpop.gremlin.structure.Direction, java.lang.String[], java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexIteratorsVertexIteratorStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexIteratorsVertexIteratorStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexIteratorsVertexIteratorStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<java.util.Set<java.lang.String>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexKeysStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexKeysStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexKeysStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.String>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexLabelStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexLabelStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexLabelStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Supplier<com.tinkerpop.gremlin.structure.Vertex>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexPropertyGetElementStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertexProperty<V>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexPropertyGetElementStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexPropertyGetElementStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Supplier<com.tinkerpop.gremlin.structure.Graph>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexPropertyGraphStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertexProperty<V>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexPropertyGraphStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexPropertyGraphStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.Object>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexPropertyIdStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertexProperty<V>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexPropertyIdStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexPropertyIdStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V,U> java.util.function.UnaryOperator<java.util.function.Function<java.lang.String[], java.util.Iterator<com.tinkerpop.gremlin.structure.Property<V>>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexPropertyIteratorsPropertyIteratorStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertexProperty<U>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexPropertyIteratorsPropertyIteratorStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexPropertyIteratorsPropertyIteratorStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V,U> java.util.function.UnaryOperator<java.util.function.Function<java.lang.String[], java.util.Iterator<V>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexPropertyIteratorsValueIteratorStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertexProperty<U>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexPropertyIteratorsValueIteratorStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexPropertyIteratorsValueIteratorStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Supplier<java.util.Set<java.lang.String>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexPropertyKeysStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertexProperty<V>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexPropertyKeysStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexPropertyKeysStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.String>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexPropertyKeyStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertexProperty<V>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexPropertyKeyStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexPropertyKeyStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Supplier<java.lang.String>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexPropertyLabelStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertexProperty<V>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexPropertyLabelStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexPropertyLabelStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V,U> java.util.function.UnaryOperator<java.util.function.BiFunction<java.lang.String, V, com.tinkerpop.gremlin.structure.Property<V>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexPropertyPropertyStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertexProperty<U>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexPropertyPropertyStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexPropertyPropertyStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.BiFunction<java.lang.String, V, com.tinkerpop.gremlin.structure.VertexProperty<V>>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexPropertyStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexPropertyStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexPropertyStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Supplier<V>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexPropertyValueStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertexProperty<V>>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexPropertyValueStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexPropertyValueStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
      // public default <V> java.util.function.UnaryOperator<java.util.function.Function<java.lang.String, V>> com.tinkerpop.gremlin.structure.strategy.GraphStrategy.getVertexValueStrategy(com.tinkerpop.gremlin.structure.strategy.StrategyContext<com.tinkerpop.gremlin.structure.strategy.StrategyVertex>,com.tinkerpop.gremlin.structure.strategy.GraphStrategy)
      getVertexValueStrategy(arg0: StrategyContext, arg1: GraphStrategy): UnaryOperator;
      getVertexValueStrategyP(arg0: StrategyContext, arg1: GraphStrategy): Promise<UnaryOperator>;
    }
    export module GraphStrategy {
      export interface Static {
      }
    }
  }

  export module groovy.lang {
    export interface MetaProperty extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int groovy.lang.MetaProperty.getModifiers()
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public java.lang.String groovy.lang.MetaProperty.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public abstract java.lang.Object groovy.lang.MetaProperty.getProperty(java.lang.Object)
      getProperty(arg0: object_t): object_t;
      getPropertyP(arg0: object_t): Promise<object_t>;
      // public java.lang.Class groovy.lang.MetaProperty.getType()
      getType(): Class;
      getTypeP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void groovy.lang.MetaProperty.setProperty(java.lang.Object,java.lang.Object)
      setProperty(arg0: object_t, arg1: object_t): void;
      setPropertyP(arg0: object_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MetaProperty {
      export interface Static {
        new (arg0: string_t, arg1: Class): groovy.lang.MetaProperty;
        // public static java.lang.String groovy.lang.MetaProperty.getGetterName(java.lang.String,java.lang.Class)
        getGetterName(arg0: string_t, arg1: Class): string;
        getGetterNameP(arg0: string_t, arg1: Class): Promise<string>;
        // public static java.lang.String groovy.lang.MetaProperty.getSetterName(java.lang.String)
        getSetterName(arg0: string_t): string;
        getSetterNameP(arg0: string_t): Promise<string>;
        PROPERTY_SET_PREFIX: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph extends Java.java.lang.Object {
      // public abstract com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.Object...)
      addVertex(...arg0: object_t[]): Vertex;
      addVertex(arg0: object_array_t): Vertex;
      addVertexP(...arg0: object_t[]): Promise<Vertex>;
      addVertexP(arg0: object_array_t): Vertex;
      // public default com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.String)
      addVertex(arg0: string_t): Vertex;
      addVertexP(arg0: string_t): Promise<Vertex>;
      // public abstract void java.lang.AutoCloseable.close() throws java.lang.Exception
      close(): void;
      closeP(): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.computer.GraphComputer com.tinkerpop.gremlin.structure.Graph.compute(java.lang.Class...)
      compute(...arg0: Class[]): GraphComputer;
      compute(arg0: array_t<Class>): GraphComputer;
      computeP(...arg0: Class[]): Promise<GraphComputer>;
      computeP(arg0: array_t<Class>): GraphComputer;
      // public abstract org.apache.commons.configuration.Configuration com.tinkerpop.gremlin.structure.Graph.configuration()
      configuration(): object_t;
      configurationP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.structure.Graph.E(java.lang.Object...)
      E(...arg0: object_t[]): GraphTraversal;
      E(arg0: object_array_t): GraphTraversal;
      EP(...arg0: object_t[]): Promise<GraphTraversal>;
      EP(arg0: object_array_t): GraphTraversal;
      // public default com.tinkerpop.gremlin.structure.Graph$Features com.tinkerpop.gremlin.structure.Graph.features()
      features(): object_t;
      featuresP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.structure.Graph$Io com.tinkerpop.gremlin.structure.Graph.io()
      io(): object_t;
      ioP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.structure.Graph$Iterators com.tinkerpop.gremlin.structure.Graph.iterators()
      iterators(): object_t;
      iteratorsP(): Promise<object_t>;
      // public default <T,S> T com.tinkerpop.gremlin.structure.Graph.of(java.lang.Class<T>)
      of(arg0: Class): Traversal;
      ofP(arg0: Class): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.structure.strategy.StrategyGraph com.tinkerpop.gremlin.structure.Graph.strategy(com.tinkerpop.gremlin.structure.strategy.GraphStrategy...)
      strategy(...arg0: GraphStrategy[]): StrategyGraph;
      strategy(arg0: array_t<GraphStrategy>): StrategyGraph;
      strategyP(...arg0: GraphStrategy[]): Promise<StrategyGraph>;
      strategyP(arg0: array_t<GraphStrategy>): StrategyGraph;
      // public abstract com.tinkerpop.gremlin.structure.Transaction com.tinkerpop.gremlin.structure.Graph.tx()
      tx(): Transaction;
      txP(): Promise<Transaction>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.Graph.V(java.lang.Object...)
      V(...arg0: object_t[]): GraphTraversal;
      V(arg0: object_array_t): GraphTraversal;
      VP(...arg0: object_t[]): Promise<GraphTraversal>;
      VP(arg0: object_array_t): GraphTraversal;
      // public abstract com.tinkerpop.gremlin.structure.Graph$Variables com.tinkerpop.gremlin.structure.Graph.variables()
      variables(): object_t;
      variablesP(): Promise<object_t>;
    }
    export module Graph {
      export interface Static {
        GRAPH: string;
      }
    }
  }

  export module java.util.function_ {
    export interface BiPredicate extends Java.java.lang.Object {
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public abstract boolean java.util.function.BiPredicate.test(T,U)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
    }
    export module BiPredicate {
      export interface Static {
      }
    }
  }

  export module javax.script {
    export interface AbstractScriptEngine extends Java.java.lang.Object,Java.javax.script.ScriptEngine {
      // public abstract javax.script.Bindings javax.script.ScriptEngine.createBindings()
      createBindings(): Bindings;
      createBindingsP(): Promise<Bindings>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: ScriptContext): object_t;
      evalP(arg0: string_t, arg1: ScriptContext): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: ScriptContext): object_t;
      evalP(arg0: object_t, arg1: ScriptContext): Promise<object_t>;
      // public java.lang.Object javax.script.AbstractScriptEngine.eval(java.lang.String,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: Bindings): object_t;
      evalP(arg0: string_t, arg1: Bindings): Promise<object_t>;
      // public java.lang.Object javax.script.AbstractScriptEngine.eval(java.io.Reader,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: Bindings): object_t;
      evalP(arg0: object_t, arg1: Bindings): Promise<object_t>;
      // public java.lang.Object javax.script.AbstractScriptEngine.eval(java.lang.String) throws javax.script.ScriptException
      eval(arg0: string_t): object_t;
      evalP(arg0: string_t): Promise<object_t>;
      // public java.lang.Object javax.script.AbstractScriptEngine.eval(java.io.Reader) throws javax.script.ScriptException
      eval(arg0: object_t): object_t;
      evalP(arg0: object_t): Promise<object_t>;
      // public java.lang.Object javax.script.AbstractScriptEngine.get(java.lang.String)
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public javax.script.Bindings javax.script.AbstractScriptEngine.getBindings(int)
      getBindings(arg0: integer_t): Bindings;
      getBindingsP(arg0: integer_t): Promise<Bindings>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public javax.script.ScriptContext javax.script.AbstractScriptEngine.getContext()
      getContext(): ScriptContext;
      getContextP(): Promise<ScriptContext>;
      // public abstract javax.script.ScriptEngineFactory javax.script.ScriptEngine.getFactory()
      getFactory(): ScriptEngineFactory;
      getFactoryP(): Promise<ScriptEngineFactory>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void javax.script.AbstractScriptEngine.put(java.lang.String,java.lang.Object)
      put(arg0: string_t, arg1: object_t): void;
      putP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void javax.script.AbstractScriptEngine.setBindings(javax.script.Bindings,int)
      setBindings(arg0: Bindings, arg1: integer_t): void;
      setBindingsP(arg0: Bindings, arg1: integer_t): Promise<void>;
      // public void javax.script.AbstractScriptEngine.setContext(javax.script.ScriptContext)
      setContext(arg0: ScriptContext): void;
      setContextP(arg0: ScriptContext): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractScriptEngine {
      export interface Static {
        new (arg0: Bindings): javax.script.AbstractScriptEngine;
        new (): javax.script.AbstractScriptEngine;
        ARGV: string;
        FILENAME: string;
        ENGINE: string;
        ENGINE_VERSION: string;
        NAME: string;
        LANGUAGE: string;
        LANGUAGE_VERSION: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Order extends Java.java.lang.Enum,Java.java.util.Comparator {
      // public abstract int com.tinkerpop.gremlin.structure.Order.compare(java.lang.Object,java.lang.Object)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public final boolean java.lang.Enum.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public final int java.lang.Enum.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract com.tinkerpop.gremlin.structure.Order com.tinkerpop.gremlin.structure.Order.opposite()
      opposite(): Order;
      oppositeP(): Promise<Order>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): Comparator;
      reversedP(): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: Comparator): Comparator;
      thenComparingP(arg0: Function, arg1: Comparator): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): Comparator;
      thenComparingP(arg0: Function): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: Comparator): Comparator;
      thenComparingP(arg0: Comparator): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): Comparator;
      thenComparingDoubleP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): Comparator;
      thenComparingIntP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): Comparator;
      thenComparingLongP(arg0: object_t): Promise<Comparator>;
      // public java.lang.String java.lang.Enum.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Order {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.structure.Order com.tinkerpop.gremlin.structure.Order.valueOf(java.lang.String)
        valueOf(arg0: string_t): Order;
        valueOfP(arg0: string_t): Promise<Order>;
        // public static com.tinkerpop.gremlin.structure.Order[] com.tinkerpop.gremlin.structure.Order.values()
        values(): Order[];
        valuesP(): Promise<Order[]>;
        incr: Order;
        decr: Order;
        keyIncr: Order;
        valueIncr: Order;
        keyDecr: Order;
        valueDecr: Order;
        shuffle: Order;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONMapper extends Java.java.lang.Object {
      // public com.fasterxml.jackson.databind.ObjectMapper com.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper.createMapper()
      createMapper(): object_t;
      createMapperP(): Promise<object_t>;
      // public java.lang.Object com.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper.createMapper()
      createMapper(): object_t;
      createMapperP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONMapper {
      export interface Static {
        // public static com.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder com.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper.build()
        build(): object_t;
        buildP(): Promise<object_t>;
      }
    }
  }

  export module java.util {
    export interface NoSuchElementException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Throwable.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module NoSuchElementException {
      export interface Static {
        new (arg0: string_t): java.util.NoSuchElementException;
        new (): java.util.NoSuchElementException;
      }
    }
  }

  export module java.util.function_ {
    export interface BinaryOperator extends Java.java.util.function_.BiFunction {
      // public default <V> java.util.function.BiFunction<T, U, V> java.util.function.BiFunction.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public abstract R java.util.function.BiFunction.apply(T,U)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
    }
    export module BinaryOperator {
      export interface Static {
        // public static <T> java.util.function.BinaryOperator<T> java.util.function.BinaryOperator.maxBy(java.util.Comparator<? super T>)
        maxBy(arg0: Comparator): BinaryOperator;
        maxByP(arg0: Comparator): Promise<BinaryOperator>;
        // public static <T> java.util.function.BinaryOperator<T> java.util.function.BinaryOperator.minBy(java.util.Comparator<? super T>)
        minBy(arg0: Comparator): BinaryOperator;
        minByP(arg0: Comparator): Promise<BinaryOperator>;
      }
    }
  }

  export module co.redseal.gremlinnode.function_ {
    export interface GroovyLambda extends Java.co.redseal.gremlinnode.function_.AbstractGlobFunction {
      // public void co.redseal.gremlinnode.function.GroovyLambda.accept(java.lang.Object,java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public void co.redseal.gremlinnode.function.GroovyLambda.accept(java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public void co.redseal.gremlinnode.function.GroovyLambda.accept(java.lang.Object)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default com.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> com.tinkerpop.gremlin.util.function.TriConsumer.andThen(com.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GroovyLambda.andThen(co.redseal.gremlinnode.function.GlobFunction)
      andThen(arg0: GlobFunction): GlobFunction;
      andThenP(arg0: GlobFunction): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GroovyLambda.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): GlobFunction;
      andThenP(arg0: BiConsumer): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GroovyLambda.andThen(java.util.function.Function)
      andThen(arg0: Function): GlobFunction;
      andThenP(arg0: Function): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GroovyLambda.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): GlobFunction;
      andThenP(arg0: Consumer): Promise<GlobFunction>;
      // public java.util.function.BiConsumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
      // public java.util.function.BiFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public java.util.function.Function co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public java.util.function.Consumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public java.lang.Object co.redseal.gremlinnode.function.GroovyLambda.apply(java.lang.Object,java.lang.Object)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public java.lang.Object co.redseal.gremlinnode.function.GroovyLambda.apply(java.lang.Object)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Object co.redseal.gremlinnode.function.GroovyLambda.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GroovyLambda.negate()
      negate(): GlobFunction;
      negateP(): Promise<GlobFunction>;
      // public java.util.function.BiPredicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public java.util.function.Predicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public boolean co.redseal.gremlinnode.function.GroovyLambda.test(java.lang.Object,java.lang.Object)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public boolean co.redseal.gremlinnode.function.GroovyLambda.test(java.lang.Object)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String co.redseal.gremlinnode.function.GroovyLambda.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GroovyLambda {
      export interface Static {
        new (arg0: string_t, arg1: ScriptEngine): co.redseal.gremlinnode.function_.GroovyLambda;
        new (arg0: string_t): co.redseal.gremlinnode.function_.GroovyLambda;
        // public static javax.script.ScriptEngine co.redseal.gremlinnode.function.GroovyLambda.getDefaultEngine()
        getDefaultEngine(): ScriptEngine;
        getDefaultEngineP(): Promise<ScriptEngine>;
      }
    }
  }

  export module groovy.lang {
    export interface Closure extends Java.groovy.lang.GroovyObjectSupport {
      // public groovy.lang.Closure groovy.lang.Closure.asWritable()
      asWritable(): Closure;
      asWritableP(): Promise<Closure>;
      // public V groovy.lang.Closure.call(java.lang.Object...)
      call(...arg0: object_t[]): object_t;
      call(arg0: object_array_t): object_t;
      callP(...arg0: object_t[]): Promise<object_t>;
      callP(arg0: object_array_t): object_t;
      // public V groovy.lang.Closure.call(java.lang.Object)
      call(arg0: object_t): object_t;
      callP(arg0: object_t): Promise<object_t>;
      // public V groovy.lang.Closure.call()
      call(): object_t;
      callP(): Promise<object_t>;
      // public java.lang.Object groovy.lang.Closure.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.curry(java.lang.Object...)
      curry(...arg0: object_t[]): Closure;
      curry(arg0: object_array_t): Closure;
      curryP(...arg0: object_t[]): Promise<Closure>;
      curryP(arg0: object_array_t): Closure;
      // public groovy.lang.Closure<V> groovy.lang.Closure.curry(java.lang.Object)
      curry(arg0: object_t): Closure;
      curryP(arg0: object_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.dehydrate()
      dehydrate(): Closure;
      dehydrateP(): Promise<Closure>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.Object groovy.lang.Closure.getDelegate()
      getDelegate(): object_t;
      getDelegateP(): Promise<object_t>;
      // public int groovy.lang.Closure.getDirective()
      getDirective(): number;
      getDirectiveP(): Promise<number>;
      // public int groovy.lang.Closure.getMaximumNumberOfParameters()
      getMaximumNumberOfParameters(): number;
      getMaximumNumberOfParametersP(): Promise<number>;
      // public groovy.lang.MetaClass groovy.lang.GroovyObjectSupport.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object groovy.lang.Closure.getOwner()
      getOwner(): object_t;
      getOwnerP(): Promise<object_t>;
      // public java.lang.Class[] groovy.lang.Closure.getParameterTypes()
      getParameterTypes(): Class[];
      getParameterTypesP(): Promise<Class[]>;
      // public java.lang.Object groovy.lang.Closure.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public int groovy.lang.Closure.getResolveStrategy()
      getResolveStrategy(): number;
      getResolveStrategyP(): Promise<number>;
      // public java.lang.Object groovy.lang.Closure.getThisObject()
      getThisObject(): object_t;
      getThisObjectP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public boolean groovy.lang.Closure.isCase(java.lang.Object)
      isCase(arg0: object_t): boolean;
      isCaseP(arg0: object_t): Promise<boolean>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.leftShift(groovy.lang.Closure)
      leftShift(arg0: Closure): Closure;
      leftShiftP(arg0: Closure): Promise<Closure>;
      // public V groovy.lang.Closure.leftShift(java.lang.Object)
      leftShift(arg0: object_t): object_t;
      leftShiftP(arg0: object_t): Promise<object_t>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.memoize()
      memoize(): Closure;
      memoizeP(): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.memoizeAtLeast(int)
      memoizeAtLeast(arg0: integer_t): Closure;
      memoizeAtLeastP(arg0: integer_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.memoizeAtMost(int)
      memoizeAtMost(arg0: integer_t): Closure;
      memoizeAtMostP(arg0: integer_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.memoizeBetween(int,int)
      memoizeBetween(arg0: integer_t, arg1: integer_t): Closure;
      memoizeBetweenP(arg0: integer_t, arg1: integer_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.ncurry(int,java.lang.Object...)
      ncurry(arg0: integer_t, ...arg1: object_t[]): Closure;
      ncurry(arg0: integer_t, arg1: object_array_t): Closure;
      ncurryP(arg0: integer_t, ...arg1: object_t[]): Promise<Closure>;
      ncurryP(arg0: integer_t, arg1: object_array_t): Closure;
      // public groovy.lang.Closure<V> groovy.lang.Closure.ncurry(int,java.lang.Object)
      ncurry(arg0: integer_t, arg1: object_t): Closure;
      ncurryP(arg0: integer_t, arg1: object_t): Promise<Closure>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.rcurry(java.lang.Object...)
      rcurry(...arg0: object_t[]): Closure;
      rcurry(arg0: object_array_t): Closure;
      rcurryP(...arg0: object_t[]): Promise<Closure>;
      rcurryP(arg0: object_array_t): Closure;
      // public groovy.lang.Closure<V> groovy.lang.Closure.rcurry(java.lang.Object)
      rcurry(arg0: object_t): Closure;
      rcurryP(arg0: object_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.rehydrate(java.lang.Object,java.lang.Object,java.lang.Object)
      rehydrate(arg0: object_t, arg1: object_t, arg2: object_t): Closure;
      rehydrateP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<Closure>;
      // public <W> groovy.lang.Closure<W> groovy.lang.Closure.rightShift(groovy.lang.Closure<W>)
      rightShift(arg0: Closure): Closure;
      rightShiftP(arg0: Closure): Promise<Closure>;
      // public void groovy.lang.Closure.run()
      run(): void;
      runP(): Promise<void>;
      // public void groovy.lang.Closure.setDelegate(java.lang.Object)
      setDelegate(arg0: object_t): void;
      setDelegateP(arg0: object_t): Promise<void>;
      // public void groovy.lang.Closure.setDirective(int)
      setDirective(arg0: integer_t): void;
      setDirectiveP(arg0: integer_t): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void groovy.lang.Closure.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void groovy.lang.Closure.setResolveStrategy(int)
      setResolveStrategy(arg0: integer_t): void;
      setResolveStrategyP(arg0: integer_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.trampoline(java.lang.Object...)
      trampoline(...arg0: object_t[]): Closure;
      trampoline(arg0: object_array_t): Closure;
      trampolineP(...arg0: object_t[]): Promise<Closure>;
      trampolineP(arg0: object_array_t): Closure;
      // public groovy.lang.Closure<V> groovy.lang.Closure.trampoline()
      trampoline(): Closure;
      trampolineP(): Promise<Closure>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Closure {
      export interface Static {
        new (arg0: object_t, arg1: object_t): groovy.lang.Closure;
        new (arg0: object_t): groovy.lang.Closure;
        OWNER_FIRST: number;
        DELEGATE_FIRST: number;
        OWNER_ONLY: number;
        DELEGATE_ONLY: number;
        TO_SELF: number;
        DONE: number;
        SKIP: number;
        IDENTITY: Closure;
      }
    }
  }

  export module org.codehaus.groovy.runtime {
    export interface NullObject extends Java.groovy.lang.GroovyObjectSupport {
      // public boolean org.codehaus.groovy.runtime.NullObject.asBoolean()
      asBoolean(): boolean;
      asBooleanP(): Promise<boolean>;
      // public java.lang.Object org.codehaus.groovy.runtime.NullObject.asType(java.lang.Class)
      asType(arg0: Class): object_t;
      asTypeP(arg0: Class): Promise<object_t>;
      // public java.lang.Object org.codehaus.groovy.runtime.NullObject.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean org.codehaus.groovy.runtime.NullObject.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public groovy.lang.MetaClass groovy.lang.GroovyObjectSupport.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object org.codehaus.groovy.runtime.NullObject.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public int org.codehaus.groovy.runtime.NullObject.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Object org.codehaus.groovy.runtime.NullObject.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public boolean org.codehaus.groovy.runtime.NullObject.is(java.lang.Object)
      is(arg0: object_t): boolean;
      isP(arg0: object_t): Promise<boolean>;
      // public java.util.Iterator org.codehaus.groovy.runtime.NullObject.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.Object org.codehaus.groovy.runtime.NullObject.plus(java.lang.String)
      plus(arg0: string_t): object_t;
      plusP(arg0: string_t): Promise<object_t>;
      // public java.lang.Object org.codehaus.groovy.runtime.NullObject.plus(java.lang.Object)
      plus(arg0: object_t): object_t;
      plusP(arg0: object_t): Promise<object_t>;
      // public void groovy.lang.GroovyObjectSupport.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void org.codehaus.groovy.runtime.NullObject.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String org.codehaus.groovy.runtime.NullObject.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public <T> T org.codehaus.groovy.runtime.NullObject.with(groovy.lang.Closure<T>)
      with(arg0: Closure): object_t;
      withP(arg0: Closure): Promise<object_t>;
    }
    export module NullObject {
      export interface Static {
        // public static org.codehaus.groovy.runtime.NullObject org.codehaus.groovy.runtime.NullObject.getNullObject()
        getNullObject(): NullObject;
        getNullObjectP(): Promise<NullObject>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface Scope extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public final boolean java.lang.Enum.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public final int java.lang.Enum.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Enum.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Scope {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.process.Scope com.tinkerpop.gremlin.process.Scope.valueOf(java.lang.String)
        valueOf(arg0: string_t): Scope;
        valueOfP(arg0: string_t): Promise<Scope>;
        // public static com.tinkerpop.gremlin.process.Scope[] com.tinkerpop.gremlin.process.Scope.values()
        values(): Scope[];
        valuesP(): Promise<Scope[]>;
        global: Scope;
        local: Scope;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface BulkSet extends Java.java.util.AbstractSet,Java.java.util.Set {
      // public boolean com.tinkerpop.gremlin.process.util.BulkSet.add(S,long)
      add(arg0: object_t, arg1: long_t): boolean;
      addP(arg0: object_t, arg1: long_t): Promise<boolean>;
      // public boolean com.tinkerpop.gremlin.process.util.BulkSet.add(S)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public boolean com.tinkerpop.gremlin.process.util.BulkSet.addAll(java.util.Collection<? extends S>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public void com.tinkerpop.gremlin.process.util.BulkSet.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public boolean com.tinkerpop.gremlin.process.util.BulkSet.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.AbstractCollection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean com.tinkerpop.gremlin.process.util.BulkSet.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void com.tinkerpop.gremlin.process.util.BulkSet.forEach(java.util.function.BiConsumer<S, java.lang.Long>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public long com.tinkerpop.gremlin.process.util.BulkSet.get(S)
      get(arg0: object_t): longValue_t;
      getP(arg0: object_t): Promise<longValue_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int com.tinkerpop.gremlin.process.util.BulkSet.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean com.tinkerpop.gremlin.process.util.BulkSet.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public java.util.Iterator<S> com.tinkerpop.gremlin.process.util.BulkSet.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public long com.tinkerpop.gremlin.process.util.BulkSet.longSize()
      longSize(): longValue_t;
      longSizeP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public boolean com.tinkerpop.gremlin.process.util.BulkSet.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public boolean com.tinkerpop.gremlin.process.util.BulkSet.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public boolean java.util.AbstractCollection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public int com.tinkerpop.gremlin.process.util.BulkSet.size()
      size(): number;
      sizeP(): Promise<number>;
      // public java.util.Spliterator<S> com.tinkerpop.gremlin.process.util.BulkSet.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public <T> T[] java.util.AbstractCollection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.Object[] java.util.AbstractCollection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String com.tinkerpop.gremlin.process.util.BulkSet.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public int com.tinkerpop.gremlin.process.util.BulkSet.uniqueSize()
      uniqueSize(): number;
      uniqueSizeP(): Promise<number>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module BulkSet {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.util.BulkSet;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface T extends Java.java.lang.Enum,Java.java.util.function_.Function {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public abstract java.lang.Object com.tinkerpop.gremlin.process.T.apply(com.tinkerpop.gremlin.structure.Element)
      apply(arg0: Element): object_t;
      applyP(arg0: Element): Promise<object_t>;
      // public java.lang.Object com.tinkerpop.gremlin.process.T.apply(java.lang.Object)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public final boolean java.lang.Enum.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.String com.tinkerpop.gremlin.process.T.getAccessor()
      getAccessor(): string;
      getAccessorP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public final int java.lang.Enum.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Enum.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module T {
      export interface Static {
        // public static com.tinkerpop.gremlin.process.T com.tinkerpop.gremlin.process.T.fromString(java.lang.String)
        fromString(arg0: string_t): T;
        fromStringP(arg0: string_t): Promise<T>;
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.process.T com.tinkerpop.gremlin.process.T.valueOf(java.lang.String)
        valueOf(arg0: string_t): T;
        valueOfP(arg0: string_t): Promise<T>;
        // public static com.tinkerpop.gremlin.process.T[] com.tinkerpop.gremlin.process.T.values()
        values(): T[];
        valuesP(): Promise<T[]>;
        label: T;
        id: T;
        key: T;
        value: T;
      }
    }
  }

  export module com.tinkerpop.gremlin.groovy.jsr223 {
    export interface GremlinGroovyScriptEngine extends Java.javax.script.AbstractScriptEngine {
      // public synchronized void com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.addImports(java.util.Set<java.lang.String>)
      addImports(arg0: Set): void;
      addImportsP(arg0: Set): Promise<void>;
      // public void com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.close() throws java.lang.Exception
      close(): void;
      closeP(): Promise<void>;
      // public javax.script.CompiledScript com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.compile(java.lang.String) throws javax.script.ScriptException
      compile(arg0: string_t): CompiledScript;
      compileP(arg0: string_t): Promise<CompiledScript>;
      // public javax.script.CompiledScript com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.compile(java.io.Reader) throws javax.script.ScriptException
      compile(arg0: object_t): CompiledScript;
      compileP(arg0: object_t): Promise<CompiledScript>;
      // public javax.script.Bindings com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.createBindings()
      createBindings(): Bindings;
      createBindingsP(): Promise<Bindings>;
      // public java.util.Map[] com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.dependencies()
      dependencies(): Map[];
      dependenciesP(): Promise<Map[]>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Object com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.eval(java.lang.String,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: ScriptContext): object_t;
      evalP(arg0: string_t, arg1: ScriptContext): Promise<object_t>;
      // public java.lang.Object com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.eval(java.io.Reader,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: ScriptContext): object_t;
      evalP(arg0: object_t, arg1: ScriptContext): Promise<object_t>;
      // public java.lang.Object javax.script.AbstractScriptEngine.eval(java.lang.String,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: Bindings): object_t;
      evalP(arg0: string_t, arg1: Bindings): Promise<object_t>;
      // public java.lang.Object javax.script.AbstractScriptEngine.eval(java.io.Reader,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: Bindings): object_t;
      evalP(arg0: object_t, arg1: Bindings): Promise<object_t>;
      // public java.lang.Object javax.script.AbstractScriptEngine.eval(java.lang.String) throws javax.script.ScriptException
      eval(arg0: string_t): object_t;
      evalP(arg0: string_t): Promise<object_t>;
      // public java.lang.Object javax.script.AbstractScriptEngine.eval(java.io.Reader) throws javax.script.ScriptException
      eval(arg0: object_t): object_t;
      evalP(arg0: object_t): Promise<object_t>;
      // public java.lang.Object javax.script.AbstractScriptEngine.get(java.lang.String)
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public javax.script.Bindings javax.script.AbstractScriptEngine.getBindings(int)
      getBindings(arg0: integer_t): Bindings;
      getBindingsP(arg0: integer_t): Promise<Bindings>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public groovy.lang.GroovyClassLoader org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getClassLoader()
      getClassLoader(): GroovyClassLoader;
      getClassLoaderP(): Promise<GroovyClassLoader>;
      // public javax.script.ScriptContext javax.script.AbstractScriptEngine.getContext()
      getContext(): ScriptContext;
      getContextP(): Promise<ScriptContext>;
      // public javax.script.ScriptEngineFactory com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.getFactory()
      getFactory(): ScriptEngineFactory;
      getFactoryP(): Promise<ScriptEngineFactory>;
      // public <T> T com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.getInterface(java.lang.Object,java.lang.Class<T>)
      getInterface(arg0: object_t, arg1: Class): object_t;
      getInterfaceP(arg0: object_t, arg1: Class): Promise<object_t>;
      // public <T> T com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.getInterface(java.lang.Class<T>)
      getInterface(arg0: Class): object_t;
      getInterfaceP(arg0: Class): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.imports()
      imports(): Map;
      importsP(): Promise<Map>;
      // public java.lang.Object com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.invokeFunction(java.lang.String,java.lang.Object[]) throws javax.script.ScriptException,java.lang.NoSuchMethodException
      invokeFunction(arg0: string_t, arg1: object_array_t): object_t;
      invokeFunctionP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
      // public java.lang.Object com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) throws javax.script.ScriptException,java.lang.NoSuchMethodException
      invokeMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public void com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.loadPlugins(java.util.List<com.tinkerpop.gremlin.groovy.plugin.GremlinPlugin>) throws com.tinkerpop.gremlin.groovy.plugin.GremlinPluginException
      loadPlugins(arg0: List): void;
      loadPluginsP(arg0: List): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.util.Set com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.plugins()
      plugins(): Set;
      pluginsP(): Promise<Set>;
      // public void javax.script.AbstractScriptEngine.put(java.lang.String,java.lang.Object)
      put(arg0: string_t, arg1: object_t): void;
      putP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public void javax.script.AbstractScriptEngine.setBindings(javax.script.Bindings,int)
      setBindings(arg0: Bindings, arg1: integer_t): void;
      setBindingsP(arg0: Bindings, arg1: integer_t): Promise<void>;
      // public void org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.setClassLoader(groovy.lang.GroovyClassLoader)
      setClassLoader(arg0: GroovyClassLoader): void;
      setClassLoaderP(arg0: GroovyClassLoader): Promise<void>;
      // public void javax.script.AbstractScriptEngine.setContext(javax.script.ScriptContext)
      setContext(arg0: ScriptContext): void;
      setContextP(arg0: ScriptContext): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public synchronized java.util.List<com.tinkerpop.gremlin.groovy.plugin.GremlinPlugin> com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.use(java.lang.String,java.lang.String,java.lang.String)
      use(arg0: string_t, arg1: string_t, arg2: string_t): List;
      useP(arg0: string_t, arg1: string_t, arg2: string_t): Promise<List>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GremlinGroovyScriptEngine {
      export interface Static {
        new (arg0: object_t, arg1: object_t): com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
        new (arg0: object_t): com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
        new (): com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
        KEY_REFERENCE_TYPE: string;
        REFERENCE_TYPE_PHANTOM: string;
        REFERENCE_TYPE_WEAK: string;
        REFERENCE_TYPE_SOFT: string;
        REFERENCE_TYPE_HARD: string;
        ARGV: string;
        FILENAME: string;
        ENGINE: string;
        ENGINE_VERSION: string;
        NAME: string;
        LANGUAGE: string;
        LANGUAGE_VERSION: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.structure.Graph {
      // public com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.addVertex(java.lang.Object...)
      addVertex(...arg0: object_t[]): Vertex;
      addVertex(arg0: object_array_t): Vertex;
      addVertexP(...arg0: object_t[]): Promise<Vertex>;
      addVertexP(arg0: object_array_t): Vertex;
      // public default com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.String)
      addVertex(arg0: string_t): Vertex;
      addVertexP(arg0: string_t): Promise<Vertex>;
      // public void com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public void com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.close()
      close(): void;
      closeP(): Promise<void>;
      // public com.tinkerpop.gremlin.process.computer.GraphComputer com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.compute(java.lang.Class...)
      compute(...arg0: Class[]): GraphComputer;
      compute(arg0: array_t<Class>): GraphComputer;
      computeP(...arg0: Class[]): Promise<GraphComputer>;
      computeP(arg0: array_t<Class>): GraphComputer;
      // public org.apache.commons.configuration.Configuration com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.configuration()
      configuration(): object_t;
      configurationP(): Promise<object_t>;
      // public <E> void com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.createIndex(java.lang.String,java.lang.Class<E>)
      createIndex(arg0: string_t, arg1: Class): void;
      createIndexP(arg0: string_t, arg1: Class): Promise<void>;
      // public void com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.dropGraphView()
      dropGraphView(): void;
      dropGraphViewP(): Promise<void>;
      // public <E> void com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.dropIndex(java.lang.String,java.lang.Class<E>)
      dropIndex(arg0: string_t, arg1: Class): void;
      dropIndexP(arg0: string_t, arg1: Class): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.structure.Graph.E(java.lang.Object...)
      E(...arg0: object_t[]): GraphTraversal;
      E(arg0: object_array_t): GraphTraversal;
      EP(...arg0: object_t[]): Promise<GraphTraversal>;
      EP(arg0: object_array_t): GraphTraversal;
      // public java.util.Iterator<com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.edgeIterator(java.lang.Object...)
      edgeIterator(...arg0: object_t[]): Iterator;
      edgeIterator(arg0: object_array_t): Iterator;
      edgeIteratorP(...arg0: object_t[]): Promise<Iterator>;
      edgeIteratorP(arg0: object_array_t): Iterator;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public com.tinkerpop.gremlin.structure.Graph$Features com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.features()
      features(): object_t;
      featuresP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public <E> java.util.Set<java.lang.String> com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.getIndexedKeys(java.lang.Class<E>)
      getIndexedKeys(arg0: Class): Set;
      getIndexedKeysP(arg0: Class): Promise<Set>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default com.tinkerpop.gremlin.structure.Graph$Io com.tinkerpop.gremlin.structure.Graph.io()
      io(): object_t;
      ioP(): Promise<object_t>;
      // public com.tinkerpop.gremlin.structure.Graph$Iterators com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.iterators()
      iterators(): object_t;
      iteratorsP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default <T,S> T com.tinkerpop.gremlin.structure.Graph.of(java.lang.Class<T>)
      of(arg0: Class): Traversal;
      ofP(arg0: Class): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.structure.strategy.StrategyGraph com.tinkerpop.gremlin.structure.Graph.strategy(com.tinkerpop.gremlin.structure.strategy.GraphStrategy...)
      strategy(...arg0: GraphStrategy[]): StrategyGraph;
      strategy(arg0: array_t<GraphStrategy>): StrategyGraph;
      strategyP(...arg0: GraphStrategy[]): Promise<StrategyGraph>;
      strategyP(arg0: array_t<GraphStrategy>): StrategyGraph;
      // public java.lang.String com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public com.tinkerpop.gremlin.structure.Transaction com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.tx()
      tx(): Transaction;
      txP(): Promise<Transaction>;
      // public default com.tinkerpop.gremlin.process.graph.traversal.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.Graph.V(java.lang.Object...)
      V(...arg0: object_t[]): GraphTraversal;
      V(arg0: object_array_t): GraphTraversal;
      VP(...arg0: object_t[]): Promise<GraphTraversal>;
      VP(arg0: object_array_t): GraphTraversal;
      // public com.tinkerpop.gremlin.structure.Graph$Variables com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.variables()
      variables(): object_t;
      variablesP(): Promise<object_t>;
      // public java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.vertexIterator(java.lang.Object...)
      vertexIterator(...arg0: object_t[]): Iterator;
      vertexIterator(arg0: object_array_t): Iterator;
      vertexIteratorP(...arg0: object_t[]): Promise<Iterator>;
      vertexIteratorP(arg0: object_array_t): Iterator;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph {
      export interface Static {
        // public static com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.open(org.apache.commons.configuration.Configuration)
        open(arg0: object_t): TinkerGraph;
        openP(arg0: object_t): Promise<TinkerGraph>;
        // public static com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.open()
        open(): TinkerGraph;
        openP(): Promise<TinkerGraph>;
        GRAPH: string;
      }
    }
  }

  export module java.util {
    export interface Map extends Java.java.lang.Object {
      // public abstract void java.util.Map.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      compute(arg0: object_t, arg1: BiFunction): object_t;
      computeP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsent(arg0: object_t, arg1: Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresent(arg0: object_t, arg1: BiFunction): object_t;
      computeIfPresentP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySet(): Set;
      entrySetP(): Promise<Set>;
      // public abstract boolean java.util.Map.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Map.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySet(): Set;
      keySetP(): Promise<Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      merge(arg0: object_t, arg1: object_t, arg2: BiFunction): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: BiFunction): Promise<object_t>;
      // public abstract V java.util.Map.put(K,V)
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAll(arg0: Map): void;
      putAllP(arg0: Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAll(arg0: BiFunction): void;
      replaceAllP(arg0: BiFunction): Promise<void>;
      // public abstract int java.util.Map.size()
      size(): number;
      sizeP(): Promise<number>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      values(): Collection;
      valuesP(): Promise<Collection>;
    }
    export module Map {
      export interface Static {
      }
    }
  }

  export module groovy.lang {
    export interface GroovyClassLoader extends Java.java.lang.ClassLoader {
      // public void groovy.lang.GroovyClassLoader.addClasspath(java.lang.String)
      addClasspath(arg0: string_t): void;
      addClasspathP(arg0: string_t): Promise<void>;
      // public void groovy.lang.GroovyClassLoader.addURL(java.net.URL)
      addURL(arg0: object_t): void;
      addURLP(arg0: object_t): Promise<void>;
      // public void java.lang.ClassLoader.clearAssertionStatus()
      clearAssertionStatus(): void;
      clearAssertionStatusP(): Promise<void>;
      // public void groovy.lang.GroovyClassLoader.clearCache()
      clearCache(): void;
      clearCacheP(): Promise<void>;
      // public void java.net.URLClassLoader.close() throws java.io.IOException
      close(): void;
      closeP(): Promise<void>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.defineClass(org.codehaus.groovy.ast.ClassNode,java.lang.String,java.lang.String)
      defineClass(arg0: ClassNode, arg1: string_t, arg2: string_t): Class;
      defineClassP(arg0: ClassNode, arg1: string_t, arg2: string_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.defineClass(java.lang.String,byte[])
      defineClass(arg0: string_t, arg1: object_array_t): Class;
      defineClassP(arg0: string_t, arg1: object_array_t): Promise<Class>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.net.URL java.net.URLClassLoader.findResource(java.lang.String)
      findResource(arg0: string_t): object_t;
      findResourceP(arg0: string_t): Promise<object_t>;
      // public java.util.Enumeration<java.net.URL> java.net.URLClassLoader.findResources(java.lang.String) throws java.io.IOException
      findResources(arg0: string_t): object_t;
      findResourcesP(arg0: string_t): Promise<object_t>;
      // public synchronized java.lang.String groovy.lang.GroovyClassLoader.generateScriptName()
      generateScriptName(): string;
      generateScriptNameP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.Class[] groovy.lang.GroovyClassLoader.getLoadedClasses()
      getLoadedClasses(): Class[];
      getLoadedClassesP(): Promise<Class[]>;
      // public final java.lang.ClassLoader java.lang.ClassLoader.getParent()
      getParent(): ClassLoader;
      getParentP(): Promise<ClassLoader>;
      // public java.net.URL java.lang.ClassLoader.getResource(java.lang.String)
      getResource(arg0: string_t): object_t;
      getResourceP(arg0: string_t): Promise<object_t>;
      // public java.io.InputStream java.net.URLClassLoader.getResourceAsStream(java.lang.String)
      getResourceAsStream(arg0: string_t): object_t;
      getResourceAsStreamP(arg0: string_t): Promise<object_t>;
      // public groovy.lang.GroovyResourceLoader groovy.lang.GroovyClassLoader.getResourceLoader()
      getResourceLoader(): GroovyResourceLoader;
      getResourceLoaderP(): Promise<GroovyResourceLoader>;
      // public java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getResources(java.lang.String) throws java.io.IOException
      getResources(arg0: string_t): object_t;
      getResourcesP(arg0: string_t): Promise<object_t>;
      // public java.net.URL[] java.net.URLClassLoader.getURLs()
      getURLs(): object_t[];
      getURLsP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Boolean groovy.lang.GroovyClassLoader.isShouldRecompile()
      isShouldRecompile(): boolean;
      isShouldRecompileP(): Promise<boolean>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.loadClass(java.lang.String,boolean,boolean,boolean) throws java.lang.ClassNotFoundException,org.codehaus.groovy.control.CompilationFailedException
      loadClass(arg0: string_t, arg1: boolean_t, arg2: boolean_t, arg3: boolean_t): Class;
      loadClassP(arg0: string_t, arg1: boolean_t, arg2: boolean_t, arg3: boolean_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.loadClass(java.lang.String,boolean,boolean) throws java.lang.ClassNotFoundException,org.codehaus.groovy.control.CompilationFailedException
      loadClass(arg0: string_t, arg1: boolean_t, arg2: boolean_t): Class;
      loadClassP(arg0: string_t, arg1: boolean_t, arg2: boolean_t): Promise<Class>;
      // public java.lang.Class<?> groovy.lang.GroovyClassLoader.loadClass(java.lang.String) throws java.lang.ClassNotFoundException
      loadClass(arg0: string_t): Class;
      loadClassP(arg0: string_t): Promise<Class>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(java.io.InputStream,java.lang.String) throws org.codehaus.groovy.control.CompilationFailedException
      parseClass(arg0: object_t, arg1: string_t): Class;
      parseClassP(arg0: object_t, arg1: string_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(java.lang.String,java.lang.String) throws org.codehaus.groovy.control.CompilationFailedException
      parseClass(arg0: string_t, arg1: string_t): Class;
      parseClassP(arg0: string_t, arg1: string_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(groovy.lang.GroovyCodeSource,boolean) throws org.codehaus.groovy.control.CompilationFailedException
      parseClass(arg0: GroovyCodeSource, arg1: boolean_t): Class;
      parseClassP(arg0: GroovyCodeSource, arg1: boolean_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(groovy.lang.GroovyCodeSource) throws org.codehaus.groovy.control.CompilationFailedException
      parseClass(arg0: GroovyCodeSource): Class;
      parseClassP(arg0: GroovyCodeSource): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(java.lang.String) throws org.codehaus.groovy.control.CompilationFailedException
      parseClass(arg0: string_t): Class;
      parseClassP(arg0: string_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(java.io.File) throws org.codehaus.groovy.control.CompilationFailedException,java.io.IOException
      parseClass(arg0: object_t): Class;
      parseClassP(arg0: object_t): Promise<Class>;
      // public void java.lang.ClassLoader.setClassAssertionStatus(java.lang.String,boolean)
      setClassAssertionStatus(arg0: string_t, arg1: boolean_t): void;
      setClassAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public void java.lang.ClassLoader.setDefaultAssertionStatus(boolean)
      setDefaultAssertionStatus(arg0: boolean_t): void;
      setDefaultAssertionStatusP(arg0: boolean_t): Promise<void>;
      // public void java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)
      setPackageAssertionStatus(arg0: string_t, arg1: boolean_t): void;
      setPackageAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public void groovy.lang.GroovyClassLoader.setResourceLoader(groovy.lang.GroovyResourceLoader)
      setResourceLoader(arg0: GroovyResourceLoader): void;
      setResourceLoaderP(arg0: GroovyResourceLoader): Promise<void>;
      // public void groovy.lang.GroovyClassLoader.setShouldRecompile(java.lang.Boolean)
      setShouldRecompile(arg0: boolean_t): void;
      setShouldRecompileP(arg0: boolean_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GroovyClassLoader {
      export interface Static {
        new (arg0: ClassLoader, arg1: CompilerConfiguration, arg2: boolean_t): groovy.lang.GroovyClassLoader;
        new (arg0: ClassLoader, arg1: CompilerConfiguration): groovy.lang.GroovyClassLoader;
        new (arg0: GroovyClassLoader): groovy.lang.GroovyClassLoader;
        new (arg0: ClassLoader): groovy.lang.GroovyClassLoader;
        new (): groovy.lang.GroovyClassLoader;
        // public static java.lang.ClassLoader java.lang.ClassLoader.getSystemClassLoader()
        getSystemClassLoader(): ClassLoader;
        getSystemClassLoaderP(): Promise<ClassLoader>;
        // public static java.net.URL java.lang.ClassLoader.getSystemResource(java.lang.String)
        getSystemResource(arg0: string_t): object_t;
        getSystemResourceP(arg0: string_t): Promise<object_t>;
        // public static java.io.InputStream java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
        getSystemResourceAsStream(arg0: string_t): object_t;
        getSystemResourceAsStreamP(arg0: string_t): Promise<object_t>;
        // public static java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getSystemResources(java.lang.String) throws java.io.IOException
        getSystemResources(arg0: string_t): object_t;
        getSystemResourcesP(arg0: string_t): Promise<object_t>;
        // public static java.net.URLClassLoader java.net.URLClassLoader.newInstance(java.net.URL[],java.lang.ClassLoader)
        newInstance(arg0: object_array_t, arg1: ClassLoader): object_t;
        newInstanceP(arg0: object_array_t, arg1: ClassLoader): Promise<object_t>;
        // public static java.net.URLClassLoader java.net.URLClassLoader.newInstance(java.net.URL[])
        newInstance(arg0: object_array_t): object_t;
        newInstanceP(arg0: object_array_t): Promise<object_t>;
      }
    }
  }

  export module java.util.function_ {
    export interface UnaryOperator extends Java.java.util.function_.Function {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
    }
    export module UnaryOperator {
      export interface Static {
        // public static <T> java.util.function.UnaryOperator<T> java.util.function.UnaryOperator.identity()
        identity(): UnaryOperator;
        identityP(): Promise<UnaryOperator>;
      }
    }
  }

  export module java.lang {
    export interface Number extends Java.java.lang.Object {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Number {
      export interface Static {
        new (): java.lang.Number;
      }
    }
  }

  export module groovy.lang {
    export interface Range extends Java.java.util.List {
      // public abstract void java.util.List.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.List.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.List.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.List.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public abstract boolean groovy.lang.Range.containsWithinBounds(java.lang.Object)
      containsWithinBounds(arg0: object_t): boolean;
      containsWithinBoundsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract E java.util.List.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public abstract T groovy.lang.Range.getFrom()
      getFrom(): object_t;
      getFromP(): Promise<object_t>;
      // public abstract T groovy.lang.Range.getTo()
      getTo(): object_t;
      getToP(): Promise<object_t>;
      // public abstract int java.util.List.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract java.lang.String groovy.lang.Range.inspect()
      inspect(): string;
      inspectP(): Promise<string>;
      // public abstract boolean java.util.List.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract boolean groovy.lang.Range.isReverse()
      isReverse(): boolean;
      isReverseP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.List.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIterator(arg0: integer_t): ListIterator;
      listIteratorP(arg0: integer_t): Promise<ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIterator(): ListIterator;
      listIteratorP(): Promise<ListIterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.List.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.List.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: UnaryOperator): void;
      replaceAllP(arg0: UnaryOperator): Promise<void>;
      // public abstract boolean java.util.List.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.List.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: Comparator): void;
      sortP(arg0: Comparator): Promise<void>;
      // public default java.util.Spliterator<E> java.util.List.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public abstract void groovy.lang.Range.step(int,groovy.lang.Closure)
      step(arg0: integer_t, arg1: Closure): void;
      stepP(arg0: integer_t, arg1: Closure): Promise<void>;
      // public abstract java.util.List<T> groovy.lang.Range.step(int)
      step(arg0: integer_t): List;
      stepP(arg0: integer_t): Promise<List>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public abstract <T> T[] java.util.List.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.List.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Range {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONReader extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public com.tinkerpop.gremlin.structure.Edge com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.readEdge(java.io.InputStream,java.util.function.Function<com.tinkerpop.gremlin.structure.util.detached.DetachedEdge, com.tinkerpop.gremlin.structure.Edge>) throws java.io.IOException
      readEdge(arg0: object_t, arg1: Function): Edge;
      readEdgeP(arg0: object_t, arg1: Function): Promise<Edge>;
      // public void com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.readGraph(java.io.InputStream,com.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
      readGraph(arg0: object_t, arg1: Graph): void;
      readGraphP(arg0: object_t, arg1: Graph): Promise<void>;
      // public com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.readVertex(java.io.InputStream,com.tinkerpop.gremlin.structure.Direction,java.util.function.Function<com.tinkerpop.gremlin.structure.util.detached.DetachedVertex, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<com.tinkerpop.gremlin.structure.util.detached.DetachedEdge, com.tinkerpop.gremlin.structure.Edge>) throws java.io.IOException
      readVertex(arg0: object_t, arg1: Direction, arg2: Function, arg3: Function): Vertex;
      readVertexP(arg0: object_t, arg1: Direction, arg2: Function, arg3: Function): Promise<Vertex>;
      // public com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.readVertex(java.io.InputStream,java.util.function.Function<com.tinkerpop.gremlin.structure.util.detached.DetachedVertex, com.tinkerpop.gremlin.structure.Vertex>) throws java.io.IOException
      readVertex(arg0: object_t, arg1: Function): Vertex;
      readVertexP(arg0: object_t, arg1: Function): Promise<Vertex>;
      // public java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.readVertices(java.io.InputStream,com.tinkerpop.gremlin.structure.Direction,java.util.function.Function<com.tinkerpop.gremlin.structure.util.detached.DetachedVertex, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<com.tinkerpop.gremlin.structure.util.detached.DetachedEdge, com.tinkerpop.gremlin.structure.Edge>) throws java.io.IOException
      readVertices(arg0: object_t, arg1: Direction, arg2: Function, arg3: Function): Iterator;
      readVerticesP(arg0: object_t, arg1: Direction, arg2: Function, arg3: Function): Promise<Iterator>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONReader {
      export interface Static {
        new (arg0: GraphSONMapper, arg1: long_t, arg2: string_t, arg3: string_t): com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader;
        // public static com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.build()
        build(): object_t;
        buildP(): Promise<object_t>;
      }
    }
  }

  export module java.util {
    export interface Collection extends Java.java.lang.Iterable {
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract int java.util.Collection.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Collection {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface List extends Java.java.util.Collection {
      // public abstract void java.util.List.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.List.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.List.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.List.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public abstract boolean java.util.List.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract E java.util.List.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public abstract int java.util.List.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.List.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.List.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIterator(arg0: integer_t): ListIterator;
      listIteratorP(arg0: integer_t): Promise<ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIterator(): ListIterator;
      listIteratorP(): Promise<ListIterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.List.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.List.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: UnaryOperator): void;
      replaceAllP(arg0: UnaryOperator): Promise<void>;
      // public abstract boolean java.util.List.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.List.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: Comparator): void;
      sortP(arg0: Comparator): Promise<void>;
      // public default java.util.Spliterator<E> java.util.List.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public abstract <T> T[] java.util.List.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.List.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module List {
      export interface Static {
      }
    }
  }

  export module co.redseal.gremlinnode.function_ {
    export interface AndThenGlobFunction extends Java.co.redseal.gremlinnode.function_.IdentityGlobFunction {
      // public void co.redseal.gremlinnode.function.IdentityGlobFunction.accept(java.lang.Object,java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public void co.redseal.gremlinnode.function.AndThenGlobFunction.accept(java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public void co.redseal.gremlinnode.function.AndThenGlobFunction.accept(java.lang.Object)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default com.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> com.tinkerpop.gremlin.util.function.TriConsumer.andThen(com.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(co.redseal.gremlinnode.function.GlobFunction)
      andThen(arg0: GlobFunction): GlobFunction;
      andThenP(arg0: GlobFunction): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): GlobFunction;
      andThenP(arg0: BiConsumer): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): GlobFunction;
      andThenP(arg0: Function): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): GlobFunction;
      andThenP(arg0: Consumer): Promise<GlobFunction>;
      // public java.util.function.BiConsumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
      // public java.util.function.BiFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public java.util.function.Function co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public java.util.function.Consumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public java.lang.Object co.redseal.gremlinnode.function.AndThenGlobFunction.apply(java.lang.Object,java.lang.Object)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public java.lang.Object co.redseal.gremlinnode.function.AndThenGlobFunction.apply(java.lang.Object)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Object co.redseal.gremlinnode.function.IdentityGlobFunction.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): GlobFunction;
      negateP(): Promise<GlobFunction>;
      // public java.util.function.BiPredicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public java.util.function.Predicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public boolean co.redseal.gremlinnode.function.IdentityGlobFunction.test(java.lang.Object,java.lang.Object)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public boolean co.redseal.gremlinnode.function.IdentityGlobFunction.test(java.lang.Object)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String co.redseal.gremlinnode.function.AndThenGlobFunction.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AndThenGlobFunction {
      export interface Static {
        new (arg0: GlobFunction, arg1: GlobFunction): co.redseal.gremlinnode.function_.AndThenGlobFunction;
        new (arg0: GlobFunction, arg1: BiConsumer): co.redseal.gremlinnode.function_.AndThenGlobFunction;
        new (arg0: GlobFunction, arg1: Function): co.redseal.gremlinnode.function_.AndThenGlobFunction;
        new (arg0: GlobFunction, arg1: Consumer): co.redseal.gremlinnode.function_.AndThenGlobFunction;
      }
    }
  }

  export module com.tinkerpop.gremlin.util.function_ {
    export interface TriConsumer extends Java.java.lang.Object {
      // public abstract void com.tinkerpop.gremlin.util.function.TriConsumer.accept(A,B,C)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public default com.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> com.tinkerpop.gremlin.util.function.TriConsumer.andThen(com.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
    }
    export module TriConsumer {
      export interface Static {
      }
    }
  }

}
