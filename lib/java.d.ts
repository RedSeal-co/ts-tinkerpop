// java.d.ts
// This file was generated by ts-java.
/// <reference path="../typings/bluebird/bluebird.d.ts" />


declare module 'java' {
  var Java: Java.NodeAPI;
  export = Java;
}

// redseal-java is a fork of java that RedSeal sometimes uses for experimental features.
// We declare redseal-java as an ambient module to allow an application to substitute it for local experiments.
declare module 'redseal-java' {
  var Java: Java.NodeAPI;
  export = Java;
}

declare module JavaAsyncOptions {
  // Promisify must be defined outside of the Java module, because inside the module
  // Function may be redefined to be the interface for java.util.function.Function.
  interface Promisify {
    (funct: Function, receiver?: any): Function;
  }
}

declare module Java {
  // Node-java has special handling for methods that return long or java.lang.Long,
  // returning a Javascript Number but with an additional property longValue.
  interface longValue_t extends Number {
    longValue: string;
  }

  // Node-java can automatically coerce a javascript string into a java.lang.String.
  // This special type alias allows to declare that possiblity to Typescript.
  export type string_t = string | java.lang.String;

  // Java methods that take java.lang.Object parameters implicitly will take a java.lang.String.
  // But string_t is not sufficient for this case, we need object_t.
  export type object_t = java.lang.Object | string | boolean | number | longValue_t;

  // Java methods that take long or java.lang.Long parameters may take javascript numbers,
  // longValue_t (see above) or java.lang.Long.
  // This special type alias allows to declare that possiblity to Typescript.
  export type long_t = number | longValue_t | java.lang.Long;

  // Handling of other primitive numeric types is simpler, as there is no loss of precision.
  export type boolean_t = boolean | java.lang.Boolean;
  export type short_t = number | java.lang.Short;
  export type integer_t = number | java.lang.Integer;
  export type double_t = number | java.lang.Double;
  export type float_t = number | java.lang.Float;
  export type number_t = number | java.lang.Number;

  export interface array_t<T> extends java.lang.Object {
    // This is an opaque type for a java array_t T[];
    // Use Java.newArray<T>(className, [...]) to create wherever a Java method expects a T[],
    // most notably for vararg parameteters.
    __dummy: T;
  }

  export type object_array_t = array_t<java.lang.Object> | object_t[];

  export interface Callback<T> {
    (err?: Error, result?: T): void;
  }

  interface AsyncOptions {
    syncSuffix: string;
    asyncSuffix?: string;
    promiseSuffix?: string;
    promisify?: JavaAsyncOptions.Promisify;
  }

  // *NodeAPI* declares methods & members exported by the node java module.
  interface NodeAPI {
    classpath: string[];
    asyncOptions: AsyncOptions;
    callMethod(instance: any, className: string, methodName: string, args: any[], callback: Callback<any>): void;
    callMethodSync(instance: any, className: string, methodName: string, ...args: any[]): any;
    callStaticMethodSync(className: string, methodName: string, ...args: any[]): any;
    instanceOf(javaObject: any, className: string): boolean;
    registerClient(before: (cb: Callback<void>) => void, after?: (cb: Callback<void>) => void): void;
    registerClientP(beforeP: () => Promise<void>, afterP?: () => Promise<void>): void;
    ensureJvm(done: Callback<void>): void;
    ensureJvm(): Promise<void>;

    newShort(val: number): java.lang.Short;
    newLong(val: number): java.lang.Long;
    newFloat(val: number): java.lang.Float;
    newDouble(val: number): java.lang.Double;

    getClassLoader(): java.lang.ClassLoader;

    newArray(className: 'co.redseal.gremlinnode.function.GlobFunction', arg: GlobFunction[]): array_t<co.redseal.gremlinnode.function_.GlobFunction>;
    newArray(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg: GroovyLambda[]): array_t<co.redseal.gremlinnode.function_.GroovyLambda>;
    newArray(className: 'co.redseal.gremlinnode.testing.TestClass', arg: TestClass[]): array_t<co.redseal.gremlinnode.testing.TestClass>;
    newArray(className: 'co.redseal.util.StringInputStream', arg: StringInputStream[]): array_t<co.redseal.util.StringInputStream>;
    newArray(className: 'groovy.lang.Binding', arg: Binding[]): array_t<groovy.lang.Binding>;
    newArray(className: 'groovy.lang.Closure', arg: Closure[]): array_t<groovy.lang.Closure>;
    newArray(className: 'groovy.lang.DelegatingMetaClass', arg: DelegatingMetaClass[]): array_t<groovy.lang.DelegatingMetaClass>;
    newArray(className: 'groovy.lang.GroovyClassLoader', arg: GroovyClassLoader[]): array_t<groovy.lang.GroovyClassLoader>;
    newArray(className: 'groovy.lang.GroovyCodeSource', arg: GroovyCodeSource[]): array_t<groovy.lang.GroovyCodeSource>;
    newArray(className: 'groovy.lang.GroovyObjectSupport', arg: GroovyObjectSupport[]): array_t<groovy.lang.GroovyObjectSupport>;
    newArray(className: 'groovy.lang.GroovyResourceLoader', arg: GroovyResourceLoader[]): array_t<groovy.lang.GroovyResourceLoader>;
    newArray(className: 'groovy.lang.IntRange', arg: IntRange[]): array_t<groovy.lang.IntRange>;
    newArray(className: 'groovy.lang.MetaBeanProperty', arg: MetaBeanProperty[]): array_t<groovy.lang.MetaBeanProperty>;
    newArray(className: 'groovy.lang.MetaClass', arg: MetaClass[]): array_t<groovy.lang.MetaClass>;
    newArray(className: 'groovy.lang.MetaMethod', arg: MetaMethod[]): array_t<groovy.lang.MetaMethod>;
    newArray(className: 'groovy.lang.MetaProperty', arg: MetaProperty[]): array_t<groovy.lang.MetaProperty>;
    newArray(className: 'groovy.lang.Range', arg: Range[]): array_t<groovy.lang.Range>;
    newArray(className: 'groovy.lang.Reference', arg: Reference[]): array_t<groovy.lang.Reference>;
    newArray(className: 'java.io.ByteArrayOutputStream', arg: ByteArrayOutputStream[]): array_t<java.io.ByteArrayOutputStream>;
    newArray(className: 'java.io.FileInputStream', arg: FileInputStream[]): array_t<java.io.FileInputStream>;
    newArray(className: 'java.io.FileOutputStream', arg: FileOutputStream[]): array_t<java.io.FileOutputStream>;
    newArray(className: 'java.io.InputStream', arg: InputStream[]): array_t<java.io.InputStream>;
    newArray(className: 'java.io.OutputStream', arg: OutputStream[]): array_t<java.io.OutputStream>;
    newArray(className: 'java.lang.Boolean', arg: boolean_t[]): array_t<java.lang.Boolean>;
    newArray(className: 'java.lang.Class', arg: Class[]): array_t<java.lang.Class>;
    newArray(className: 'java.lang.ClassLoader', arg: ClassLoader[]): array_t<java.lang.ClassLoader>;
    newArray(className: 'java.lang.Double', arg: double_t[]): array_t<java.lang.Double>;
    newArray(className: 'java.lang.Enum', arg: Enum[]): array_t<java.lang.Enum>;
    newArray(className: 'java.lang.Float', arg: float_t[]): array_t<java.lang.Float>;
    newArray(className: 'java.lang.Integer', arg: integer_t[]): array_t<java.lang.Integer>;
    newArray(className: 'java.lang.Iterable', arg: Iterable[]): array_t<java.lang.Iterable>;
    newArray(className: 'java.lang.Long', arg: long_t[]): array_t<java.lang.Long>;
    newArray(className: 'java.lang.Number', arg: number_t[]): array_t<java.lang.Number>;
    newArray(className: 'java.lang.Object', arg: object_t[]): array_t<java.lang.Object>;
    newArray(className: 'java.lang.reflect.Array', arg: Array[]): array_t<java.lang.reflect.Array>;
    newArray(className: 'java.lang.Short', arg: short_t[]): array_t<java.lang.Short>;
    newArray(className: 'java.lang.String', arg: string_t[]): array_t<java.lang.String>;
    newArray(className: 'java.nio.charset.Charset', arg: Charset[]): array_t<java.nio.charset.Charset>;
    newArray(className: 'java.nio.charset.StandardCharsets', arg: StandardCharsets[]): array_t<java.nio.charset.StandardCharsets>;
    newArray(className: 'java.util.AbstractCollection', arg: AbstractCollection[]): array_t<java.util.AbstractCollection>;
    newArray(className: 'java.util.AbstractList', arg: AbstractList[]): array_t<java.util.AbstractList>;
    newArray(className: 'java.util.AbstractMap', arg: AbstractMap[]): array_t<java.util.AbstractMap>;
    newArray(className: 'java.util.AbstractSet', arg: AbstractSet[]): array_t<java.util.AbstractSet>;
    newArray(className: 'java.util.ArrayList', arg: ArrayList[]): array_t<java.util.ArrayList>;
    newArray(className: 'java.util.Collection', arg: Collection[]): array_t<java.util.Collection>;
    newArray(className: 'java.util.Comparator', arg: Comparator[]): array_t<java.util.Comparator>;
    newArray(className: 'java.util.function.BiConsumer', arg: BiConsumer[]): array_t<java.util.function_.BiConsumer>;
    newArray(className: 'java.util.function.BiFunction', arg: BiFunction[]): array_t<java.util.function_.BiFunction>;
    newArray(className: 'java.util.function.BinaryOperator', arg: BinaryOperator[]): array_t<java.util.function_.BinaryOperator>;
    newArray(className: 'java.util.function.BiPredicate', arg: BiPredicate[]): array_t<java.util.function_.BiPredicate>;
    newArray(className: 'java.util.function.Consumer', arg: Consumer[]): array_t<java.util.function_.Consumer>;
    newArray(className: 'java.util.function.Function', arg: Function[]): array_t<java.util.function_.Function>;
    newArray(className: 'java.util.function.Predicate', arg: Predicate[]): array_t<java.util.function_.Predicate>;
    newArray(className: 'java.util.function.Supplier', arg: Supplier[]): array_t<java.util.function_.Supplier>;
    newArray(className: 'java.util.function.UnaryOperator', arg: UnaryOperator[]): array_t<java.util.function_.UnaryOperator>;
    newArray(className: 'java.util.HashMap', arg: HashMap[]): array_t<java.util.HashMap>;
    newArray(className: 'java.util.HashSet', arg: HashSet[]): array_t<java.util.HashSet>;
    newArray(className: 'java.util.Iterator', arg: Iterator[]): array_t<java.util.Iterator>;
    newArray(className: 'java.util.LinkedHashMap', arg: LinkedHashMap[]): array_t<java.util.LinkedHashMap>;
    newArray(className: 'java.util.List', arg: List[]): array_t<java.util.List>;
    newArray(className: 'java.util.ListIterator', arg: ListIterator[]): array_t<java.util.ListIterator>;
    newArray(className: 'java.util.Map', arg: Map[]): array_t<java.util.Map>;
    newArray(className: 'java.util.Map$Entry', arg: Map$Entry[]): array_t<java.util.Map$Entry>;
    newArray(className: 'java.util.NoSuchElementException', arg: NoSuchElementException[]): array_t<java.util.NoSuchElementException>;
    newArray(className: 'java.util.Set', arg: Set[]): array_t<java.util.Set>;
    newArray(className: 'javax.script.AbstractScriptEngine', arg: AbstractScriptEngine[]): array_t<javax.script.AbstractScriptEngine>;
    newArray(className: 'javax.script.Bindings', arg: Bindings[]): array_t<javax.script.Bindings>;
    newArray(className: 'javax.script.CompiledScript', arg: CompiledScript[]): array_t<javax.script.CompiledScript>;
    newArray(className: 'javax.script.ScriptContext', arg: ScriptContext[]): array_t<javax.script.ScriptContext>;
    newArray(className: 'javax.script.ScriptEngine', arg: ScriptEngine[]): array_t<javax.script.ScriptEngine>;
    newArray(className: 'javax.script.ScriptEngineFactory', arg: ScriptEngineFactory[]): array_t<javax.script.ScriptEngineFactory>;
    newArray(className: 'org.apache.tinkerpop.gremlin.groovy.function.GComparator', arg: GComparator[]): array_t<org.apache.tinkerpop.gremlin.groovy.function_.GComparator>;
    newArray(className: 'org.apache.tinkerpop.gremlin.groovy.function.GFunction', arg: GFunction[]): array_t<org.apache.tinkerpop.gremlin.groovy.function_.GFunction>;
    newArray(className: 'org.apache.tinkerpop.gremlin.groovy.function.GSupplier', arg: GSupplier[]): array_t<org.apache.tinkerpop.gremlin.groovy.function_.GSupplier>;
    newArray(className: 'org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator', arg: GUnaryOperator[]): array_t<org.apache.tinkerpop.gremlin.groovy.function_.GUnaryOperator>;
    newArray(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg: GremlinGroovyScriptEngine[]): array_t<org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce', arg: ClusterCountMapReduce[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder', arg: ClusterCountMapReduce$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce', arg: ClusterPopulationMapReduce[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder', arg: ClusterPopulationMapReduce$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram', arg: PeerPressureVertexProgram[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder', arg: PeerPressureVertexProgram$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ComputerResult', arg: ComputerResult[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ComputerResult>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer', arg: GraphComputer[]): array_t<org.apache.tinkerpop.gremlin.process.computer.GraphComputer>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions', arg: GraphComputer$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features', arg: GraphComputer$Features[]): array_t<org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist', arg: GraphComputer$Persist[]): array_t<org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph', arg: GraphComputer$ResultGraph[]): array_t<org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.KeyValue', arg: KeyValue[]): array_t<org.apache.tinkerpop.gremlin.process.computer.KeyValue>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce', arg: MapReduce[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MapReduce>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter', arg: MapReduce$MapEmitter[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject', arg: MapReduce$NullObject[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter', arg: MapReduce$ReduceEmitter[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage', arg: MapReduce$Stage[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory', arg: Memory[]): array_t<org.apache.tinkerpop.gremlin.process.computer.Memory>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory$Admin', arg: Memory$Admin[]): array_t<org.apache.tinkerpop.gremlin.process.computer.Memory$Admin>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions', arg: Memory$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageCombiner', arg: MessageCombiner[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MessageCombiner>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope', arg: MessageScope[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MessageScope>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global', arg: MessageScope$Global[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local', arg: MessageScope$Local[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier', arg: MessageScope$Local$ReverseTraversalSupplier[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.Messenger', arg: Messenger[]): array_t<org.apache.tinkerpop.gremlin.process.computer.Messenger>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce', arg: PageRankMapReduce[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder', arg: PageRankMapReduce$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner', arg: PageRankMessageCombiner[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram', arg: PageRankVertexProgram[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder', arg: PageRankVertexProgram$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger', arg: SingleMessenger[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram', arg: TraversalVertexProgram[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder', arg: TraversalVertexProgram$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner', arg: TraversalVertexProgramMessageCombiner[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor', arg: TraverserExecutor[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects', arg: VertexTraversalSideEffects[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram', arg: VertexProgram[]): array_t<org.apache.tinkerpop.gremlin.process.computer.VertexProgram>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder', arg: VertexProgram$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features', arg: VertexProgram$Features[]): array_t<org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Compare', arg: Compare[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Compare>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Contains', arg: Contains[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Contains>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__', arg: __[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal', arg: DefaultGraphTraversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal', arg: EmptyGraphTraversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal', arg: GraphTraversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin', arg: GraphTraversal$Admin[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource', arg: GraphTraversalSource[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder', arg: GraphTraversalSource$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub', arg: GraphTraversalSource$GraphTraversalSourceStub[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine', arg: ComputerTraversalEngine[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder', arg: ComputerTraversalEngine$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy', arg: ComputerTraversalEngine$ComputerResultStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine', arg: StandardTraversalEngine[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder', arg: StandardTraversalEngine$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Operator', arg: Operator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Operator>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Order', arg: Order[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Order>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.P', arg: P[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.P>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path', arg: Path[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Path>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions', arg: Path$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Scope', arg: Scope[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Scope>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Step', arg: Step[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Step>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep', arg: AbstractStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet', arg: BulkSet[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep', arg: CollectingBarrierStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep', arg: ComputerAwareStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep', arg: ComputerAwareStep$EndStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator', arg: ElementFunctionComparator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator', arg: ElementValueComparator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath', arg: EmptyPath[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep', arg: EmptyStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator', arg: ExpandableStepIterator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer', arg: HasContainer[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath', arg: ImmutablePath[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper', arg: MapHelper[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath', arg: MutablePath[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep', arg: NoOpBarrierStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep', arg: PathIdentityStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep', arg: ReducingBarrierStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce', arg: ReducingBarrierStep$DefaultMapReduce[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet', arg: ReducingBarrierStep$FinalGet[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep', arg: SupplyingBarrierStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator', arg: TraversalComparator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', arg: Tree[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy', arg: ConjunctionStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy', arg: ElementIdStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder', arg: ElementIdStrategy$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy', arg: EventStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder', arg: EventStrategy$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback', arg: EventStrategy$EventStrategyCallback[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy', arg: PartitionStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder', arg: PartitionStrategy$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy', arg: SubgraphStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder', arg: SubgraphStrategy$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException', arg: ComputerVerificationException[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy', arg: ComputerVerificationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy', arg: LambdaRestrictionStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy', arg: ReadOnlyStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal', arg: Traversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Traversal>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin', arg: Traversal$Admin[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions', arg: Traversal$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine', arg: TraversalEngine[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder', arg: TraversalEngine$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type', arg: TraversalEngine$Type[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects', arg: TraversalSideEffects[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions', arg: TraversalSideEffects$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSource', arg: TraversalSource[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalSource>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder', arg: TraversalSource$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies', arg: TraversalStrategies[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache', arg: TraversalStrategies$GlobalCache[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy', arg: TraversalStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy', arg: TraversalStrategy$DecorationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy', arg: TraversalStrategy$FinalizationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy', arg: TraversalStrategy$OptimizationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy', arg: TraversalStrategy$VendorOptimizationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy', arg: TraversalStrategy$VerificationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traverser', arg: Traverser[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Traverser>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin', arg: Traverser$Admin[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator', arg: TraverserGenerator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.AndP', arg: AndP[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.AndP>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP', arg: ConjunctionP[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal', arg: DefaultTraversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects', arg: DefaultTraversalSideEffects[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies', arg: DefaultTraversalStrategies[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics', arg: DependantMutableMetrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal', arg: EmptyTraversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects', arg: EmptyTraversalSideEffects[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies', arg: EmptyTraversalStrategies[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException', arg: FastNoSuchElementException[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics', arg: ImmutableMetrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.Metrics', arg: Metrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.Metrics>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics', arg: MutableMetrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.OrP', arg: OrP[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.OrP>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper', arg: SideEffectHelper[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics', arg: StandardTraversalMetrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition', arg: StepPosition[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction', arg: TraversalClassFunction[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper', arg: TraversalHelper[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix', arg: TraversalMatrix[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics', arg: TraversalMetrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction', arg: TraversalObjectFunction[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg: TraversalP[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing', arg: TraversalRing[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction', arg: TraversalScriptFunction[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper', arg: TraversalScriptHelper[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil', arg: TraversalUtil[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil>;
    newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple', arg: TraversalUtil$Multiple[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Direction', arg: Direction[]): array_t<org.apache.tinkerpop.gremlin.structure.Direction>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Edge', arg: Edge[]): array_t<org.apache.tinkerpop.gremlin.structure.Edge>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Edge$Exceptions', arg: Edge$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Edge$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Element', arg: Element[]): array_t<org.apache.tinkerpop.gremlin.structure.Element>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Element$Exceptions', arg: Element$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Element$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph', arg: Graph[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Exceptions', arg: Graph$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features', arg: Graph$Features[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures', arg: Graph$Features$DataTypeFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures', arg: Graph$Features$EdgeFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures', arg: Graph$Features$EdgePropertyFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures', arg: Graph$Features$ElementFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet', arg: Graph$Features$FeatureSet[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures', arg: Graph$Features$GraphFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures', arg: Graph$Features$PropertyFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures', arg: Graph$Features$VariableFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures', arg: Graph$Features$VertexFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures', arg: Graph$Features$VertexPropertyFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Hidden', arg: Graph$Hidden[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Hidden>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptIn', arg: Graph$OptIn[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$OptIn>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptIns', arg: Graph$OptIns[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$OptIns>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptOut', arg: Graph$OptOut[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$OptOut>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptOuts', arg: Graph$OptOuts[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$OptOuts>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Variables', arg: Graph$Variables[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Variables>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions', arg: Graph$Variables$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry', arg: AbstractIoRegistry[]): array_t<org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphMigrator', arg: GraphMigrator[]): array_t<org.apache.tinkerpop.gremlin.structure.io.GraphMigrator>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo', arg: GraphMLIo[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder', arg: GraphMLIo$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper', arg: GraphMLMapper[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder', arg: GraphMLMapper$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader', arg: GraphMLReader[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder', arg: GraphMLReader$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter', arg: GraphMLWriter[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder', arg: GraphMLWriter$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter', arg: GraphMLWriterHelper$IndentingXMLStreamWriter[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphReader', arg: GraphReader[]): array_t<org.apache.tinkerpop.gremlin.structure.io.GraphReader>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder', arg: GraphReader$ReaderBuilder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo', arg: GraphSONIo[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder', arg: GraphSONIo$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper', arg: GraphSONMapper[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder', arg: GraphSONMapper$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg: GraphSONReader[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder', arg: GraphSONReader$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens', arg: GraphSONTokens[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil', arg: GraphSONUtil[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion', arg: GraphSONVersion[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter', arg: GraphSONWriter[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder', arg: GraphSONWriter$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader', arg: LegacyGraphSONReader[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder', arg: LegacyGraphSONReader$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens', arg: LegacyGraphSONReader$GraphSONTokens[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphWriter', arg: GraphWriter[]): array_t<org.apache.tinkerpop.gremlin.structure.io.GraphWriter>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder', arg: GraphWriter$WriterBuilder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo', arg: GryoIo[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder', arg: GryoIo$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper', arg: GryoMapper[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder', arg: GryoMapper$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg: GryoPool[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type', arg: GryoPool$Type[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader', arg: GryoReader[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder', arg: GryoReader$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter', arg: GryoWriter[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder', arg: GryoWriter$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream', arg: VertexByteArrayInputStream[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator', arg: VertexTerminator[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.Io', arg: Io[]): array_t<org.apache.tinkerpop.gremlin.structure.io.Io>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Builder', arg: Io$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.Io$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions', arg: Io$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.IoCore', arg: IoCore[]): array_t<org.apache.tinkerpop.gremlin.structure.io.IoCore>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.IoRegistry', arg: IoRegistry[]): array_t<org.apache.tinkerpop.gremlin.structure.io.IoRegistry>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.Mapper', arg: Mapper[]): array_t<org.apache.tinkerpop.gremlin.structure.io.Mapper>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder', arg: Mapper$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Property', arg: Property[]): array_t<org.apache.tinkerpop.gremlin.structure.Property>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Property$Exceptions', arg: Property$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Property$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.PropertyType', arg: PropertyType[]): array_t<org.apache.tinkerpop.gremlin.structure.PropertyType>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.T', arg: T[]): array_t<org.apache.tinkerpop.gremlin.structure.T>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction', arg: Transaction[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR', arg: Transaction$CLOSE_BEHAVIOR[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions', arg: Transaction$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR', arg: Transaction$READ_WRITE_BEHAVIOR[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Status', arg: Transaction$Status[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction$Status>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Workload', arg: Transaction$Workload[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction$Workload>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction', arg: AbstractTransaction[]): array_t<org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg: AbstractTransaction$TransactionException[]): array_t<org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable', arg: Attachable[]): array_t<org.apache.tinkerpop.gremlin.structure.util.Attachable>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions', arg: Attachable$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Method', arg: Attachable$Method[]): array_t<org.apache.tinkerpop.gremlin.structure.util.Attachable$Method>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.Comparators', arg: Comparators[]): array_t<org.apache.tinkerpop.gremlin.structure.util.Comparators>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge', arg: DetachedEdge[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement', arg: DetachedElement[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory', arg: DetachedFactory[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath', arg: DetachedPath[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg: DetachedProperty[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex', arg: DetachedVertex[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg: DetachedVertexProperty[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.ElementHelper', arg: ElementHelper[]): array_t<org.apache.tinkerpop.gremlin.structure.util.ElementHelper>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor', arg: FeatureDescriptor[]): array_t<org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphFactory', arg: GraphFactory[]): array_t<org.apache.tinkerpop.gremlin.structure.util.GraphFactory>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper', arg: GraphVariableHelper[]): array_t<org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.Host', arg: Host[]): array_t<org.apache.tinkerpop.gremlin.structure.util.Host>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.StringFactory', arg: StringFactory[]): array_t<org.apache.tinkerpop.gremlin.structure.util.StringFactory>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Vertex', arg: Vertex[]): array_t<org.apache.tinkerpop.gremlin.structure.Vertex>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions', arg: Vertex$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty', arg: VertexProperty[]): array_t<org.apache.tinkerpop.gremlin.structure.VertexProperty>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality', arg: VertexProperty$Cardinality[]): array_t<org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality>;
    newArray(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions', arg: VertexProperty$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult', arg: TinkerComputerResult[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer', arg: TinkerGraphComputer[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView', arg: TinkerGraphView[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter', arg: TinkerMapEmitter[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory', arg: TinkerMemory[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger', arg: TinkerMessenger[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter', arg: TinkerReduceEmitter[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool', arg: TinkerWorkerPool[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge', arg: TinkerEdge[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement', arg: TinkerElement[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory', arg: TinkerFactory[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph', arg: TinkerGraph[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager', arg: TinkerGraph$DefaultIdManager[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager', arg: TinkerGraph$IdManager[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures', arg: TinkerGraph$TinkerGraphEdgeFeatures[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures', arg: TinkerGraph$TinkerGraphFeatures[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures', arg: TinkerGraph$TinkerGraphGraphFeatures[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures', arg: TinkerGraph$TinkerGraphVertexFeatures[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables', arg: TinkerGraphVariables[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper', arg: TinkerHelper[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty', arg: TinkerProperty[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex', arg: TinkerVertex[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex>;
    newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg: TinkerVertexProperty[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ArrayListSupplier', arg: ArrayListSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ArrayListSupplier>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.BulkSetSupplier', arg: BulkSetSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.BulkSetSupplier>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ChainedComparator', arg: ChainedComparator[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ChainedComparator>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ConstantSupplier', arg: ConstantSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ConstantSupplier>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.FunctionUtils', arg: FunctionUtils[]): array_t<org.apache.tinkerpop.gremlin.util.function_.FunctionUtils>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.HashMapSupplier', arg: HashMapSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.HashMapSupplier>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.HashSetSupplier', arg: HashSetSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.HashSetSupplier>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.MeanNumberSupplier', arg: MeanNumberSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.MeanNumberSupplier>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ScriptEngineLambda', arg: ScriptEngineLambda[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ScriptEngineLambda>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingBiConsumer', arg: ThrowingBiConsumer[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ThrowingBiConsumer>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingConsumer', arg: ThrowingConsumer[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ThrowingConsumer>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingFunction', arg: ThrowingFunction[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ThrowingFunction>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingSupplier', arg: ThrowingSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ThrowingSupplier>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.TraversableLambda', arg: TraversableLambda[]): array_t<org.apache.tinkerpop.gremlin.util.function_.TraversableLambda>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.TreeSupplier', arg: TreeSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.TreeSupplier>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.TriConsumer', arg: TriConsumer[]): array_t<org.apache.tinkerpop.gremlin.util.function_.TriConsumer>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.function.TriFunction', arg: TriFunction[]): array_t<org.apache.tinkerpop.gremlin.util.function_.TriFunction>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.Gremlin', arg: Gremlin[]): array_t<org.apache.tinkerpop.gremlin.util.Gremlin>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.ScriptEngineCache', arg: ScriptEngineCache[]): array_t<org.apache.tinkerpop.gremlin.util.ScriptEngineCache>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.Serializer', arg: Serializer[]): array_t<org.apache.tinkerpop.gremlin.util.Serializer>;
    newArray(className: 'org.apache.tinkerpop.gremlin.util.TimeUtil', arg: TimeUtil[]): array_t<org.apache.tinkerpop.gremlin.util.TimeUtil>;
    newArray(className: 'org.codehaus.groovy.ast.ClassNode', arg: ClassNode[]): array_t<org.codehaus.groovy.ast.ClassNode>;
    newArray(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg: CompilerConfiguration[]): array_t<org.codehaus.groovy.control.CompilerConfiguration>;
    newArray(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg: CompilationCustomizer[]): array_t<org.codehaus.groovy.control.customizers.CompilationCustomizer>;
    newArray(className: 'org.codehaus.groovy.runtime.NullObject', arg: NullObject[]): array_t<org.codehaus.groovy.runtime.NullObject>;
    newArray(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg: Groovysh[]): array_t<org.codehaus.groovy.tools.shell.Groovysh>;
    newArray(className: 'org.codehaus.groovy.util.ManagedReference', arg: ManagedReference[]): array_t<org.codehaus.groovy.util.ManagedReference>;
    newArray(className: 'org.codehaus.groovy.util.ReferenceBundle', arg: ReferenceBundle[]): array_t<org.codehaus.groovy.util.ReferenceBundle>;
    newArray<T>(className: string, arg: any[]): array_t<T>;

    import(className: 'co.redseal.gremlinnode.function.GlobFunction'): co.redseal.gremlinnode.function_.GlobFunction.Static;
    import(className: 'co.redseal.gremlinnode.function.GroovyLambda'): co.redseal.gremlinnode.function_.GroovyLambda.Static;
    import(className: 'co.redseal.gremlinnode.testing.TestClass'): co.redseal.gremlinnode.testing.TestClass.Static;
    import(className: 'co.redseal.util.StringInputStream'): co.redseal.util.StringInputStream.Static;
    import(className: 'groovy.lang.Binding'): groovy.lang.Binding.Static;
    import(className: 'groovy.lang.Closure'): groovy.lang.Closure.Static;
    import(className: 'groovy.lang.DelegatingMetaClass'): groovy.lang.DelegatingMetaClass.Static;
    import(className: 'groovy.lang.GroovyClassLoader'): groovy.lang.GroovyClassLoader.Static;
    import(className: 'groovy.lang.GroovyCodeSource'): groovy.lang.GroovyCodeSource.Static;
    import(className: 'groovy.lang.GroovyObjectSupport'): groovy.lang.GroovyObjectSupport.Static;
    import(className: 'groovy.lang.GroovyResourceLoader'): groovy.lang.GroovyResourceLoader.Static;
    import(className: 'groovy.lang.IntRange'): groovy.lang.IntRange.Static;
    import(className: 'groovy.lang.MetaBeanProperty'): groovy.lang.MetaBeanProperty.Static;
    import(className: 'groovy.lang.MetaClass'): groovy.lang.MetaClass.Static;
    import(className: 'groovy.lang.MetaMethod'): groovy.lang.MetaMethod.Static;
    import(className: 'groovy.lang.MetaProperty'): groovy.lang.MetaProperty.Static;
    import(className: 'groovy.lang.Range'): groovy.lang.Range.Static;
    import(className: 'groovy.lang.Reference'): groovy.lang.Reference.Static;
    import(className: 'java.io.ByteArrayOutputStream'): java.io.ByteArrayOutputStream.Static;
    import(className: 'java.io.FileInputStream'): java.io.FileInputStream.Static;
    import(className: 'java.io.FileOutputStream'): java.io.FileOutputStream.Static;
    import(className: 'java.io.InputStream'): java.io.InputStream.Static;
    import(className: 'java.io.OutputStream'): java.io.OutputStream.Static;
    import(className: 'java.lang.Boolean'): java.lang.Boolean.Static;
    import(className: 'java.lang.Class'): java.lang.Class.Static;
    import(className: 'java.lang.ClassLoader'): java.lang.ClassLoader.Static;
    import(className: 'java.lang.Double'): java.lang.Double.Static;
    import(className: 'java.lang.Enum'): java.lang.Enum.Static;
    import(className: 'java.lang.Float'): java.lang.Float.Static;
    import(className: 'java.lang.Integer'): java.lang.Integer.Static;
    import(className: 'java.lang.Iterable'): java.lang.Iterable.Static;
    import(className: 'java.lang.Long'): java.lang.Long.Static;
    import(className: 'java.lang.Number'): java.lang.Number.Static;
    import(className: 'java.lang.Object'): java.lang.Object.Static;
    import(className: 'java.lang.reflect.Array'): java.lang.reflect.Array.Static;
    import(className: 'java.lang.Short'): java.lang.Short.Static;
    import(className: 'java.lang.String'): java.lang.String.Static;
    import(className: 'java.nio.charset.Charset'): java.nio.charset.Charset.Static;
    import(className: 'java.nio.charset.StandardCharsets'): java.nio.charset.StandardCharsets.Static;
    import(className: 'java.util.AbstractCollection'): java.util.AbstractCollection.Static;
    import(className: 'java.util.AbstractList'): java.util.AbstractList.Static;
    import(className: 'java.util.AbstractMap'): java.util.AbstractMap.Static;
    import(className: 'java.util.AbstractSet'): java.util.AbstractSet.Static;
    import(className: 'java.util.ArrayList'): java.util.ArrayList.Static;
    import(className: 'java.util.Collection'): java.util.Collection.Static;
    import(className: 'java.util.Comparator'): java.util.Comparator.Static;
    import(className: 'java.util.function.BiConsumer'): java.util.function_.BiConsumer.Static;
    import(className: 'java.util.function.BiFunction'): java.util.function_.BiFunction.Static;
    import(className: 'java.util.function.BinaryOperator'): java.util.function_.BinaryOperator.Static;
    import(className: 'java.util.function.BiPredicate'): java.util.function_.BiPredicate.Static;
    import(className: 'java.util.function.Consumer'): java.util.function_.Consumer.Static;
    import(className: 'java.util.function.Function'): java.util.function_.Function.Static;
    import(className: 'java.util.function.Predicate'): java.util.function_.Predicate.Static;
    import(className: 'java.util.function.Supplier'): java.util.function_.Supplier.Static;
    import(className: 'java.util.function.UnaryOperator'): java.util.function_.UnaryOperator.Static;
    import(className: 'java.util.HashMap'): java.util.HashMap.Static;
    import(className: 'java.util.HashSet'): java.util.HashSet.Static;
    import(className: 'java.util.Iterator'): java.util.Iterator.Static;
    import(className: 'java.util.LinkedHashMap'): java.util.LinkedHashMap.Static;
    import(className: 'java.util.List'): java.util.List.Static;
    import(className: 'java.util.ListIterator'): java.util.ListIterator.Static;
    import(className: 'java.util.Map'): java.util.Map.Static;
    import(className: 'java.util.Map$Entry'): java.util.Map$Entry.Static;
    import(className: 'java.util.NoSuchElementException'): java.util.NoSuchElementException.Static;
    import(className: 'java.util.Set'): java.util.Set.Static;
    import(className: 'javax.script.AbstractScriptEngine'): javax.script.AbstractScriptEngine.Static;
    import(className: 'javax.script.Bindings'): javax.script.Bindings.Static;
    import(className: 'javax.script.CompiledScript'): javax.script.CompiledScript.Static;
    import(className: 'javax.script.ScriptContext'): javax.script.ScriptContext.Static;
    import(className: 'javax.script.ScriptEngine'): javax.script.ScriptEngine.Static;
    import(className: 'javax.script.ScriptEngineFactory'): javax.script.ScriptEngineFactory.Static;
    import(className: 'org.apache.tinkerpop.gremlin.groovy.function.GComparator'): org.apache.tinkerpop.gremlin.groovy.function_.GComparator.Static;
    import(className: 'org.apache.tinkerpop.gremlin.groovy.function.GFunction'): org.apache.tinkerpop.gremlin.groovy.function_.GFunction.Static;
    import(className: 'org.apache.tinkerpop.gremlin.groovy.function.GSupplier'): org.apache.tinkerpop.gremlin.groovy.function_.GSupplier.Static;
    import(className: 'org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator'): org.apache.tinkerpop.gremlin.groovy.function_.GUnaryOperator.Static;
    import(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine'): org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce'): org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder'): org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce'): org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder'): org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram'): org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder'): org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.ComputerResult'): org.apache.tinkerpop.gremlin.process.computer.ComputerResult.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer'): org.apache.tinkerpop.gremlin.process.computer.GraphComputer.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions'): org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features'): org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist'): org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph'): org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.KeyValue'): org.apache.tinkerpop.gremlin.process.computer.KeyValue.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce'): org.apache.tinkerpop.gremlin.process.computer.MapReduce.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter'): org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject'): org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter'): org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage'): org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory'): org.apache.tinkerpop.gremlin.process.computer.Memory.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory$Admin'): org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions'): org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageCombiner'): org.apache.tinkerpop.gremlin.process.computer.MessageCombiner.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope'): org.apache.tinkerpop.gremlin.process.computer.MessageScope.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global'): org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local'): org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier'): org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.Messenger'): org.apache.tinkerpop.gremlin.process.computer.Messenger.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce'): org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder'): org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner'): org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram'): org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder'): org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger'): org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram'): org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder'): org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner'): org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor'): org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects'): org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram'): org.apache.tinkerpop.gremlin.process.computer.VertexProgram.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder'): org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features'): org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Compare'): org.apache.tinkerpop.gremlin.process.traversal.Compare.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Contains'): org.apache.tinkerpop.gremlin.process.traversal.Contains.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__'): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal'): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal'): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal'): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin'): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource'): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder'): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub'): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine'): org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder'): org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy'): org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine'): org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder'): org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Operator'): org.apache.tinkerpop.gremlin.process.traversal.Operator.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Order'): org.apache.tinkerpop.gremlin.process.traversal.Order.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.P'): org.apache.tinkerpop.gremlin.process.traversal.P.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path'): org.apache.tinkerpop.gremlin.process.traversal.Path.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions'): org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Scope'): org.apache.tinkerpop.gremlin.process.traversal.Scope.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Step'): org.apache.tinkerpop.gremlin.process.traversal.Step.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep'): org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet'): org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep'): org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep'): org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep'): org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator'): org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator'): org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath'): org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep'): org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator'): org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer'): org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath'): org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper'): org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath'): org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep'): org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep'): org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep'): org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce'): org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet'): org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep'): org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator'): org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree'): org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy'): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy'): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder'): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy'): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder'): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback'): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy'): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder'): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy'): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder'): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException'): org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy'): org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy'): org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy'): org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal'): org.apache.tinkerpop.gremlin.process.traversal.Traversal.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin'): org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions'): org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine'): org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder'): org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type'): org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects'): org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions'): org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSource'): org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder'): org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies'): org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache'): org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy'): org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy'): org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy'): org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy'): org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy'): org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy'): org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traverser'): org.apache.tinkerpop.gremlin.process.traversal.Traverser.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin'): org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator'): org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.AndP'): org.apache.tinkerpop.gremlin.process.traversal.util.AndP.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP'): org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal'): org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects'): org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies'): org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics'): org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal'): org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects'): org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies'): org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException'): org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics'): org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.Metrics'): org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics'): org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.OrP'): org.apache.tinkerpop.gremlin.process.traversal.util.OrP.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper'): org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics'): org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition'): org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction'): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper'): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix'): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics'): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction'): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP'): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing'): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction'): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper'): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil'): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.Static;
    import(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple'): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Direction'): org.apache.tinkerpop.gremlin.structure.Direction.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Edge'): org.apache.tinkerpop.gremlin.structure.Edge.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Edge$Exceptions'): org.apache.tinkerpop.gremlin.structure.Edge$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Element'): org.apache.tinkerpop.gremlin.structure.Element.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Element$Exceptions'): org.apache.tinkerpop.gremlin.structure.Element$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph'): org.apache.tinkerpop.gremlin.structure.Graph.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Exceptions'): org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features'): org.apache.tinkerpop.gremlin.structure.Graph$Features.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures'): org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures'): org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures'): org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures'): org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet'): org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures'): org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures'): org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures'): org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures'): org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures'): org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Hidden'): org.apache.tinkerpop.gremlin.structure.Graph$Hidden.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptIn'): org.apache.tinkerpop.gremlin.structure.Graph$OptIn.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptIns'): org.apache.tinkerpop.gremlin.structure.Graph$OptIns.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptOut'): org.apache.tinkerpop.gremlin.structure.Graph$OptOut.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptOuts'): org.apache.tinkerpop.gremlin.structure.Graph$OptOuts.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Variables'): org.apache.tinkerpop.gremlin.structure.Graph$Variables.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions'): org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry'): org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphMigrator'): org.apache.tinkerpop.gremlin.structure.io.GraphMigrator.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo'): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder'): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper'): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder'): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader'): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder'): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter'): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder'): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter'): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphReader'): org.apache.tinkerpop.gremlin.structure.io.GraphReader.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder'): org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo'): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder'): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper'): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder'): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader'): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder'): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens'): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil'): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion'): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter'): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder'): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader'): org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder'): org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens'): org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphWriter'): org.apache.tinkerpop.gremlin.structure.io.GraphWriter.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder'): org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo'): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder'): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper'): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder'): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool'): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type'): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader'): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder'): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter'): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder'): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream'): org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator'): org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.Io'): org.apache.tinkerpop.gremlin.structure.io.Io.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Builder'): org.apache.tinkerpop.gremlin.structure.io.Io$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions'): org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.IoCore'): org.apache.tinkerpop.gremlin.structure.io.IoCore.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.IoRegistry'): org.apache.tinkerpop.gremlin.structure.io.IoRegistry.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.Mapper'): org.apache.tinkerpop.gremlin.structure.io.Mapper.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder'): org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Property'): org.apache.tinkerpop.gremlin.structure.Property.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Property$Exceptions'): org.apache.tinkerpop.gremlin.structure.Property$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.PropertyType'): org.apache.tinkerpop.gremlin.structure.PropertyType.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.T'): org.apache.tinkerpop.gremlin.structure.T.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Transaction'): org.apache.tinkerpop.gremlin.structure.Transaction.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR'): org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions'): org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR'): org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Status'): org.apache.tinkerpop.gremlin.structure.Transaction$Status.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Workload'): org.apache.tinkerpop.gremlin.structure.Transaction$Workload.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction'): org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException'): org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable'): org.apache.tinkerpop.gremlin.structure.util.Attachable.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions'): org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Method'): org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.Comparators'): org.apache.tinkerpop.gremlin.structure.util.Comparators.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge'): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement'): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory'): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath'): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty'): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex'): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty'): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.ElementHelper'): org.apache.tinkerpop.gremlin.structure.util.ElementHelper.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor'): org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphFactory'): org.apache.tinkerpop.gremlin.structure.util.GraphFactory.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper'): org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.Host'): org.apache.tinkerpop.gremlin.structure.util.Host.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.util.StringFactory'): org.apache.tinkerpop.gremlin.structure.util.StringFactory.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Vertex'): org.apache.tinkerpop.gremlin.structure.Vertex.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions'): org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty'): org.apache.tinkerpop.gremlin.structure.VertexProperty.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality'): org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality.Static;
    import(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions'): org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult'): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer'): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView'): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter'): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory'): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger'): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter'): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool'): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex.Static;
    import(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty'): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.ArrayListSupplier'): org.apache.tinkerpop.gremlin.util.function_.ArrayListSupplier.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.BulkSetSupplier'): org.apache.tinkerpop.gremlin.util.function_.BulkSetSupplier.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.ChainedComparator'): org.apache.tinkerpop.gremlin.util.function_.ChainedComparator.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.ConstantSupplier'): org.apache.tinkerpop.gremlin.util.function_.ConstantSupplier.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.FunctionUtils'): org.apache.tinkerpop.gremlin.util.function_.FunctionUtils.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.HashMapSupplier'): org.apache.tinkerpop.gremlin.util.function_.HashMapSupplier.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.HashSetSupplier'): org.apache.tinkerpop.gremlin.util.function_.HashSetSupplier.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.MeanNumberSupplier'): org.apache.tinkerpop.gremlin.util.function_.MeanNumberSupplier.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.ScriptEngineLambda'): org.apache.tinkerpop.gremlin.util.function_.ScriptEngineLambda.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingBiConsumer'): org.apache.tinkerpop.gremlin.util.function_.ThrowingBiConsumer.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingConsumer'): org.apache.tinkerpop.gremlin.util.function_.ThrowingConsumer.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingFunction'): org.apache.tinkerpop.gremlin.util.function_.ThrowingFunction.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingSupplier'): org.apache.tinkerpop.gremlin.util.function_.ThrowingSupplier.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.TraversableLambda'): org.apache.tinkerpop.gremlin.util.function_.TraversableLambda.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.TreeSupplier'): org.apache.tinkerpop.gremlin.util.function_.TreeSupplier.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.TriConsumer'): org.apache.tinkerpop.gremlin.util.function_.TriConsumer.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.function.TriFunction'): org.apache.tinkerpop.gremlin.util.function_.TriFunction.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.Gremlin'): org.apache.tinkerpop.gremlin.util.Gremlin.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.ScriptEngineCache'): org.apache.tinkerpop.gremlin.util.ScriptEngineCache.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.Serializer'): org.apache.tinkerpop.gremlin.util.Serializer.Static;
    import(className: 'org.apache.tinkerpop.gremlin.util.TimeUtil'): org.apache.tinkerpop.gremlin.util.TimeUtil.Static;
    import(className: 'org.codehaus.groovy.ast.ClassNode'): org.codehaus.groovy.ast.ClassNode.Static;
    import(className: 'org.codehaus.groovy.control.CompilerConfiguration'): org.codehaus.groovy.control.CompilerConfiguration.Static;
    import(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer'): org.codehaus.groovy.control.customizers.CompilationCustomizer.Static;
    import(className: 'org.codehaus.groovy.runtime.NullObject'): org.codehaus.groovy.runtime.NullObject.Static;
    import(className: 'org.codehaus.groovy.tools.shell.Groovysh'): org.codehaus.groovy.tools.shell.Groovysh.Static;
    import(className: 'org.codehaus.groovy.util.ManagedReference'): org.codehaus.groovy.util.ManagedReference.Static;
    import(className: 'org.codehaus.groovy.util.ReferenceBundle'): org.codehaus.groovy.util.ReferenceBundle.Static;
    import(className: string): any;

    newInstance(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t, arg1: ScriptEngine, cb: Callback<GroovyLambda>): void;
    newInstance(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t, cb: Callback<GroovyLambda>): void;
    newInstance(className: 'co.redseal.gremlinnode.testing.TestClass', cb: Callback<TestClass>): void;
    newInstance(className: 'co.redseal.util.StringInputStream', cb: Callback<StringInputStream>): void;
    newInstance(className: 'groovy.lang.Binding', arg0: array_t<string_t>, cb: Callback<Binding>): void;
    newInstance(className: 'groovy.lang.Binding', arg0: Map, cb: Callback<Binding>): void;
    newInstance(className: 'groovy.lang.Binding', cb: Callback<Binding>): void;
    newInstance(className: 'groovy.lang.Closure', arg0: object_t, arg1: object_t, cb: Callback<Closure>): void;
    newInstance(className: 'groovy.lang.Closure', arg0: object_t, cb: Callback<Closure>): void;
    newInstance(className: 'groovy.lang.DelegatingMetaClass', arg0: MetaClass, cb: Callback<DelegatingMetaClass>): void;
    newInstance(className: 'groovy.lang.DelegatingMetaClass', arg0: Class, cb: Callback<DelegatingMetaClass>): void;
    newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration, arg2: boolean_t, cb: Callback<GroovyClassLoader>): void;
    newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration, cb: Callback<GroovyClassLoader>): void;
    newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: GroovyClassLoader, cb: Callback<GroovyClassLoader>): void;
    newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, cb: Callback<GroovyClassLoader>): void;
    newInstance(className: 'groovy.lang.GroovyClassLoader', cb: Callback<GroovyClassLoader>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: string_t, arg1: string_t, arg2: string_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, arg2: string_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, cb: Callback<GroovyCodeSource>): void;
    newInstance(className: 'groovy.lang.GroovyObjectSupport', cb: Callback<GroovyObjectSupport>): void;
    newInstance(className: 'groovy.lang.IntRange', arg0: boolean_t, arg1: integer_t, arg2: integer_t, cb: Callback<IntRange>): void;
    newInstance(className: 'groovy.lang.IntRange', arg0: integer_t, arg1: integer_t, cb: Callback<IntRange>): void;
    newInstance(className: 'groovy.lang.MetaBeanProperty', arg0: string_t, arg1: Class, arg2: MetaMethod, arg3: MetaMethod, cb: Callback<MetaBeanProperty>): void;
    newInstance(className: 'groovy.lang.MetaMethod', arg0: array_t<Class>, cb: Callback<MetaMethod>): void;
    newInstance(className: 'groovy.lang.MetaMethod', cb: Callback<MetaMethod>): void;
    newInstance(className: 'groovy.lang.MetaProperty', arg0: string_t, arg1: Class, cb: Callback<MetaProperty>): void;
    newInstance(className: 'groovy.lang.Reference', arg0: object_t, cb: Callback<Reference>): void;
    newInstance(className: 'groovy.lang.Reference', cb: Callback<Reference>): void;
    newInstance(className: 'java.io.ByteArrayOutputStream', arg0: integer_t, cb: Callback<ByteArrayOutputStream>): void;
    newInstance(className: 'java.io.ByteArrayOutputStream', cb: Callback<ByteArrayOutputStream>): void;
    newInstance(className: 'java.io.FileInputStream', arg0: object_t, cb: Callback<FileInputStream>): void;
    newInstance(className: 'java.io.FileInputStream', arg0: string_t, cb: Callback<FileInputStream>): void;
    newInstance(className: 'java.io.FileInputStream', arg0: object_t, cb: Callback<FileInputStream>): void;
    newInstance(className: 'java.io.FileOutputStream', arg0: string_t, arg1: boolean_t, cb: Callback<FileOutputStream>): void;
    newInstance(className: 'java.io.FileOutputStream', arg0: object_t, arg1: boolean_t, cb: Callback<FileOutputStream>): void;
    newInstance(className: 'java.io.FileOutputStream', arg0: object_t, cb: Callback<FileOutputStream>): void;
    newInstance(className: 'java.io.FileOutputStream', arg0: string_t, cb: Callback<FileOutputStream>): void;
    newInstance(className: 'java.io.FileOutputStream', arg0: object_t, cb: Callback<FileOutputStream>): void;
    newInstance(className: 'java.io.InputStream', cb: Callback<InputStream>): void;
    newInstance(className: 'java.io.OutputStream', cb: Callback<OutputStream>): void;
    newInstance(className: 'java.lang.Boolean', arg0: string_t, cb: Callback<boolean>): void;
    newInstance(className: 'java.lang.Boolean', arg0: boolean_t, cb: Callback<boolean>): void;
    newInstance(className: 'java.lang.Double', arg0: string_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Double', arg0: double_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Float', arg0: string_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Float', arg0: float_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Float', arg0: double_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Integer', arg0: string_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Integer', arg0: integer_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Long', arg0: string_t, cb: Callback<longValue_t>): void;
    newInstance(className: 'java.lang.Long', arg0: long_t, cb: Callback<longValue_t>): void;
    newInstance(className: 'java.lang.Number', cb: Callback<number>): void;
    newInstance(className: 'java.lang.Object', cb: Callback<object_t>): void;
    newInstance(className: 'java.lang.Short', arg0: string_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Short', arg0: short_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Charset, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: Charset, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_array_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', cb: Callback<string>): void;
    newInstance(className: 'java.util.ArrayList', arg0: Collection, cb: Callback<ArrayList>): void;
    newInstance(className: 'java.util.ArrayList', arg0: integer_t, cb: Callback<ArrayList>): void;
    newInstance(className: 'java.util.ArrayList', cb: Callback<ArrayList>): void;
    newInstance(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t, cb: Callback<HashMap>): void;
    newInstance(className: 'java.util.HashMap', arg0: Map, cb: Callback<HashMap>): void;
    newInstance(className: 'java.util.HashMap', arg0: integer_t, cb: Callback<HashMap>): void;
    newInstance(className: 'java.util.HashMap', cb: Callback<HashMap>): void;
    newInstance(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t, cb: Callback<HashSet>): void;
    newInstance(className: 'java.util.HashSet', arg0: Collection, cb: Callback<HashSet>): void;
    newInstance(className: 'java.util.HashSet', arg0: integer_t, cb: Callback<HashSet>): void;
    newInstance(className: 'java.util.HashSet', cb: Callback<HashSet>): void;
    newInstance(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, arg2: boolean_t, cb: Callback<LinkedHashMap>): void;
    newInstance(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, cb: Callback<LinkedHashMap>): void;
    newInstance(className: 'java.util.LinkedHashMap', arg0: Map, cb: Callback<LinkedHashMap>): void;
    newInstance(className: 'java.util.LinkedHashMap', arg0: integer_t, cb: Callback<LinkedHashMap>): void;
    newInstance(className: 'java.util.LinkedHashMap', cb: Callback<LinkedHashMap>): void;
    newInstance(className: 'java.util.NoSuchElementException', arg0: string_t, cb: Callback<NoSuchElementException>): void;
    newInstance(className: 'java.util.NoSuchElementException', cb: Callback<NoSuchElementException>): void;
    newInstance(className: 'javax.script.AbstractScriptEngine', arg0: Bindings, cb: Callback<AbstractScriptEngine>): void;
    newInstance(className: 'javax.script.AbstractScriptEngine', cb: Callback<AbstractScriptEngine>): void;
    newInstance(className: 'javax.script.CompiledScript', cb: Callback<CompiledScript>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.function.GComparator', arg0: Closure, cb: Callback<GComparator>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.function.GFunction', arg0: Closure, cb: Callback<GFunction>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.function.GSupplier', arg0: Closure, cb: Callback<GSupplier>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator', arg0: Closure, cb: Callback<GUnaryOperator>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t, arg2: long_t, cb: Callback<GremlinGroovyScriptEngine>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t, cb: Callback<GremlinGroovyScriptEngine>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, cb: Callback<GremlinGroovyScriptEngine>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', cb: Callback<GremlinGroovyScriptEngine>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.KeyValue', arg0: object_t, arg1: object_t, cb: Callback<KeyValue>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject', cb: Callback<MapReduce$NullObject>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope', cb: Callback<MessageScope>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier', arg0: MessageScope$Local, cb: Callback<MessageScope$Local$ReverseTraversalSupplier>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger', arg0: Messenger, arg1: object_t, cb: Callback<SingleMessenger>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder', cb: Callback<TraversalVertexProgram$Builder>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor', cb: Callback<TraverserExecutor>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal', arg0: Graph, cb: Callback<DefaultGraphTraversal>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal', cb: Callback<DefaultGraphTraversal>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub', arg0: GraphTraversal$Admin, arg1: boolean_t, cb: Callback<GraphTraversalSource$GraphTraversalSourceStub>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder', cb: Callback<ComputerTraversalEngine$Builder>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder', cb: Callback<StandardTraversalEngine$Builder>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.P', arg0: BiPredicate, arg1: object_t, cb: Callback<P>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions', cb: Callback<Path$Exceptions>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep', arg0: Traversal$Admin, cb: Callback<AbstractStep>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet', cb: Callback<BulkSet>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep', arg0: Traversal$Admin, cb: Callback<CollectingBarrierStep>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep', arg0: Traversal$Admin, cb: Callback<ComputerAwareStep>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep', arg0: ComputerAwareStep, arg1: Traversal$Admin, cb: Callback<ComputerAwareStep$EndStep>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator', arg0: Function, arg1: Comparator, cb: Callback<ElementFunctionComparator>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator', arg0: string_t, arg1: Comparator, cb: Callback<ElementValueComparator>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator', arg0: Step, cb: Callback<ExpandableStepIterator>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer', arg0: string_t, arg1: P, cb: Callback<HasContainer>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep', arg0: Traversal$Admin, cb: Callback<NoOpBarrierStep>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep', arg0: Traversal$Admin, cb: Callback<PathIdentityStep>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep', arg0: Traversal$Admin, cb: Callback<ReducingBarrierStep>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce', arg0: Supplier, arg1: BiFunction, cb: Callback<ReducingBarrierStep$DefaultMapReduce>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep', arg0: Traversal$Admin, cb: Callback<SupplyingBarrierStep>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator', arg0: Traversal$Admin, arg1: Comparator, cb: Callback<TraversalComparator>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', arg0: array_t<Map$Entry>, cb: Callback<Tree>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', arg0: object_array_t, cb: Callback<Tree>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', cb: Callback<Tree>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback', arg0: EventStrategy, arg1: object_t, cb: Callback<EventStrategy$EventStrategyCallback>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException', arg0: string_t, arg1: Traversal, cb: Callback<ComputerVerificationException>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions', cb: Callback<Traversal$Exceptions>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions', cb: Callback<TraversalSideEffects$Exceptions>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache', cb: Callback<TraversalStrategies$GlobalCache>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.AndP', arg0: P, arg1: array_t<P>, cb: Callback<AndP>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP', arg0: P, arg1: array_t<P>, cb: Callback<ConjunctionP>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal', arg0: Graph, cb: Callback<DefaultTraversal>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal', cb: Callback<DefaultTraversal>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects', cb: Callback<DefaultTraversalSideEffects>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies', cb: Callback<DefaultTraversalStrategies>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics', arg0: string_t, arg1: string_t, arg2: DependantMutableMetrics, cb: Callback<DependantMutableMetrics>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics', arg0: string_t, arg1: string_t, cb: Callback<MutableMetrics>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.OrP', arg0: P, arg1: array_t<P>, cb: Callback<OrP>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics', cb: Callback<StandardTraversalMetrics>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition', cb: Callback<StepPosition>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction', arg0: Class, cb: Callback<TraversalClassFunction>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix', arg0: Traversal$Admin, cb: Callback<TraversalMatrix>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction', arg0: Traversal$Admin, cb: Callback<TraversalObjectFunction>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Traversal$Admin, arg1: object_t, arg2: boolean_t, cb: Callback<TraversalP>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Traversal$Admin, arg1: boolean_t, cb: Callback<TraversalP>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing', arg0: array_t<Traversal$Admin>, cb: Callback<TraversalRing>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction', arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t, cb: Callback<TraversalScriptFunction>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple', arg0: Collection, cb: Callback<TraversalUtil$Multiple>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Exceptions', cb: Callback<Graph$Exceptions>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Hidden', cb: Callback<Graph$Hidden>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry', cb: Callback<AbstractIoRegistry>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphMigrator', cb: Callback<GraphMigrator>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo', arg0: Graph, cb: Callback<GraphMLIo>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder', cb: Callback<GraphMLIo$Builder>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper', cb: Callback<GraphMLMapper>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder', cb: Callback<GraphMLMapper$Builder>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter', arg0: object_t, cb: Callback<GraphMLWriterHelper$IndentingXMLStreamWriter>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo', arg0: IoRegistry, arg1: Graph, cb: Callback<GraphSONIo>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder', cb: Callback<GraphSONIo$Builder>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg0: GraphSONMapper, arg1: long_t, cb: Callback<GraphSONReader>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader', arg0: object_t, arg1: long_t, cb: Callback<LegacyGraphSONReader>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens', cb: Callback<LegacyGraphSONReader$GraphSONTokens>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo', arg0: IoRegistry, arg1: Graph, cb: Callback<GryoIo>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder', cb: Callback<GryoIo$Builder>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t, arg1: GryoPool$Type, arg2: object_t, cb: Callback<GryoPool>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: object_t, cb: Callback<GryoPool>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t, cb: Callback<GryoPool>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream', arg0: InputStream, cb: Callback<VertexByteArrayInputStream>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions', cb: Callback<Io$Exceptions>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.IoCore', cb: Callback<IoCore>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Workload', arg0: Graph, arg1: Function, cb: Callback<Transaction$Workload>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction', arg0: Graph, cb: Callback<AbstractTransaction>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t, arg1: object_t, cb: Callback<AbstractTransaction$TransactionException>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: object_t, cb: Callback<AbstractTransaction$TransactionException>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t, cb: Callback<AbstractTransaction$TransactionException>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Method', cb: Callback<Attachable$Method>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.Comparators', cb: Callback<Comparators>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge', arg0: object_t, arg1: string_t, arg2: Map, arg3: object_t, arg4: object_t, cb: Callback<DetachedEdge>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t, arg2: Element, cb: Callback<DetachedProperty>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t, cb: Callback<DetachedProperty>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex', arg0: object_t, arg1: string_t, arg2: Map, cb: Callback<DetachedVertex>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Map, arg4: Vertex, cb: Callback<DetachedVertexProperty>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Map, cb: Callback<DetachedVertexProperty>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphFactory', cb: Callback<GraphFactory>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper', cb: Callback<GraphVariableHelper>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult', arg0: Graph, arg1: Memory, cb: Callback<TinkerComputerResult>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer', arg0: TinkerGraph, cb: Callback<TinkerGraphComputer>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView', arg0: Set, cb: Callback<TinkerGraphView>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter', arg0: boolean_t, cb: Callback<TinkerMapEmitter>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory', arg0: VertexProgram, arg1: Set, cb: Callback<TinkerMemory>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger', arg0: Vertex, arg1: object_t, arg2: object_t, cb: Callback<TinkerMessenger>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter', cb: Callback<TinkerReduceEmitter>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool', arg0: integer_t, cb: Callback<TinkerWorkerPool>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables', cb: Callback<TinkerGraphVariables>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty', arg0: Element, arg1: string_t, arg2: object_t, cb: Callback<TinkerProperty>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: object_t, arg1: TinkerVertex, arg2: string_t, arg3: object_t, arg4: object_array_t, cb: Callback<TinkerVertexProperty>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: TinkerVertex, arg1: string_t, arg2: object_t, arg3: object_array_t, cb: Callback<TinkerVertexProperty>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.util.function.ChainedComparator', arg0: List, cb: Callback<ChainedComparator>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.util.function.ConstantSupplier', arg0: object_t, cb: Callback<ConstantSupplier>): void;
    newInstance(className: 'org.apache.tinkerpop.gremlin.util.function.ScriptEngineLambda', arg0: string_t, arg1: string_t, cb: Callback<ScriptEngineLambda>): void;
    newInstance(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: array_t<ClassNode>, arg4: object_array_t, cb: Callback<ClassNode>): void;
    newInstance(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode, cb: Callback<ClassNode>): void;
    newInstance(className: 'org.codehaus.groovy.ast.ClassNode', arg0: Class, cb: Callback<ClassNode>): void;
    newInstance(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: CompilerConfiguration, cb: Callback<CompilerConfiguration>): void;
    newInstance(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: object_t, cb: Callback<CompilerConfiguration>): void;
    newInstance(className: 'org.codehaus.groovy.control.CompilerConfiguration', cb: Callback<CompilerConfiguration>): void;
    newInstance(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg0: object_t, cb: Callback<CompilationCustomizer>): void;
    newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t, arg3: Closure, cb: Callback<Groovysh>): void;
    newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t, cb: Callback<Groovysh>): void;
    newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Binding, arg1: object_t, cb: Callback<Groovysh>): void;
    newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: object_t, cb: Callback<Groovysh>): void;
    newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', cb: Callback<Groovysh>): void;
    newInstance(className: 'org.codehaus.groovy.util.ManagedReference', arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<ManagedReference>): void;
    newInstance(className: 'org.codehaus.groovy.util.ManagedReference', arg0: ReferenceBundle, arg1: object_t, cb: Callback<ManagedReference>): void;
    newInstance(className: 'org.codehaus.groovy.util.ReferenceBundle', arg0: object_t, arg1: object_t, cb: Callback<ReferenceBundle>): void;
    newInstance(className: string, ...args: any[]): void;

    newInstanceSync(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t, arg1: ScriptEngine): GroovyLambda;
    newInstanceSync(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t): GroovyLambda;
    newInstanceSync(className: 'co.redseal.gremlinnode.testing.TestClass'): TestClass;
    newInstanceSync(className: 'co.redseal.util.StringInputStream'): StringInputStream;
    newInstanceSync(className: 'groovy.lang.Binding', arg0: array_t<string_t>): Binding;
    newInstanceSync(className: 'groovy.lang.Binding', arg0: Map): Binding;
    newInstanceSync(className: 'groovy.lang.Binding'): Binding;
    newInstanceSync(className: 'groovy.lang.Closure', arg0: object_t, arg1: object_t): Closure;
    newInstanceSync(className: 'groovy.lang.Closure', arg0: object_t): Closure;
    newInstanceSync(className: 'groovy.lang.DelegatingMetaClass', arg0: MetaClass): DelegatingMetaClass;
    newInstanceSync(className: 'groovy.lang.DelegatingMetaClass', arg0: Class): DelegatingMetaClass;
    newInstanceSync(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration, arg2: boolean_t): GroovyClassLoader;
    newInstanceSync(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration): GroovyClassLoader;
    newInstanceSync(className: 'groovy.lang.GroovyClassLoader', arg0: GroovyClassLoader): GroovyClassLoader;
    newInstanceSync(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader): GroovyClassLoader;
    newInstanceSync(className: 'groovy.lang.GroovyClassLoader'): GroovyClassLoader;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: string_t, arg1: string_t, arg2: string_t): GroovyCodeSource;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, arg2: string_t): GroovyCodeSource;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t): GroovyCodeSource;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): GroovyCodeSource;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): GroovyCodeSource;
    newInstanceSync(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): GroovyCodeSource;
    newInstanceSync(className: 'groovy.lang.GroovyObjectSupport'): GroovyObjectSupport;
    newInstanceSync(className: 'groovy.lang.IntRange', arg0: boolean_t, arg1: integer_t, arg2: integer_t): IntRange;
    newInstanceSync(className: 'groovy.lang.IntRange', arg0: integer_t, arg1: integer_t): IntRange;
    newInstanceSync(className: 'groovy.lang.MetaBeanProperty', arg0: string_t, arg1: Class, arg2: MetaMethod, arg3: MetaMethod): MetaBeanProperty;
    newInstanceSync(className: 'groovy.lang.MetaMethod', arg0: array_t<Class>): MetaMethod;
    newInstanceSync(className: 'groovy.lang.MetaMethod'): MetaMethod;
    newInstanceSync(className: 'groovy.lang.MetaProperty', arg0: string_t, arg1: Class): MetaProperty;
    newInstanceSync(className: 'groovy.lang.Reference', arg0: object_t): Reference;
    newInstanceSync(className: 'groovy.lang.Reference'): Reference;
    newInstanceSync(className: 'java.io.ByteArrayOutputStream', arg0: integer_t): ByteArrayOutputStream;
    newInstanceSync(className: 'java.io.ByteArrayOutputStream'): ByteArrayOutputStream;
    newInstanceSync(className: 'java.io.FileInputStream', arg0: object_t): FileInputStream;
    newInstanceSync(className: 'java.io.FileInputStream', arg0: string_t): FileInputStream;
    newInstanceSync(className: 'java.io.FileInputStream', arg0: object_t): FileInputStream;
    newInstanceSync(className: 'java.io.FileOutputStream', arg0: string_t, arg1: boolean_t): FileOutputStream;
    newInstanceSync(className: 'java.io.FileOutputStream', arg0: object_t, arg1: boolean_t): FileOutputStream;
    newInstanceSync(className: 'java.io.FileOutputStream', arg0: object_t): FileOutputStream;
    newInstanceSync(className: 'java.io.FileOutputStream', arg0: string_t): FileOutputStream;
    newInstanceSync(className: 'java.io.FileOutputStream', arg0: object_t): FileOutputStream;
    newInstanceSync(className: 'java.io.InputStream'): InputStream;
    newInstanceSync(className: 'java.io.OutputStream'): OutputStream;
    newInstanceSync(className: 'java.lang.Boolean', arg0: string_t): boolean;
    newInstanceSync(className: 'java.lang.Boolean', arg0: boolean_t): boolean;
    newInstanceSync(className: 'java.lang.Double', arg0: string_t): number;
    newInstanceSync(className: 'java.lang.Double', arg0: double_t): number;
    newInstanceSync(className: 'java.lang.Float', arg0: string_t): number;
    newInstanceSync(className: 'java.lang.Float', arg0: float_t): number;
    newInstanceSync(className: 'java.lang.Float', arg0: double_t): number;
    newInstanceSync(className: 'java.lang.Integer', arg0: string_t): number;
    newInstanceSync(className: 'java.lang.Integer', arg0: integer_t): number;
    newInstanceSync(className: 'java.lang.Long', arg0: string_t): longValue_t;
    newInstanceSync(className: 'java.lang.Long', arg0: long_t): longValue_t;
    newInstanceSync(className: 'java.lang.Number'): number;
    newInstanceSync(className: 'java.lang.Object'): object_t;
    newInstanceSync(className: 'java.lang.Short', arg0: string_t): number;
    newInstanceSync(className: 'java.lang.Short', arg0: short_t): number;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Charset): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: Charset): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_array_t): string;
    newInstanceSync(className: 'java.lang.String'): string;
    newInstanceSync(className: 'java.util.ArrayList', arg0: Collection): ArrayList;
    newInstanceSync(className: 'java.util.ArrayList', arg0: integer_t): ArrayList;
    newInstanceSync(className: 'java.util.ArrayList'): ArrayList;
    newInstanceSync(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t): HashMap;
    newInstanceSync(className: 'java.util.HashMap', arg0: Map): HashMap;
    newInstanceSync(className: 'java.util.HashMap', arg0: integer_t): HashMap;
    newInstanceSync(className: 'java.util.HashMap'): HashMap;
    newInstanceSync(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t): HashSet;
    newInstanceSync(className: 'java.util.HashSet', arg0: Collection): HashSet;
    newInstanceSync(className: 'java.util.HashSet', arg0: integer_t): HashSet;
    newInstanceSync(className: 'java.util.HashSet'): HashSet;
    newInstanceSync(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, arg2: boolean_t): LinkedHashMap;
    newInstanceSync(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t): LinkedHashMap;
    newInstanceSync(className: 'java.util.LinkedHashMap', arg0: Map): LinkedHashMap;
    newInstanceSync(className: 'java.util.LinkedHashMap', arg0: integer_t): LinkedHashMap;
    newInstanceSync(className: 'java.util.LinkedHashMap'): LinkedHashMap;
    newInstanceSync(className: 'java.util.NoSuchElementException', arg0: string_t): NoSuchElementException;
    newInstanceSync(className: 'java.util.NoSuchElementException'): NoSuchElementException;
    newInstanceSync(className: 'javax.script.AbstractScriptEngine', arg0: Bindings): AbstractScriptEngine;
    newInstanceSync(className: 'javax.script.AbstractScriptEngine'): AbstractScriptEngine;
    newInstanceSync(className: 'javax.script.CompiledScript'): CompiledScript;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.groovy.function.GComparator', arg0: Closure): GComparator;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.groovy.function.GFunction', arg0: Closure): GFunction;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.groovy.function.GSupplier', arg0: Closure): GSupplier;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator', arg0: Closure): GUnaryOperator;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t, arg2: long_t): GremlinGroovyScriptEngine;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t): GremlinGroovyScriptEngine;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t): GremlinGroovyScriptEngine;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine'): GremlinGroovyScriptEngine;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.computer.KeyValue', arg0: object_t, arg1: object_t): KeyValue;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject'): MapReduce$NullObject;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope'): MessageScope;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier', arg0: MessageScope$Local): MessageScope$Local$ReverseTraversalSupplier;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger', arg0: Messenger, arg1: object_t): SingleMessenger;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder'): TraversalVertexProgram$Builder;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor'): TraverserExecutor;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal', arg0: Graph): DefaultGraphTraversal;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal'): DefaultGraphTraversal;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub', arg0: GraphTraversal$Admin, arg1: boolean_t): GraphTraversalSource$GraphTraversalSourceStub;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder'): ComputerTraversalEngine$Builder;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder'): StandardTraversalEngine$Builder;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.P', arg0: BiPredicate, arg1: object_t): P;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions'): Path$Exceptions;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep', arg0: Traversal$Admin): AbstractStep;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet'): BulkSet;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep', arg0: Traversal$Admin): CollectingBarrierStep;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep', arg0: Traversal$Admin): ComputerAwareStep;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep', arg0: ComputerAwareStep, arg1: Traversal$Admin): ComputerAwareStep$EndStep;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator', arg0: Function, arg1: Comparator): ElementFunctionComparator;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator', arg0: string_t, arg1: Comparator): ElementValueComparator;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator', arg0: Step): ExpandableStepIterator;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer', arg0: string_t, arg1: P): HasContainer;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep', arg0: Traversal$Admin): NoOpBarrierStep;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep', arg0: Traversal$Admin): PathIdentityStep;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep', arg0: Traversal$Admin): ReducingBarrierStep;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce', arg0: Supplier, arg1: BiFunction): ReducingBarrierStep$DefaultMapReduce;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep', arg0: Traversal$Admin): SupplyingBarrierStep;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator', arg0: Traversal$Admin, arg1: Comparator): TraversalComparator;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', ...arg0: Map$Entry[]): Tree;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', ...arg0: object_t[]): Tree;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree'): Tree;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback', arg0: EventStrategy, arg1: object_t): EventStrategy$EventStrategyCallback;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException', arg0: string_t, arg1: Traversal): ComputerVerificationException;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions'): Traversal$Exceptions;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions'): TraversalSideEffects$Exceptions;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache'): TraversalStrategies$GlobalCache;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.AndP', arg0: P, ...arg1: P[]): AndP;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP', arg0: P, ...arg1: P[]): ConjunctionP;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal', arg0: Graph): DefaultTraversal;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal'): DefaultTraversal;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects'): DefaultTraversalSideEffects;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies'): DefaultTraversalStrategies;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics', arg0: string_t, arg1: string_t, arg2: DependantMutableMetrics): DependantMutableMetrics;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics', arg0: string_t, arg1: string_t): MutableMetrics;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.OrP', arg0: P, ...arg1: P[]): OrP;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics'): StandardTraversalMetrics;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition'): StepPosition;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction', arg0: Class): TraversalClassFunction;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix', arg0: Traversal$Admin): TraversalMatrix;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction', arg0: Traversal$Admin): TraversalObjectFunction;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Traversal$Admin, arg1: object_t, arg2: boolean_t): TraversalP;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Traversal$Admin, arg1: boolean_t): TraversalP;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing', ...arg0: Traversal$Admin[]): TraversalRing;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction', arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): TraversalScriptFunction;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple', arg0: Collection): TraversalUtil$Multiple;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Exceptions'): Graph$Exceptions;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Hidden'): Graph$Hidden;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry'): AbstractIoRegistry;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphMigrator'): GraphMigrator;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo', arg0: Graph): GraphMLIo;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder'): GraphMLIo$Builder;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper'): GraphMLMapper;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder'): GraphMLMapper$Builder;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter', arg0: object_t): GraphMLWriterHelper$IndentingXMLStreamWriter;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo', arg0: IoRegistry, arg1: Graph): GraphSONIo;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder'): GraphSONIo$Builder;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg0: GraphSONMapper, arg1: long_t): GraphSONReader;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader', arg0: object_t, arg1: long_t): LegacyGraphSONReader;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens'): LegacyGraphSONReader$GraphSONTokens;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo', arg0: IoRegistry, arg1: Graph): GryoIo;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder'): GryoIo$Builder;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t, arg1: GryoPool$Type, arg2: object_t): GryoPool;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: object_t): GryoPool;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t): GryoPool;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream', arg0: InputStream): VertexByteArrayInputStream;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions'): Io$Exceptions;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.io.IoCore'): IoCore;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Workload', arg0: Graph, arg1: Function): Transaction$Workload;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction', arg0: Graph): AbstractTransaction;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t, arg1: object_t): AbstractTransaction$TransactionException;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: object_t): AbstractTransaction$TransactionException;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t): AbstractTransaction$TransactionException;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Method'): Attachable$Method;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.Comparators'): Comparators;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge', arg0: object_t, arg1: string_t, arg2: Map, arg3: object_t, arg4: object_t): DetachedEdge;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t, arg2: Element): DetachedProperty;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t): DetachedProperty;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex', arg0: object_t, arg1: string_t, arg2: Map): DetachedVertex;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Map, arg4: Vertex): DetachedVertexProperty;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Map): DetachedVertexProperty;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphFactory'): GraphFactory;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper'): GraphVariableHelper;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult', arg0: Graph, arg1: Memory): TinkerComputerResult;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer', arg0: TinkerGraph): TinkerGraphComputer;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView', arg0: Set): TinkerGraphView;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter', arg0: boolean_t): TinkerMapEmitter;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory', arg0: VertexProgram, arg1: Set): TinkerMemory;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger', arg0: Vertex, arg1: object_t, arg2: object_t): TinkerMessenger;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter'): TinkerReduceEmitter;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool', arg0: integer_t): TinkerWorkerPool;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables'): TinkerGraphVariables;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty', arg0: Element, arg1: string_t, arg2: object_t): TinkerProperty;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: object_t, arg1: TinkerVertex, arg2: string_t, arg3: object_t, ...arg4: object_t[]): TinkerVertexProperty;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: TinkerVertex, arg1: string_t, arg2: object_t, ...arg3: object_t[]): TinkerVertexProperty;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.util.function.ChainedComparator', arg0: List): ChainedComparator;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.util.function.ConstantSupplier', arg0: object_t): ConstantSupplier;
    newInstanceSync(className: 'org.apache.tinkerpop.gremlin.util.function.ScriptEngineLambda', arg0: string_t, arg1: string_t): ScriptEngineLambda;
    newInstanceSync(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: array_t<ClassNode>, arg4: object_array_t): ClassNode;
    newInstanceSync(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode): ClassNode;
    newInstanceSync(className: 'org.codehaus.groovy.ast.ClassNode', arg0: Class): ClassNode;
    newInstanceSync(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: CompilerConfiguration): CompilerConfiguration;
    newInstanceSync(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: object_t): CompilerConfiguration;
    newInstanceSync(className: 'org.codehaus.groovy.control.CompilerConfiguration'): CompilerConfiguration;
    newInstanceSync(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg0: object_t): CompilationCustomizer;
    newInstanceSync(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t, arg3: Closure): Groovysh;
    newInstanceSync(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t): Groovysh;
    newInstanceSync(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Binding, arg1: object_t): Groovysh;
    newInstanceSync(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: object_t): Groovysh;
    newInstanceSync(className: 'org.codehaus.groovy.tools.shell.Groovysh'): Groovysh;
    newInstanceSync(className: 'org.codehaus.groovy.util.ManagedReference', arg0: object_t, arg1: object_t, arg2: object_t): ManagedReference;
    newInstanceSync(className: 'org.codehaus.groovy.util.ManagedReference', arg0: ReferenceBundle, arg1: object_t): ManagedReference;
    newInstanceSync(className: 'org.codehaus.groovy.util.ReferenceBundle', arg0: object_t, arg1: object_t): ReferenceBundle;
    newInstanceSync(className: string, ...args: any[]): any;

    newInstancePromise(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t, arg1: ScriptEngine): Promise<GroovyLambda>;
    newInstancePromise(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t): Promise<GroovyLambda>;
    newInstancePromise(className: 'co.redseal.gremlinnode.testing.TestClass'): Promise<TestClass>;
    newInstancePromise(className: 'co.redseal.util.StringInputStream'): Promise<StringInputStream>;
    newInstancePromise(className: 'groovy.lang.Binding', arg0: array_t<string_t>): Promise<Binding>;
    newInstancePromise(className: 'groovy.lang.Binding', arg0: Map): Promise<Binding>;
    newInstancePromise(className: 'groovy.lang.Binding'): Promise<Binding>;
    newInstancePromise(className: 'groovy.lang.Closure', arg0: object_t, arg1: object_t): Promise<Closure>;
    newInstancePromise(className: 'groovy.lang.Closure', arg0: object_t): Promise<Closure>;
    newInstancePromise(className: 'groovy.lang.DelegatingMetaClass', arg0: MetaClass): Promise<DelegatingMetaClass>;
    newInstancePromise(className: 'groovy.lang.DelegatingMetaClass', arg0: Class): Promise<DelegatingMetaClass>;
    newInstancePromise(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration, arg2: boolean_t): Promise<GroovyClassLoader>;
    newInstancePromise(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader, arg1: CompilerConfiguration): Promise<GroovyClassLoader>;
    newInstancePromise(className: 'groovy.lang.GroovyClassLoader', arg0: GroovyClassLoader): Promise<GroovyClassLoader>;
    newInstancePromise(className: 'groovy.lang.GroovyClassLoader', arg0: ClassLoader): Promise<GroovyClassLoader>;
    newInstancePromise(className: 'groovy.lang.GroovyClassLoader'): Promise<GroovyClassLoader>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: string_t, arg1: string_t, arg2: string_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, arg2: string_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Promise<GroovyCodeSource>;
    newInstancePromise(className: 'groovy.lang.GroovyObjectSupport'): Promise<GroovyObjectSupport>;
    newInstancePromise(className: 'groovy.lang.IntRange', arg0: boolean_t, arg1: integer_t, arg2: integer_t): Promise<IntRange>;
    newInstancePromise(className: 'groovy.lang.IntRange', arg0: integer_t, arg1: integer_t): Promise<IntRange>;
    newInstancePromise(className: 'groovy.lang.MetaBeanProperty', arg0: string_t, arg1: Class, arg2: MetaMethod, arg3: MetaMethod): Promise<MetaBeanProperty>;
    newInstancePromise(className: 'groovy.lang.MetaMethod', arg0: array_t<Class>): Promise<MetaMethod>;
    newInstancePromise(className: 'groovy.lang.MetaMethod'): Promise<MetaMethod>;
    newInstancePromise(className: 'groovy.lang.MetaProperty', arg0: string_t, arg1: Class): Promise<MetaProperty>;
    newInstancePromise(className: 'groovy.lang.Reference', arg0: object_t): Promise<Reference>;
    newInstancePromise(className: 'groovy.lang.Reference'): Promise<Reference>;
    newInstancePromise(className: 'java.io.ByteArrayOutputStream', arg0: integer_t): Promise<ByteArrayOutputStream>;
    newInstancePromise(className: 'java.io.ByteArrayOutputStream'): Promise<ByteArrayOutputStream>;
    newInstancePromise(className: 'java.io.FileInputStream', arg0: object_t): Promise<FileInputStream>;
    newInstancePromise(className: 'java.io.FileInputStream', arg0: string_t): Promise<FileInputStream>;
    newInstancePromise(className: 'java.io.FileInputStream', arg0: object_t): Promise<FileInputStream>;
    newInstancePromise(className: 'java.io.FileOutputStream', arg0: string_t, arg1: boolean_t): Promise<FileOutputStream>;
    newInstancePromise(className: 'java.io.FileOutputStream', arg0: object_t, arg1: boolean_t): Promise<FileOutputStream>;
    newInstancePromise(className: 'java.io.FileOutputStream', arg0: object_t): Promise<FileOutputStream>;
    newInstancePromise(className: 'java.io.FileOutputStream', arg0: string_t): Promise<FileOutputStream>;
    newInstancePromise(className: 'java.io.FileOutputStream', arg0: object_t): Promise<FileOutputStream>;
    newInstancePromise(className: 'java.io.InputStream'): Promise<InputStream>;
    newInstancePromise(className: 'java.io.OutputStream'): Promise<OutputStream>;
    newInstancePromise(className: 'java.lang.Boolean', arg0: string_t): Promise<boolean>;
    newInstancePromise(className: 'java.lang.Boolean', arg0: boolean_t): Promise<boolean>;
    newInstancePromise(className: 'java.lang.Double', arg0: string_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Double', arg0: double_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Float', arg0: string_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Float', arg0: float_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Float', arg0: double_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Integer', arg0: string_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Integer', arg0: integer_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Long', arg0: string_t): Promise<longValue_t>;
    newInstancePromise(className: 'java.lang.Long', arg0: long_t): Promise<longValue_t>;
    newInstancePromise(className: 'java.lang.Number'): Promise<number>;
    newInstancePromise(className: 'java.lang.Object'): Promise<object_t>;
    newInstancePromise(className: 'java.lang.Short', arg0: string_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Short', arg0: short_t): Promise<number>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Charset): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: Charset): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_array_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String'): Promise<string>;
    newInstancePromise(className: 'java.util.ArrayList', arg0: Collection): Promise<ArrayList>;
    newInstancePromise(className: 'java.util.ArrayList', arg0: integer_t): Promise<ArrayList>;
    newInstancePromise(className: 'java.util.ArrayList'): Promise<ArrayList>;
    newInstancePromise(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t): Promise<HashMap>;
    newInstancePromise(className: 'java.util.HashMap', arg0: Map): Promise<HashMap>;
    newInstancePromise(className: 'java.util.HashMap', arg0: integer_t): Promise<HashMap>;
    newInstancePromise(className: 'java.util.HashMap'): Promise<HashMap>;
    newInstancePromise(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t): Promise<HashSet>;
    newInstancePromise(className: 'java.util.HashSet', arg0: Collection): Promise<HashSet>;
    newInstancePromise(className: 'java.util.HashSet', arg0: integer_t): Promise<HashSet>;
    newInstancePromise(className: 'java.util.HashSet'): Promise<HashSet>;
    newInstancePromise(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, arg2: boolean_t): Promise<LinkedHashMap>;
    newInstancePromise(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t): Promise<LinkedHashMap>;
    newInstancePromise(className: 'java.util.LinkedHashMap', arg0: Map): Promise<LinkedHashMap>;
    newInstancePromise(className: 'java.util.LinkedHashMap', arg0: integer_t): Promise<LinkedHashMap>;
    newInstancePromise(className: 'java.util.LinkedHashMap'): Promise<LinkedHashMap>;
    newInstancePromise(className: 'java.util.NoSuchElementException', arg0: string_t): Promise<NoSuchElementException>;
    newInstancePromise(className: 'java.util.NoSuchElementException'): Promise<NoSuchElementException>;
    newInstancePromise(className: 'javax.script.AbstractScriptEngine', arg0: Bindings): Promise<AbstractScriptEngine>;
    newInstancePromise(className: 'javax.script.AbstractScriptEngine'): Promise<AbstractScriptEngine>;
    newInstancePromise(className: 'javax.script.CompiledScript'): Promise<CompiledScript>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.groovy.function.GComparator', arg0: Closure): Promise<GComparator>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.groovy.function.GFunction', arg0: Closure): Promise<GFunction>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.groovy.function.GSupplier', arg0: Closure): Promise<GSupplier>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator', arg0: Closure): Promise<GUnaryOperator>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t, arg2: long_t): Promise<GremlinGroovyScriptEngine>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t): Promise<GremlinGroovyScriptEngine>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t): Promise<GremlinGroovyScriptEngine>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine'): Promise<GremlinGroovyScriptEngine>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.computer.KeyValue', arg0: object_t, arg1: object_t): Promise<KeyValue>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject'): Promise<MapReduce$NullObject>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope'): Promise<MessageScope>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier', arg0: MessageScope$Local): Promise<MessageScope$Local$ReverseTraversalSupplier>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger', arg0: Messenger, arg1: object_t): Promise<SingleMessenger>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder'): Promise<TraversalVertexProgram$Builder>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor'): Promise<TraverserExecutor>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal', arg0: Graph): Promise<DefaultGraphTraversal>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal'): Promise<DefaultGraphTraversal>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub', arg0: GraphTraversal$Admin, arg1: boolean_t): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder'): Promise<ComputerTraversalEngine$Builder>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder'): Promise<StandardTraversalEngine$Builder>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.P', arg0: BiPredicate, arg1: object_t): Promise<P>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions'): Promise<Path$Exceptions>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep', arg0: Traversal$Admin): Promise<AbstractStep>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet'): Promise<BulkSet>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep', arg0: Traversal$Admin): Promise<CollectingBarrierStep>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep', arg0: Traversal$Admin): Promise<ComputerAwareStep>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep', arg0: ComputerAwareStep, arg1: Traversal$Admin): Promise<ComputerAwareStep$EndStep>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator', arg0: Function, arg1: Comparator): Promise<ElementFunctionComparator>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator', arg0: string_t, arg1: Comparator): Promise<ElementValueComparator>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator', arg0: Step): Promise<ExpandableStepIterator>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer', arg0: string_t, arg1: P): Promise<HasContainer>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep', arg0: Traversal$Admin): Promise<NoOpBarrierStep>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep', arg0: Traversal$Admin): Promise<PathIdentityStep>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep', arg0: Traversal$Admin): Promise<ReducingBarrierStep>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce', arg0: Supplier, arg1: BiFunction): Promise<ReducingBarrierStep$DefaultMapReduce>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep', arg0: Traversal$Admin): Promise<SupplyingBarrierStep>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator', arg0: Traversal$Admin, arg1: Comparator): Promise<TraversalComparator>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', ...arg0: Map$Entry[]): Promise<Tree>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', ...arg0: object_t[]): Promise<Tree>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree'): Promise<Tree>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback', arg0: EventStrategy, arg1: object_t): Promise<EventStrategy$EventStrategyCallback>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException', arg0: string_t, arg1: Traversal): Promise<ComputerVerificationException>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions'): Promise<Traversal$Exceptions>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions'): Promise<TraversalSideEffects$Exceptions>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache'): Promise<TraversalStrategies$GlobalCache>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.AndP', arg0: P, ...arg1: P[]): Promise<AndP>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP', arg0: P, ...arg1: P[]): Promise<ConjunctionP>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal', arg0: Graph): Promise<DefaultTraversal>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal'): Promise<DefaultTraversal>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects'): Promise<DefaultTraversalSideEffects>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies'): Promise<DefaultTraversalStrategies>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics', arg0: string_t, arg1: string_t, arg2: DependantMutableMetrics): Promise<DependantMutableMetrics>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics', arg0: string_t, arg1: string_t): Promise<MutableMetrics>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.OrP', arg0: P, ...arg1: P[]): Promise<OrP>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics'): Promise<StandardTraversalMetrics>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition'): Promise<StepPosition>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction', arg0: Class): Promise<TraversalClassFunction>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix', arg0: Traversal$Admin): Promise<TraversalMatrix>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction', arg0: Traversal$Admin): Promise<TraversalObjectFunction>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Traversal$Admin, arg1: object_t, arg2: boolean_t): Promise<TraversalP>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Traversal$Admin, arg1: boolean_t): Promise<TraversalP>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing', ...arg0: Traversal$Admin[]): Promise<TraversalRing>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction', arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<TraversalScriptFunction>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple', arg0: Collection): Promise<TraversalUtil$Multiple>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Exceptions'): Promise<Graph$Exceptions>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Hidden'): Promise<Graph$Hidden>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry'): Promise<AbstractIoRegistry>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphMigrator'): Promise<GraphMigrator>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo', arg0: Graph): Promise<GraphMLIo>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder'): Promise<GraphMLIo$Builder>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper'): Promise<GraphMLMapper>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder'): Promise<GraphMLMapper$Builder>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter', arg0: object_t): Promise<GraphMLWriterHelper$IndentingXMLStreamWriter>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo', arg0: IoRegistry, arg1: Graph): Promise<GraphSONIo>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder'): Promise<GraphSONIo$Builder>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg0: GraphSONMapper, arg1: long_t): Promise<GraphSONReader>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader', arg0: object_t, arg1: long_t): Promise<LegacyGraphSONReader>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens'): Promise<LegacyGraphSONReader$GraphSONTokens>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo', arg0: IoRegistry, arg1: Graph): Promise<GryoIo>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder'): Promise<GryoIo$Builder>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t, arg1: GryoPool$Type, arg2: object_t): Promise<GryoPool>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: object_t): Promise<GryoPool>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t): Promise<GryoPool>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream', arg0: InputStream): Promise<VertexByteArrayInputStream>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions'): Promise<Io$Exceptions>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.io.IoCore'): Promise<IoCore>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Workload', arg0: Graph, arg1: Function): Promise<Transaction$Workload>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction', arg0: Graph): Promise<AbstractTransaction>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t, arg1: object_t): Promise<AbstractTransaction$TransactionException>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: object_t): Promise<AbstractTransaction$TransactionException>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t): Promise<AbstractTransaction$TransactionException>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Method'): Promise<Attachable$Method>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.Comparators'): Promise<Comparators>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge', arg0: object_t, arg1: string_t, arg2: Map, arg3: object_t, arg4: object_t): Promise<DetachedEdge>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t, arg2: Element): Promise<DetachedProperty>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t): Promise<DetachedProperty>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex', arg0: object_t, arg1: string_t, arg2: Map): Promise<DetachedVertex>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Map, arg4: Vertex): Promise<DetachedVertexProperty>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Map): Promise<DetachedVertexProperty>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphFactory'): Promise<GraphFactory>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper'): Promise<GraphVariableHelper>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult', arg0: Graph, arg1: Memory): Promise<TinkerComputerResult>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer', arg0: TinkerGraph): Promise<TinkerGraphComputer>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView', arg0: Set): Promise<TinkerGraphView>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter', arg0: boolean_t): Promise<TinkerMapEmitter>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory', arg0: VertexProgram, arg1: Set): Promise<TinkerMemory>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger', arg0: Vertex, arg1: object_t, arg2: object_t): Promise<TinkerMessenger>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter'): Promise<TinkerReduceEmitter>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool', arg0: integer_t): Promise<TinkerWorkerPool>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables'): Promise<TinkerGraphVariables>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty', arg0: Element, arg1: string_t, arg2: object_t): Promise<TinkerProperty>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: object_t, arg1: TinkerVertex, arg2: string_t, arg3: object_t, ...arg4: object_t[]): Promise<TinkerVertexProperty>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: TinkerVertex, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<TinkerVertexProperty>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.util.function.ChainedComparator', arg0: List): Promise<ChainedComparator>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.util.function.ConstantSupplier', arg0: object_t): Promise<ConstantSupplier>;
    newInstancePromise(className: 'org.apache.tinkerpop.gremlin.util.function.ScriptEngineLambda', arg0: string_t, arg1: string_t): Promise<ScriptEngineLambda>;
    newInstancePromise(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: array_t<ClassNode>, arg4: object_array_t): Promise<ClassNode>;
    newInstancePromise(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: ClassNode): Promise<ClassNode>;
    newInstancePromise(className: 'org.codehaus.groovy.ast.ClassNode', arg0: Class): Promise<ClassNode>;
    newInstancePromise(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: CompilerConfiguration): Promise<CompilerConfiguration>;
    newInstancePromise(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: object_t): Promise<CompilerConfiguration>;
    newInstancePromise(className: 'org.codehaus.groovy.control.CompilerConfiguration'): Promise<CompilerConfiguration>;
    newInstancePromise(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg0: object_t): Promise<CompilationCustomizer>;
    newInstancePromise(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t, arg3: Closure): Promise<Groovysh>;
    newInstancePromise(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: ClassLoader, arg1: Binding, arg2: object_t): Promise<Groovysh>;
    newInstancePromise(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Binding, arg1: object_t): Promise<Groovysh>;
    newInstancePromise(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: object_t): Promise<Groovysh>;
    newInstancePromise(className: 'org.codehaus.groovy.tools.shell.Groovysh'): Promise<Groovysh>;
    newInstancePromise(className: 'org.codehaus.groovy.util.ManagedReference', arg0: object_t, arg1: object_t, arg2: object_t): Promise<ManagedReference>;
    newInstancePromise(className: 'org.codehaus.groovy.util.ManagedReference', arg0: ReferenceBundle, arg1: object_t): Promise<ManagedReference>;
    newInstancePromise(className: 'org.codehaus.groovy.util.ReferenceBundle', arg0: object_t, arg1: object_t): Promise<ReferenceBundle>;
    newInstancePromise(className: string, ...args: any[]): Promise<any>;
  }

  export import GlobFunction = co.redseal.gremlinnode.function_.GlobFunction;
  export import GroovyLambda = co.redseal.gremlinnode.function_.GroovyLambda;
  export import TestClass = co.redseal.gremlinnode.testing.TestClass;
  export import StringInputStream = co.redseal.util.StringInputStream;
  export import Binding = groovy.lang.Binding;
  export import Closure = groovy.lang.Closure;
  export import DelegatingMetaClass = groovy.lang.DelegatingMetaClass;
  export import GroovyClassLoader = groovy.lang.GroovyClassLoader;
  export import GroovyCodeSource = groovy.lang.GroovyCodeSource;
  export import GroovyObjectSupport = groovy.lang.GroovyObjectSupport;
  export import GroovyResourceLoader = groovy.lang.GroovyResourceLoader;
  export import IntRange = groovy.lang.IntRange;
  export import MetaBeanProperty = groovy.lang.MetaBeanProperty;
  export import MetaClass = groovy.lang.MetaClass;
  export import MetaMethod = groovy.lang.MetaMethod;
  export import MetaProperty = groovy.lang.MetaProperty;
  export import Range = groovy.lang.Range;
  export import Reference = groovy.lang.Reference;
  export import ByteArrayOutputStream = java.io.ByteArrayOutputStream;
  export import FileInputStream = java.io.FileInputStream;
  export import FileOutputStream = java.io.FileOutputStream;
  export import InputStream = java.io.InputStream;
  export import OutputStream = java.io.OutputStream;
  export import Boolean = java.lang.Boolean;
  export import Class = java.lang.Class;
  export import ClassLoader = java.lang.ClassLoader;
  export import Double = java.lang.Double;
  export import Enum = java.lang.Enum;
  export import Float = java.lang.Float;
  export import Integer = java.lang.Integer;
  export import Iterable = java.lang.Iterable;
  export import Long = java.lang.Long;
  export import Object = java.lang.Object;
  export import Array = java.lang.reflect.Array;
  export import Short = java.lang.Short;
  export import String = java.lang.String;
  export import Charset = java.nio.charset.Charset;
  export import StandardCharsets = java.nio.charset.StandardCharsets;
  export import AbstractCollection = java.util.AbstractCollection;
  export import AbstractList = java.util.AbstractList;
  export import AbstractMap = java.util.AbstractMap;
  export import AbstractSet = java.util.AbstractSet;
  export import ArrayList = java.util.ArrayList;
  export import Collection = java.util.Collection;
  export import Comparator = java.util.Comparator;
  export import BiConsumer = java.util.function_.BiConsumer;
  export import BiFunction = java.util.function_.BiFunction;
  export import BinaryOperator = java.util.function_.BinaryOperator;
  export import BiPredicate = java.util.function_.BiPredicate;
  export import Consumer = java.util.function_.Consumer;
  export import Function = java.util.function_.Function;
  export import Predicate = java.util.function_.Predicate;
  export import Supplier = java.util.function_.Supplier;
  export import UnaryOperator = java.util.function_.UnaryOperator;
  export import HashMap = java.util.HashMap;
  export import HashSet = java.util.HashSet;
  export import Iterator = java.util.Iterator;
  export import LinkedHashMap = java.util.LinkedHashMap;
  export import List = java.util.List;
  export import ListIterator = java.util.ListIterator;
  export import Map = java.util.Map;
  export import Map$Entry = java.util.Map$Entry;
  export import NoSuchElementException = java.util.NoSuchElementException;
  export import Set = java.util.Set;
  export import AbstractScriptEngine = javax.script.AbstractScriptEngine;
  export import Bindings = javax.script.Bindings;
  export import CompiledScript = javax.script.CompiledScript;
  export import ScriptContext = javax.script.ScriptContext;
  export import ScriptEngine = javax.script.ScriptEngine;
  export import ScriptEngineFactory = javax.script.ScriptEngineFactory;
  export import GComparator = org.apache.tinkerpop.gremlin.groovy.function_.GComparator;
  export import GFunction = org.apache.tinkerpop.gremlin.groovy.function_.GFunction;
  export import GSupplier = org.apache.tinkerpop.gremlin.groovy.function_.GSupplier;
  export import GUnaryOperator = org.apache.tinkerpop.gremlin.groovy.function_.GUnaryOperator;
  export import GremlinGroovyScriptEngine = org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
  export import ClusterCountMapReduce = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce;
  export import ClusterCountMapReduce$Builder = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder;
  export import ClusterPopulationMapReduce = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce;
  export import ClusterPopulationMapReduce$Builder = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder;
  export import PeerPressureVertexProgram = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram;
  export import PeerPressureVertexProgram$Builder = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder;
  export import ComputerResult = org.apache.tinkerpop.gremlin.process.computer.ComputerResult;
  export import GraphComputer = org.apache.tinkerpop.gremlin.process.computer.GraphComputer;
  export import GraphComputer$Exceptions = org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions;
  export import GraphComputer$Features = org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features;
  export import GraphComputer$Persist = org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist;
  export import GraphComputer$ResultGraph = org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph;
  export import KeyValue = org.apache.tinkerpop.gremlin.process.computer.KeyValue;
  export import MapReduce = org.apache.tinkerpop.gremlin.process.computer.MapReduce;
  export import MapReduce$MapEmitter = org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter;
  export import MapReduce$NullObject = org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject;
  export import MapReduce$ReduceEmitter = org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter;
  export import MapReduce$Stage = org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage;
  export import Memory = org.apache.tinkerpop.gremlin.process.computer.Memory;
  export import Memory$Admin = org.apache.tinkerpop.gremlin.process.computer.Memory$Admin;
  export import Memory$Exceptions = org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions;
  export import MessageCombiner = org.apache.tinkerpop.gremlin.process.computer.MessageCombiner;
  export import MessageScope = org.apache.tinkerpop.gremlin.process.computer.MessageScope;
  export import MessageScope$Global = org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global;
  export import MessageScope$Local = org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local;
  export import MessageScope$Local$ReverseTraversalSupplier = org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier;
  export import Messenger = org.apache.tinkerpop.gremlin.process.computer.Messenger;
  export import PageRankMapReduce = org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce;
  export import PageRankMapReduce$Builder = org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder;
  export import PageRankMessageCombiner = org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner;
  export import PageRankVertexProgram = org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram;
  export import PageRankVertexProgram$Builder = org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder;
  export import SingleMessenger = org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger;
  export import TraversalVertexProgram = org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram;
  export import TraversalVertexProgram$Builder = org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder;
  export import TraversalVertexProgramMessageCombiner = org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner;
  export import TraverserExecutor = org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor;
  export import VertexTraversalSideEffects = org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects;
  export import VertexProgram = org.apache.tinkerpop.gremlin.process.computer.VertexProgram;
  export import VertexProgram$Builder = org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder;
  export import VertexProgram$Features = org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features;
  export import Compare = org.apache.tinkerpop.gremlin.process.traversal.Compare;
  export import Contains = org.apache.tinkerpop.gremlin.process.traversal.Contains;
  export import __ = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__;
  export import DefaultGraphTraversal = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;
  export import EmptyGraphTraversal = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal;
  export import GraphTraversal = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal;
  export import GraphTraversal$Admin = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin;
  export import GraphTraversalSource = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;
  export import GraphTraversalSource$Builder = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder;
  export import GraphTraversalSource$GraphTraversalSourceStub = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub;
  export import ComputerTraversalEngine = org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine;
  export import ComputerTraversalEngine$Builder = org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder;
  export import ComputerTraversalEngine$ComputerResultStrategy = org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy;
  export import StandardTraversalEngine = org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine;
  export import StandardTraversalEngine$Builder = org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder;
  export import Operator = org.apache.tinkerpop.gremlin.process.traversal.Operator;
  export import Order = org.apache.tinkerpop.gremlin.process.traversal.Order;
  export import P = org.apache.tinkerpop.gremlin.process.traversal.P;
  export import Path = org.apache.tinkerpop.gremlin.process.traversal.Path;
  export import Path$Exceptions = org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions;
  export import Scope = org.apache.tinkerpop.gremlin.process.traversal.Scope;
  export import Step = org.apache.tinkerpop.gremlin.process.traversal.Step;
  export import AbstractStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep;
  export import BulkSet = org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet;
  export import CollectingBarrierStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep;
  export import ComputerAwareStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep;
  export import ComputerAwareStep$EndStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep;
  export import ElementFunctionComparator = org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator;
  export import ElementValueComparator = org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator;
  export import EmptyPath = org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath;
  export import EmptyStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep;
  export import ExpandableStepIterator = org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator;
  export import HasContainer = org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;
  export import ImmutablePath = org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath;
  export import MapHelper = org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper;
  export import MutablePath = org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath;
  export import NoOpBarrierStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep;
  export import PathIdentityStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep;
  export import ReducingBarrierStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep;
  export import ReducingBarrierStep$DefaultMapReduce = org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce;
  export import ReducingBarrierStep$FinalGet = org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet;
  export import SupplyingBarrierStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep;
  export import TraversalComparator = org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator;
  export import Tree = org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree;
  export import ConjunctionStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy;
  export import ElementIdStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy;
  export import ElementIdStrategy$Builder = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder;
  export import EventStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy;
  export import EventStrategy$Builder = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder;
  export import EventStrategy$EventStrategyCallback = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback;
  export import PartitionStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy;
  export import PartitionStrategy$Builder = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder;
  export import SubgraphStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy;
  export import SubgraphStrategy$Builder = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder;
  export import ComputerVerificationException = org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException;
  export import ComputerVerificationStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy;
  export import LambdaRestrictionStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy;
  export import ReadOnlyStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy;
  export import Traversal = org.apache.tinkerpop.gremlin.process.traversal.Traversal;
  export import Traversal$Admin = org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin;
  export import Traversal$Exceptions = org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions;
  export import TraversalEngine = org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine;
  export import TraversalEngine$Builder = org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder;
  export import TraversalEngine$Type = org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type;
  export import TraversalSideEffects = org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects;
  export import TraversalSideEffects$Exceptions = org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions;
  export import TraversalSource = org.apache.tinkerpop.gremlin.process.traversal.TraversalSource;
  export import TraversalSource$Builder = org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder;
  export import TraversalStrategies = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies;
  export import TraversalStrategies$GlobalCache = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache;
  export import TraversalStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy;
  export import TraversalStrategy$DecorationStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy;
  export import TraversalStrategy$FinalizationStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy;
  export import TraversalStrategy$OptimizationStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy;
  export import TraversalStrategy$VendorOptimizationStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy;
  export import TraversalStrategy$VerificationStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy;
  export import Traverser = org.apache.tinkerpop.gremlin.process.traversal.Traverser;
  export import Traverser$Admin = org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin;
  export import TraverserGenerator = org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator;
  export import AndP = org.apache.tinkerpop.gremlin.process.traversal.util.AndP;
  export import ConjunctionP = org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP;
  export import DefaultTraversal = org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal;
  export import DefaultTraversalSideEffects = org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects;
  export import DefaultTraversalStrategies = org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies;
  export import DependantMutableMetrics = org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics;
  export import EmptyTraversal = org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal;
  export import EmptyTraversalSideEffects = org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects;
  export import EmptyTraversalStrategies = org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies;
  export import FastNoSuchElementException = org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException;
  export import ImmutableMetrics = org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics;
  export import Metrics = org.apache.tinkerpop.gremlin.process.traversal.util.Metrics;
  export import MutableMetrics = org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics;
  export import OrP = org.apache.tinkerpop.gremlin.process.traversal.util.OrP;
  export import SideEffectHelper = org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper;
  export import StandardTraversalMetrics = org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics;
  export import StepPosition = org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition;
  export import TraversalClassFunction = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction;
  export import TraversalHelper = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;
  export import TraversalMatrix = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix;
  export import TraversalMetrics = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics;
  export import TraversalObjectFunction = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction;
  export import TraversalP = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP;
  export import TraversalRing = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing;
  export import TraversalScriptFunction = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction;
  export import TraversalScriptHelper = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper;
  export import TraversalUtil = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil;
  export import TraversalUtil$Multiple = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple;
  export import Direction = org.apache.tinkerpop.gremlin.structure.Direction;
  export import Edge = org.apache.tinkerpop.gremlin.structure.Edge;
  export import Edge$Exceptions = org.apache.tinkerpop.gremlin.structure.Edge$Exceptions;
  export import Element = org.apache.tinkerpop.gremlin.structure.Element;
  export import Element$Exceptions = org.apache.tinkerpop.gremlin.structure.Element$Exceptions;
  export import Graph = org.apache.tinkerpop.gremlin.structure.Graph;
  export import Graph$Exceptions = org.apache.tinkerpop.gremlin.structure.Graph$Exceptions;
  export import Graph$Features = org.apache.tinkerpop.gremlin.structure.Graph$Features;
  export import Graph$Features$DataTypeFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures;
  export import Graph$Features$EdgeFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures;
  export import Graph$Features$EdgePropertyFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures;
  export import Graph$Features$ElementFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures;
  export import Graph$Features$FeatureSet = org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet;
  export import Graph$Features$GraphFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures;
  export import Graph$Features$PropertyFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures;
  export import Graph$Features$VariableFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures;
  export import Graph$Features$VertexFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures;
  export import Graph$Features$VertexPropertyFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures;
  export import Graph$Hidden = org.apache.tinkerpop.gremlin.structure.Graph$Hidden;
  export import Graph$OptIn = org.apache.tinkerpop.gremlin.structure.Graph$OptIn;
  export import Graph$OptIns = org.apache.tinkerpop.gremlin.structure.Graph$OptIns;
  export import Graph$OptOut = org.apache.tinkerpop.gremlin.structure.Graph$OptOut;
  export import Graph$OptOuts = org.apache.tinkerpop.gremlin.structure.Graph$OptOuts;
  export import Graph$Variables = org.apache.tinkerpop.gremlin.structure.Graph$Variables;
  export import Graph$Variables$Exceptions = org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions;
  export import AbstractIoRegistry = org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry;
  export import GraphMigrator = org.apache.tinkerpop.gremlin.structure.io.GraphMigrator;
  export import GraphMLIo = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo;
  export import GraphMLIo$Builder = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder;
  export import GraphMLMapper = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper;
  export import GraphMLMapper$Builder = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder;
  export import GraphMLReader = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader;
  export import GraphMLReader$Builder = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder;
  export import GraphMLWriter = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter;
  export import GraphMLWriter$Builder = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder;
  export import GraphMLWriterHelper$IndentingXMLStreamWriter = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter;
  export import GraphReader = org.apache.tinkerpop.gremlin.structure.io.GraphReader;
  export import GraphReader$ReaderBuilder = org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder;
  export import GraphSONIo = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo;
  export import GraphSONIo$Builder = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder;
  export import GraphSONMapper = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper;
  export import GraphSONMapper$Builder = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder;
  export import GraphSONReader = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader;
  export import GraphSONReader$Builder = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder;
  export import GraphSONTokens = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens;
  export import GraphSONUtil = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil;
  export import GraphSONVersion = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion;
  export import GraphSONWriter = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter;
  export import GraphSONWriter$Builder = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder;
  export import LegacyGraphSONReader = org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader;
  export import LegacyGraphSONReader$Builder = org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder;
  export import LegacyGraphSONReader$GraphSONTokens = org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens;
  export import GraphWriter = org.apache.tinkerpop.gremlin.structure.io.GraphWriter;
  export import GraphWriter$WriterBuilder = org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder;
  export import GryoIo = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo;
  export import GryoIo$Builder = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder;
  export import GryoMapper = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper;
  export import GryoMapper$Builder = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder;
  export import GryoPool = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool;
  export import GryoPool$Type = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type;
  export import GryoReader = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader;
  export import GryoReader$Builder = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder;
  export import GryoWriter = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter;
  export import GryoWriter$Builder = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder;
  export import VertexByteArrayInputStream = org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream;
  export import VertexTerminator = org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator;
  export import Io = org.apache.tinkerpop.gremlin.structure.io.Io;
  export import Io$Builder = org.apache.tinkerpop.gremlin.structure.io.Io$Builder;
  export import Io$Exceptions = org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions;
  export import IoCore = org.apache.tinkerpop.gremlin.structure.io.IoCore;
  export import IoRegistry = org.apache.tinkerpop.gremlin.structure.io.IoRegistry;
  export import Mapper = org.apache.tinkerpop.gremlin.structure.io.Mapper;
  export import Mapper$Builder = org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder;
  export import Property = org.apache.tinkerpop.gremlin.structure.Property;
  export import Property$Exceptions = org.apache.tinkerpop.gremlin.structure.Property$Exceptions;
  export import PropertyType = org.apache.tinkerpop.gremlin.structure.PropertyType;
  export import T = org.apache.tinkerpop.gremlin.structure.T;
  export import Transaction = org.apache.tinkerpop.gremlin.structure.Transaction;
  export import Transaction$CLOSE_BEHAVIOR = org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR;
  export import Transaction$Exceptions = org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions;
  export import Transaction$READ_WRITE_BEHAVIOR = org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR;
  export import Transaction$Status = org.apache.tinkerpop.gremlin.structure.Transaction$Status;
  export import Transaction$Workload = org.apache.tinkerpop.gremlin.structure.Transaction$Workload;
  export import AbstractTransaction = org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction;
  export import AbstractTransaction$TransactionException = org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException;
  export import Attachable = org.apache.tinkerpop.gremlin.structure.util.Attachable;
  export import Attachable$Exceptions = org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions;
  export import Attachable$Method = org.apache.tinkerpop.gremlin.structure.util.Attachable$Method;
  export import Comparators = org.apache.tinkerpop.gremlin.structure.util.Comparators;
  export import DetachedEdge = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge;
  export import DetachedElement = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement;
  export import DetachedFactory = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory;
  export import DetachedPath = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath;
  export import DetachedProperty = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty;
  export import DetachedVertex = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex;
  export import DetachedVertexProperty = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty;
  export import ElementHelper = org.apache.tinkerpop.gremlin.structure.util.ElementHelper;
  export import FeatureDescriptor = org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor;
  export import GraphFactory = org.apache.tinkerpop.gremlin.structure.util.GraphFactory;
  export import GraphVariableHelper = org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper;
  export import Host = org.apache.tinkerpop.gremlin.structure.util.Host;
  export import StringFactory = org.apache.tinkerpop.gremlin.structure.util.StringFactory;
  export import Vertex = org.apache.tinkerpop.gremlin.structure.Vertex;
  export import Vertex$Exceptions = org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions;
  export import VertexProperty = org.apache.tinkerpop.gremlin.structure.VertexProperty;
  export import VertexProperty$Cardinality = org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality;
  export import VertexProperty$Exceptions = org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions;
  export import TinkerComputerResult = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult;
  export import TinkerGraphComputer = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer;
  export import TinkerGraphView = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView;
  export import TinkerMapEmitter = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter;
  export import TinkerMemory = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory;
  export import TinkerMessenger = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger;
  export import TinkerReduceEmitter = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter;
  export import TinkerWorkerPool = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool;
  export import TinkerEdge = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge;
  export import TinkerElement = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement;
  export import TinkerFactory = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory;
  export import TinkerGraph = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph;
  export import TinkerGraph$DefaultIdManager = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager;
  export import TinkerGraph$IdManager = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager;
  export import TinkerGraph$TinkerGraphEdgeFeatures = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures;
  export import TinkerGraph$TinkerGraphFeatures = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures;
  export import TinkerGraph$TinkerGraphGraphFeatures = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures;
  export import TinkerGraph$TinkerGraphVertexFeatures = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures;
  export import TinkerGraphVariables = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables;
  export import TinkerHelper = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper;
  export import TinkerProperty = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty;
  export import TinkerVertex = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex;
  export import TinkerVertexProperty = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty;
  export import ArrayListSupplier = org.apache.tinkerpop.gremlin.util.function_.ArrayListSupplier;
  export import BulkSetSupplier = org.apache.tinkerpop.gremlin.util.function_.BulkSetSupplier;
  export import ChainedComparator = org.apache.tinkerpop.gremlin.util.function_.ChainedComparator;
  export import ConstantSupplier = org.apache.tinkerpop.gremlin.util.function_.ConstantSupplier;
  export import FunctionUtils = org.apache.tinkerpop.gremlin.util.function_.FunctionUtils;
  export import HashMapSupplier = org.apache.tinkerpop.gremlin.util.function_.HashMapSupplier;
  export import HashSetSupplier = org.apache.tinkerpop.gremlin.util.function_.HashSetSupplier;
  export import MeanNumberSupplier = org.apache.tinkerpop.gremlin.util.function_.MeanNumberSupplier;
  export import ScriptEngineLambda = org.apache.tinkerpop.gremlin.util.function_.ScriptEngineLambda;
  export import ThrowingBiConsumer = org.apache.tinkerpop.gremlin.util.function_.ThrowingBiConsumer;
  export import ThrowingConsumer = org.apache.tinkerpop.gremlin.util.function_.ThrowingConsumer;
  export import ThrowingFunction = org.apache.tinkerpop.gremlin.util.function_.ThrowingFunction;
  export import ThrowingSupplier = org.apache.tinkerpop.gremlin.util.function_.ThrowingSupplier;
  export import TraversableLambda = org.apache.tinkerpop.gremlin.util.function_.TraversableLambda;
  export import TreeSupplier = org.apache.tinkerpop.gremlin.util.function_.TreeSupplier;
  export import TriConsumer = org.apache.tinkerpop.gremlin.util.function_.TriConsumer;
  export import TriFunction = org.apache.tinkerpop.gremlin.util.function_.TriFunction;
  export import Gremlin = org.apache.tinkerpop.gremlin.util.Gremlin;
  export import ScriptEngineCache = org.apache.tinkerpop.gremlin.util.ScriptEngineCache;
  export import Serializer = org.apache.tinkerpop.gremlin.util.Serializer;
  export import TimeUtil = org.apache.tinkerpop.gremlin.util.TimeUtil;
  export import ClassNode = org.codehaus.groovy.ast.ClassNode;
  export import CompilerConfiguration = org.codehaus.groovy.control.CompilerConfiguration;
  export import CompilationCustomizer = org.codehaus.groovy.control.customizers.CompilationCustomizer;
  export import NullObject = org.codehaus.groovy.runtime.NullObject;
  export import Groovysh = org.codehaus.groovy.tools.shell.Groovysh;
  export import ManagedReference = org.codehaus.groovy.util.ManagedReference;
  export import ReferenceBundle = org.codehaus.groovy.util.ReferenceBundle;

  export module co.redseal.gremlinnode.function_ {
    export interface GlobFunction extends Java.java.util.function_.BiConsumer,Java.java.util.function_.BiFunction,Java.java.util.function_.BiPredicate,Java.java.util.function_.BinaryOperator,Java.java.util.function_.Consumer,Java.java.util.function_.Function,Java.java.util.function_.Predicate,Java.java.util.function_.Supplier,Java.java.util.function_.UnaryOperator,Java.org.apache.tinkerpop.gremlin.util.function_.TriConsumer {
      // public abstract void org.apache.tinkerpop.gremlin.util.function.TriConsumer.accept(A,B,C)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public abstract void java.util.function.BiConsumer.accept(T,U)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default org.apache.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> org.apache.tinkerpop.gremlin.util.function.TriConsumer.andThen(org.apache.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
      // public abstract co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GlobFunction.andThen(co.redseal.gremlinnode.function.GlobFunction)
      andThen(arg0: GlobFunction): GlobFunction;
      andThenP(arg0: GlobFunction): Promise<GlobFunction>;
      // public abstract co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): GlobFunction;
      andThenP(arg0: BiConsumer): Promise<GlobFunction>;
      // public abstract co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): GlobFunction;
      andThenP(arg0: Function): Promise<GlobFunction>;
      // public abstract co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): GlobFunction;
      andThenP(arg0: Consumer): Promise<GlobFunction>;
      // public default java.util.function.BiConsumer<T, U> java.util.function.BiConsumer.andThen(java.util.function.BiConsumer<? super T, ? super U>)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
      // public default <V> java.util.function.BiFunction<T, U, V> java.util.function.BiFunction.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public abstract R java.util.function.BiFunction.apply(T,U)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public abstract co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GlobFunction.negate()
      negate(): GlobFunction;
      negateP(): Promise<GlobFunction>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public abstract boolean java.util.function.BiPredicate.test(T,U)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
    }
    export module GlobFunction {
      export interface Static {
      }
    }
  }

  export module co.redseal.gremlinnode.function_ {
    export interface GroovyLambda extends Java.java.lang.Object {
      // public void co.redseal.gremlinnode.function.GroovyLambda.accept(java.lang.Object,java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public void co.redseal.gremlinnode.function.GroovyLambda.accept(java.lang.Object,java.lang.Object)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public void co.redseal.gremlinnode.function.GroovyLambda.accept(java.lang.Object)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default org.apache.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> org.apache.tinkerpop.gremlin.util.function.TriConsumer.andThen(org.apache.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GroovyLambda.andThen(co.redseal.gremlinnode.function.GlobFunction)
      andThen(arg0: GlobFunction): GlobFunction;
      andThenP(arg0: GlobFunction): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GroovyLambda.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): GlobFunction;
      andThenP(arg0: BiConsumer): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GroovyLambda.andThen(java.util.function.Function)
      andThen(arg0: Function): GlobFunction;
      andThenP(arg0: Function): Promise<GlobFunction>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GroovyLambda.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): GlobFunction;
      andThenP(arg0: Consumer): Promise<GlobFunction>;
      // public java.util.function.BiConsumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.BiConsumer)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
      // public java.util.function.BiFunction co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public java.util.function.Function co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Function)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public java.util.function.Consumer co.redseal.gremlinnode.function.AbstractGlobFunction.andThen(java.util.function.Consumer)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public java.lang.Object co.redseal.gremlinnode.function.GroovyLambda.apply(java.lang.Object,java.lang.Object)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public java.lang.Object co.redseal.gremlinnode.function.GroovyLambda.apply(java.lang.Object)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Object co.redseal.gremlinnode.function.GroovyLambda.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public co.redseal.gremlinnode.function.GlobFunction co.redseal.gremlinnode.function.GroovyLambda.negate()
      negate(): GlobFunction;
      negateP(): Promise<GlobFunction>;
      // public java.util.function.BiPredicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public java.util.function.Predicate co.redseal.gremlinnode.function.AbstractGlobFunction.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public boolean co.redseal.gremlinnode.function.GroovyLambda.test(java.lang.Object,java.lang.Object)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public boolean co.redseal.gremlinnode.function.GroovyLambda.test(java.lang.Object)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GroovyLambda {
      export interface Static {
        new (arg0: string_t, arg1: ScriptEngine): co.redseal.gremlinnode.function_.GroovyLambda;
        new (arg0: string_t): co.redseal.gremlinnode.function_.GroovyLambda;
        // public static javax.script.ScriptEngine co.redseal.gremlinnode.function.GroovyLambda.getDefaultEngine()
        getDefaultEngine(): ScriptEngine;
        getDefaultEngineP(): Promise<ScriptEngine>;
      }
    }
  }

  export module co.redseal.gremlinnode.testing {
    export interface TestClass extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TestClass {
      export interface Static {
        new (): co.redseal.gremlinnode.testing.TestClass;
      }
    }
  }

  export module co.redseal.util {
    export interface StringInputStream extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StringInputStream {
      export interface Static {
        new (): co.redseal.util.StringInputStream;
        // public static java.io.InputStream co.redseal.util.StringInputStream.from(java.lang.String)
        from(arg0: string_t): InputStream;
        fromP(arg0: string_t): Promise<InputStream>;
      }
    }
  }

  export module groovy.lang {
    export interface Binding extends Java.groovy.lang.GroovyObjectSupport {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public groovy.lang.MetaClass groovy.lang.GroovyObjectSupport.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.Binding.getVariable(java.lang.String)
      getVariable(arg0: string_t): object_t;
      getVariableP(arg0: string_t): Promise<object_t>;
      // public java.util.Map groovy.lang.Binding.getVariables()
      getVariables(): Map;
      getVariablesP(): Promise<Map>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean groovy.lang.Binding.hasVariable(java.lang.String)
      hasVariable(arg0: string_t): boolean;
      hasVariableP(arg0: string_t): Promise<boolean>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void groovy.lang.Binding.setVariable(java.lang.String,java.lang.Object)
      setVariable(arg0: string_t, arg1: object_t): void;
      setVariableP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Binding {
      export interface Static {
        new (arg0: array_t<string_t>): groovy.lang.Binding;
        new (arg0: Map): groovy.lang.Binding;
        new (): groovy.lang.Binding;
      }
    }
  }

  export module groovy.lang {
    export interface Closure extends Java.groovy.lang.GroovyObjectSupport {
      // public groovy.lang.Closure groovy.lang.Closure.asWritable()
      asWritable(): Closure;
      asWritableP(): Promise<Closure>;
      // public V groovy.lang.Closure.call(java.lang.Object...)
      call(...arg0: object_t[]): object_t;
      call(arg0: object_array_t): object_t;
      callP(...arg0: object_t[]): Promise<object_t>;
      callP(arg0: object_array_t): Promise<object_t>;
      // public V groovy.lang.Closure.call(java.lang.Object)
      call(arg0: object_t): object_t;
      callP(arg0: object_t): Promise<object_t>;
      // public V groovy.lang.Closure.call()
      call(): object_t;
      callP(): Promise<object_t>;
      // public java.lang.Object groovy.lang.Closure.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.curry(java.lang.Object...)
      curry(...arg0: object_t[]): Closure;
      curry(arg0: object_array_t): Closure;
      curryP(...arg0: object_t[]): Promise<Closure>;
      curryP(arg0: object_array_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.curry(java.lang.Object)
      curry(arg0: object_t): Closure;
      curryP(arg0: object_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.dehydrate()
      dehydrate(): Closure;
      dehydrateP(): Promise<Closure>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.Object groovy.lang.Closure.getDelegate()
      getDelegate(): object_t;
      getDelegateP(): Promise<object_t>;
      // public int groovy.lang.Closure.getDirective()
      getDirective(): number;
      getDirectiveP(): Promise<number>;
      // public int groovy.lang.Closure.getMaximumNumberOfParameters()
      getMaximumNumberOfParameters(): number;
      getMaximumNumberOfParametersP(): Promise<number>;
      // public groovy.lang.MetaClass groovy.lang.GroovyObjectSupport.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object groovy.lang.Closure.getOwner()
      getOwner(): object_t;
      getOwnerP(): Promise<object_t>;
      // public java.lang.Class[] groovy.lang.Closure.getParameterTypes()
      getParameterTypes(): Class[];
      getParameterTypesP(): Promise<Class[]>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public int groovy.lang.Closure.getResolveStrategy()
      getResolveStrategy(): number;
      getResolveStrategyP(): Promise<number>;
      // public java.lang.Object groovy.lang.Closure.getThisObject()
      getThisObject(): object_t;
      getThisObjectP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public boolean groovy.lang.Closure.isCase(java.lang.Object)
      isCase(arg0: object_t): boolean;
      isCaseP(arg0: object_t): Promise<boolean>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.leftShift(groovy.lang.Closure)
      leftShift(arg0: Closure): Closure;
      leftShiftP(arg0: Closure): Promise<Closure>;
      // public V groovy.lang.Closure.leftShift(java.lang.Object)
      leftShift(arg0: object_t): object_t;
      leftShiftP(arg0: object_t): Promise<object_t>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.memoize()
      memoize(): Closure;
      memoizeP(): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.memoizeAtLeast(int)
      memoizeAtLeast(arg0: integer_t): Closure;
      memoizeAtLeastP(arg0: integer_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.memoizeAtMost(int)
      memoizeAtMost(arg0: integer_t): Closure;
      memoizeAtMostP(arg0: integer_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.memoizeBetween(int,int)
      memoizeBetween(arg0: integer_t, arg1: integer_t): Closure;
      memoizeBetweenP(arg0: integer_t, arg1: integer_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.ncurry(int,java.lang.Object...)
      ncurry(arg0: integer_t, ...arg1: object_t[]): Closure;
      ncurry(arg0: integer_t, arg1: object_array_t): Closure;
      ncurryP(arg0: integer_t, ...arg1: object_t[]): Promise<Closure>;
      ncurryP(arg0: integer_t, arg1: object_array_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.ncurry(int,java.lang.Object)
      ncurry(arg0: integer_t, arg1: object_t): Closure;
      ncurryP(arg0: integer_t, arg1: object_t): Promise<Closure>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.rcurry(java.lang.Object...)
      rcurry(...arg0: object_t[]): Closure;
      rcurry(arg0: object_array_t): Closure;
      rcurryP(...arg0: object_t[]): Promise<Closure>;
      rcurryP(arg0: object_array_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.rcurry(java.lang.Object)
      rcurry(arg0: object_t): Closure;
      rcurryP(arg0: object_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.rehydrate(java.lang.Object,java.lang.Object,java.lang.Object)
      rehydrate(arg0: object_t, arg1: object_t, arg2: object_t): Closure;
      rehydrateP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<Closure>;
      // public <W> groovy.lang.Closure<W> groovy.lang.Closure.rightShift(groovy.lang.Closure<W>)
      rightShift(arg0: Closure): Closure;
      rightShiftP(arg0: Closure): Promise<Closure>;
      // public void groovy.lang.Closure.run()
      run(): void;
      runP(): Promise<void>;
      // public void groovy.lang.Closure.setDelegate(java.lang.Object)
      setDelegate(arg0: object_t): void;
      setDelegateP(arg0: object_t): Promise<void>;
      // public void groovy.lang.Closure.setDirective(int)
      setDirective(arg0: integer_t): void;
      setDirectiveP(arg0: integer_t): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void groovy.lang.Closure.setResolveStrategy(int)
      setResolveStrategy(arg0: integer_t): void;
      setResolveStrategyP(arg0: integer_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.trampoline(java.lang.Object...)
      trampoline(...arg0: object_t[]): Closure;
      trampoline(arg0: object_array_t): Closure;
      trampolineP(...arg0: object_t[]): Promise<Closure>;
      trampolineP(arg0: object_array_t): Promise<Closure>;
      // public groovy.lang.Closure<V> groovy.lang.Closure.trampoline()
      trampoline(): Closure;
      trampolineP(): Promise<Closure>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Closure {
      export interface Static {
        new (arg0: object_t, arg1: object_t): groovy.lang.Closure;
        new (arg0: object_t): groovy.lang.Closure;
        OWNER_FIRST: number;
        DELEGATE_FIRST: number;
        OWNER_ONLY: number;
        DELEGATE_ONLY: number;
        TO_SELF: number;
        DONE: number;
        SKIP: number;
        IDENTITY: Closure;
      }
    }
  }

  export module groovy.lang {
    export interface DelegatingMetaClass extends Java.java.lang.Object,Java.groovy.lang.MetaClass {
      // public void groovy.lang.DelegatingMetaClass.addMetaBeanProperty(groovy.lang.MetaBeanProperty)
      addMetaBeanProperty(arg0: MetaBeanProperty): void;
      addMetaBeanPropertyP(arg0: MetaBeanProperty): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.addMetaMethod(groovy.lang.MetaMethod)
      addMetaMethod(arg0: MetaMethod): void;
      addMetaMethodP(arg0: MetaMethod): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.addNewInstanceMethod(java.lang.reflect.Method)
      addNewInstanceMethod(arg0: object_t): void;
      addNewInstanceMethodP(arg0: object_t): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.addNewStaticMethod(java.lang.reflect.Method)
      addNewStaticMethod(arg0: object_t): void;
      addNewStaticMethodP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public groovy.lang.MetaClass groovy.lang.DelegatingMetaClass.getAdaptee()
      getAdaptee(): MetaClass;
      getAdapteeP(): Promise<MetaClass>;
      // public abstract java.lang.Object groovy.lang.MetaClass.getAttribute(java.lang.Class,java.lang.Object,java.lang.String,boolean)
      getAttribute(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t): object_t;
      getAttributeP(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.getAttribute(java.lang.Object,java.lang.String)
      getAttribute(arg0: object_t, arg1: string_t): object_t;
      getAttributeP(arg0: object_t, arg1: string_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.codehaus.groovy.ast.ClassNode groovy.lang.MetaClass.getClassNode()
      getClassNode(): ClassNode;
      getClassNodeP(): Promise<ClassNode>;
      // public groovy.lang.MetaClass groovy.lang.DelegatingMetaClass.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public abstract groovy.lang.MetaMethod groovy.lang.MetaObjectProtocol.getMetaMethod(java.lang.String,java.lang.Object[])
      getMetaMethod(arg0: string_t, arg1: object_array_t): MetaMethod;
      getMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<MetaMethod>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaClass.getMetaMethods()
      getMetaMethods(): List;
      getMetaMethodsP(): Promise<List>;
      // public abstract groovy.lang.MetaProperty groovy.lang.MetaObjectProtocol.getMetaProperty(java.lang.String)
      getMetaProperty(arg0: string_t): MetaProperty;
      getMetaPropertyP(arg0: string_t): Promise<MetaProperty>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaClass.getMethods()
      getMethods(): List;
      getMethodsP(): Promise<List>;
      // public abstract java.util.List<groovy.lang.MetaProperty> groovy.lang.MetaClass.getProperties()
      getProperties(): List;
      getPropertiesP(): Promise<List>;
      // public abstract java.lang.Object groovy.lang.MetaClass.getProperty(java.lang.Class,java.lang.Object,java.lang.String,boolean,boolean)
      getProperty(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): object_t;
      getPropertyP(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.getProperty(java.lang.Object,java.lang.String)
      getProperty(arg0: object_t, arg1: string_t): object_t;
      getPropertyP(arg0: object_t, arg1: string_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public abstract groovy.lang.MetaMethod groovy.lang.MetaObjectProtocol.getStaticMetaMethod(java.lang.String,java.lang.Object[])
      getStaticMetaMethod(arg0: string_t, arg1: object_array_t): MetaMethod;
      getStaticMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<MetaMethod>;
      // public groovy.lang.MetaMethod groovy.lang.DelegatingMetaClass.getStaticMetaMethod(java.lang.String,java.lang.Class[])
      getStaticMetaMethod(arg0: string_t, arg1: array_t<Class>): MetaMethod;
      getStaticMetaMethodP(arg0: string_t, arg1: array_t<Class>): Promise<MetaMethod>;
      // public abstract java.lang.Class groovy.lang.MetaObjectProtocol.getTheClass()
      getTheClass(): Class;
      getTheClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract groovy.lang.MetaProperty groovy.lang.MetaObjectProtocol.hasProperty(java.lang.Object,java.lang.String)
      hasProperty(arg0: object_t, arg1: string_t): MetaProperty;
      hasPropertyP(arg0: object_t, arg1: string_t): Promise<MetaProperty>;
      // public abstract void groovy.lang.MetaClass.initialize()
      initialize(): void;
      initializeP(): Promise<void>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeConstructor(java.lang.Object[])
      invokeConstructor(arg0: object_array_t): object_t;
      invokeConstructorP(arg0: object_array_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaClass.invokeMethod(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean,boolean)
      invokeMethod(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): object_t;
      invokeMethodP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)
      invokeMethod(arg0: object_t, arg1: string_t, arg2: object_t): object_t;
      invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<object_t>;
      // public java.lang.Object groovy.lang.DelegatingMetaClass.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaClass.invokeMissingMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeMissingMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeMissingMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaClass.invokeMissingProperty(java.lang.Object,java.lang.String,java.lang.Object,boolean)
      invokeMissingProperty(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): object_t;
      invokeMissingPropertyP(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeStaticMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeStaticMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeStaticMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public boolean groovy.lang.DelegatingMetaClass.isGroovyObject()
      isGroovyObject(): boolean;
      isGroovyObjectP(): Promise<boolean>;
      // public boolean groovy.lang.DelegatingMetaClass.isModified()
      isModified(): boolean;
      isModifiedP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract groovy.lang.MetaMethod groovy.lang.MetaClass.pickMethod(java.lang.String,java.lang.Class[])
      pickMethod(arg0: string_t, arg1: array_t<Class>): MetaMethod;
      pickMethodP(arg0: string_t, arg1: array_t<Class>): Promise<MetaMethod>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaObjectProtocol.respondsTo(java.lang.Object,java.lang.String,java.lang.Object[])
      respondsTo(arg0: object_t, arg1: string_t, arg2: object_array_t): List;
      respondsToP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<List>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaObjectProtocol.respondsTo(java.lang.Object,java.lang.String)
      respondsTo(arg0: object_t, arg1: string_t): List;
      respondsToP(arg0: object_t, arg1: string_t): Promise<List>;
      // public abstract int groovy.lang.MetaClass.selectConstructorAndTransformArguments(int,java.lang.Object[])
      selectConstructorAndTransformArguments(arg0: integer_t, arg1: object_array_t): number;
      selectConstructorAndTransformArgumentsP(arg0: integer_t, arg1: object_array_t): Promise<number>;
      // public void groovy.lang.DelegatingMetaClass.setAdaptee(groovy.lang.MetaClass)
      setAdaptee(arg0: MetaClass): void;
      setAdapteeP(arg0: MetaClass): Promise<void>;
      // public abstract void groovy.lang.MetaClass.setAttribute(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object,boolean,boolean)
      setAttribute(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
      setAttributeP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
      // public abstract void groovy.lang.MetaObjectProtocol.setAttribute(java.lang.Object,java.lang.String,java.lang.Object)
      setAttribute(arg0: object_t, arg1: string_t, arg2: object_t): void;
      setAttributeP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public abstract void groovy.lang.MetaClass.setProperty(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object,boolean,boolean)
      setProperty(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
      setPropertyP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
      // public abstract void groovy.lang.MetaObjectProtocol.setProperty(java.lang.Object,java.lang.String,java.lang.Object)
      setProperty(arg0: object_t, arg1: string_t, arg2: object_t): void;
      setPropertyP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
      // public void groovy.lang.DelegatingMetaClass.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DelegatingMetaClass {
      export interface Static {
        new (arg0: MetaClass): groovy.lang.DelegatingMetaClass;
        new (arg0: Class): groovy.lang.DelegatingMetaClass;
      }
    }
  }

  export module groovy.lang {
    export interface GroovyClassLoader extends Java.java.lang.ClassLoader {
      // public void groovy.lang.GroovyClassLoader.addClasspath(java.lang.String)
      addClasspath(arg0: string_t): void;
      addClasspathP(arg0: string_t): Promise<void>;
      // public void groovy.lang.GroovyClassLoader.addURL(java.net.URL)
      addURL(arg0: object_t): void;
      addURLP(arg0: object_t): Promise<void>;
      // public void java.lang.ClassLoader.clearAssertionStatus()
      clearAssertionStatus(): void;
      clearAssertionStatusP(): Promise<void>;
      // public void groovy.lang.GroovyClassLoader.clearCache()
      clearCache(): void;
      clearCacheP(): Promise<void>;
      // public void java.net.URLClassLoader.close() throws java.io.IOException
      close(): void;
      closeP(): Promise<void>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.defineClass(org.codehaus.groovy.ast.ClassNode,java.lang.String,java.lang.String)
      defineClass(arg0: ClassNode, arg1: string_t, arg2: string_t): Class;
      defineClassP(arg0: ClassNode, arg1: string_t, arg2: string_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.defineClass(java.lang.String,byte[])
      defineClass(arg0: string_t, arg1: object_array_t): Class;
      defineClassP(arg0: string_t, arg1: object_array_t): Promise<Class>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.net.URL java.net.URLClassLoader.findResource(java.lang.String)
      findResource(arg0: string_t): object_t;
      findResourceP(arg0: string_t): Promise<object_t>;
      // public java.util.Enumeration<java.net.URL> java.net.URLClassLoader.findResources(java.lang.String) throws java.io.IOException
      findResources(arg0: string_t): object_t;
      findResourcesP(arg0: string_t): Promise<object_t>;
      // public synchronized java.lang.String groovy.lang.GroovyClassLoader.generateScriptName()
      generateScriptName(): string;
      generateScriptNameP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.Class[] groovy.lang.GroovyClassLoader.getLoadedClasses()
      getLoadedClasses(): Class[];
      getLoadedClassesP(): Promise<Class[]>;
      // public final java.lang.ClassLoader java.lang.ClassLoader.getParent()
      getParent(): ClassLoader;
      getParentP(): Promise<ClassLoader>;
      // public java.net.URL java.lang.ClassLoader.getResource(java.lang.String)
      getResource(arg0: string_t): object_t;
      getResourceP(arg0: string_t): Promise<object_t>;
      // public java.io.InputStream java.lang.ClassLoader.getResourceAsStream(java.lang.String)
      getResourceAsStream(arg0: string_t): InputStream;
      getResourceAsStreamP(arg0: string_t): Promise<InputStream>;
      // public groovy.lang.GroovyResourceLoader groovy.lang.GroovyClassLoader.getResourceLoader()
      getResourceLoader(): GroovyResourceLoader;
      getResourceLoaderP(): Promise<GroovyResourceLoader>;
      // public java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getResources(java.lang.String) throws java.io.IOException
      getResources(arg0: string_t): object_t;
      getResourcesP(arg0: string_t): Promise<object_t>;
      // public java.net.URL[] java.net.URLClassLoader.getURLs()
      getURLs(): object_t[];
      getURLsP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Boolean groovy.lang.GroovyClassLoader.isShouldRecompile()
      isShouldRecompile(): boolean;
      isShouldRecompileP(): Promise<boolean>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.loadClass(java.lang.String,boolean,boolean,boolean) throws java.lang.ClassNotFoundException,org.codehaus.groovy.control.CompilationFailedException
      loadClass(arg0: string_t, arg1: boolean_t, arg2: boolean_t, arg3: boolean_t): Class;
      loadClassP(arg0: string_t, arg1: boolean_t, arg2: boolean_t, arg3: boolean_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.loadClass(java.lang.String,boolean,boolean) throws java.lang.ClassNotFoundException,org.codehaus.groovy.control.CompilationFailedException
      loadClass(arg0: string_t, arg1: boolean_t, arg2: boolean_t): Class;
      loadClassP(arg0: string_t, arg1: boolean_t, arg2: boolean_t): Promise<Class>;
      // public java.lang.Class<?> java.lang.ClassLoader.loadClass(java.lang.String) throws java.lang.ClassNotFoundException
      loadClass(arg0: string_t): Class;
      loadClassP(arg0: string_t): Promise<Class>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(java.io.InputStream,java.lang.String) throws org.codehaus.groovy.control.CompilationFailedException
      parseClass(arg0: InputStream, arg1: string_t): Class;
      parseClassP(arg0: InputStream, arg1: string_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(java.lang.String,java.lang.String) throws org.codehaus.groovy.control.CompilationFailedException
      parseClass(arg0: string_t, arg1: string_t): Class;
      parseClassP(arg0: string_t, arg1: string_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(groovy.lang.GroovyCodeSource,boolean) throws org.codehaus.groovy.control.CompilationFailedException
      parseClass(arg0: GroovyCodeSource, arg1: boolean_t): Class;
      parseClassP(arg0: GroovyCodeSource, arg1: boolean_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(groovy.lang.GroovyCodeSource) throws org.codehaus.groovy.control.CompilationFailedException
      parseClass(arg0: GroovyCodeSource): Class;
      parseClassP(arg0: GroovyCodeSource): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(java.lang.String) throws org.codehaus.groovy.control.CompilationFailedException
      parseClass(arg0: string_t): Class;
      parseClassP(arg0: string_t): Promise<Class>;
      // public java.lang.Class groovy.lang.GroovyClassLoader.parseClass(java.io.File) throws org.codehaus.groovy.control.CompilationFailedException,java.io.IOException
      parseClass(arg0: object_t): Class;
      parseClassP(arg0: object_t): Promise<Class>;
      // public void java.lang.ClassLoader.setClassAssertionStatus(java.lang.String,boolean)
      setClassAssertionStatus(arg0: string_t, arg1: boolean_t): void;
      setClassAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public void java.lang.ClassLoader.setDefaultAssertionStatus(boolean)
      setDefaultAssertionStatus(arg0: boolean_t): void;
      setDefaultAssertionStatusP(arg0: boolean_t): Promise<void>;
      // public void java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)
      setPackageAssertionStatus(arg0: string_t, arg1: boolean_t): void;
      setPackageAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public void groovy.lang.GroovyClassLoader.setResourceLoader(groovy.lang.GroovyResourceLoader)
      setResourceLoader(arg0: GroovyResourceLoader): void;
      setResourceLoaderP(arg0: GroovyResourceLoader): Promise<void>;
      // public void groovy.lang.GroovyClassLoader.setShouldRecompile(java.lang.Boolean)
      setShouldRecompile(arg0: boolean_t): void;
      setShouldRecompileP(arg0: boolean_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GroovyClassLoader {
      export interface Static {
        new (arg0: ClassLoader, arg1: CompilerConfiguration, arg2: boolean_t): groovy.lang.GroovyClassLoader;
        new (arg0: ClassLoader, arg1: CompilerConfiguration): groovy.lang.GroovyClassLoader;
        new (arg0: GroovyClassLoader): groovy.lang.GroovyClassLoader;
        new (arg0: ClassLoader): groovy.lang.GroovyClassLoader;
        new (): groovy.lang.GroovyClassLoader;
        // public static java.lang.ClassLoader java.lang.ClassLoader.getSystemClassLoader()
        getSystemClassLoader(): ClassLoader;
        getSystemClassLoaderP(): Promise<ClassLoader>;
        // public static java.net.URL java.lang.ClassLoader.getSystemResource(java.lang.String)
        getSystemResource(arg0: string_t): object_t;
        getSystemResourceP(arg0: string_t): Promise<object_t>;
        // public static java.io.InputStream java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
        getSystemResourceAsStream(arg0: string_t): InputStream;
        getSystemResourceAsStreamP(arg0: string_t): Promise<InputStream>;
        // public static java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getSystemResources(java.lang.String) throws java.io.IOException
        getSystemResources(arg0: string_t): object_t;
        getSystemResourcesP(arg0: string_t): Promise<object_t>;
        // public static java.net.URLClassLoader java.net.URLClassLoader.newInstance(java.net.URL[],java.lang.ClassLoader)
        newInstance(arg0: object_array_t, arg1: ClassLoader): object_t;
        newInstanceP(arg0: object_array_t, arg1: ClassLoader): Promise<object_t>;
        // public static java.net.URLClassLoader java.net.URLClassLoader.newInstance(java.net.URL[])
        newInstance(arg0: object_array_t): object_t;
        newInstanceP(arg0: object_array_t): Promise<object_t>;
      }
    }
  }

  export module groovy.lang {
    export interface GroovyCodeSource extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.io.File groovy.lang.GroovyCodeSource.getFile()
      getFile(): object_t;
      getFileP(): Promise<object_t>;
      // public java.lang.String groovy.lang.GroovyCodeSource.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public java.lang.String groovy.lang.GroovyCodeSource.getScriptText()
      getScriptText(): string;
      getScriptTextP(): Promise<string>;
      // public java.net.URL groovy.lang.GroovyCodeSource.getURL()
      getURL(): object_t;
      getURLP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean groovy.lang.GroovyCodeSource.isCachable()
      isCachable(): boolean;
      isCachableP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void groovy.lang.GroovyCodeSource.setCachable(boolean)
      setCachable(arg0: boolean_t): void;
      setCachableP(arg0: boolean_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GroovyCodeSource {
      export interface Static {
        new (arg0: string_t, arg1: string_t, arg2: string_t): groovy.lang.GroovyCodeSource;
        new (arg0: object_t, arg1: string_t, arg2: string_t): groovy.lang.GroovyCodeSource;
        new (arg0: object_t, arg1: string_t): groovy.lang.GroovyCodeSource;
        new (arg0: object_t): groovy.lang.GroovyCodeSource;
        new (arg0: object_t): groovy.lang.GroovyCodeSource;
        new (arg0: object_t): groovy.lang.GroovyCodeSource;
      }
    }
  }

  export module groovy.lang {
    export interface GroovyObjectSupport extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public groovy.lang.MetaClass groovy.lang.GroovyObjectSupport.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GroovyObjectSupport {
      export interface Static {
        new (): groovy.lang.GroovyObjectSupport;
      }
    }
  }

  export module groovy.lang {
    export interface GroovyResourceLoader extends Java.java.lang.Object {
      // public abstract java.net.URL groovy.lang.GroovyResourceLoader.loadGroovySource(java.lang.String) throws java.net.MalformedURLException
      loadGroovySource(arg0: string_t): object_t;
      loadGroovySourceP(arg0: string_t): Promise<object_t>;
    }
    export module GroovyResourceLoader {
      export interface Static {
      }
    }
  }

  export module groovy.lang {
    export interface IntRange extends Java.java.util.AbstractList,Java.groovy.lang.Range {
      // public abstract void java.util.List.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public abstract boolean groovy.lang.Range.containsWithinBounds(java.lang.Object)
      containsWithinBounds(arg0: object_t): boolean;
      containsWithinBoundsP(arg0: object_t): Promise<boolean>;
      // public boolean groovy.lang.IntRange.equals(groovy.lang.IntRange)
      equals(arg0: IntRange): boolean;
      equalsP(arg0: IntRange): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public java.lang.Integer groovy.lang.IntRange.get(int)
      get(arg0: integer_t): number;
      getP(arg0: integer_t): Promise<number>;
      // public abstract E java.util.List.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract T groovy.lang.Range.getFrom()
      getFrom(): object_t;
      getFromP(): Promise<object_t>;
      // public java.lang.Integer groovy.lang.IntRange.getFrom()
      getFrom(): number;
      getFromP(): Promise<number>;
      // public int groovy.lang.IntRange.getFromInt()
      getFromInt(): number;
      getFromIntP(): Promise<number>;
      // public java.lang.Boolean groovy.lang.IntRange.getInclusive()
      getInclusive(): boolean;
      getInclusiveP(): Promise<boolean>;
      // public abstract T groovy.lang.Range.getTo()
      getTo(): object_t;
      getToP(): Promise<object_t>;
      // public java.lang.Integer groovy.lang.IntRange.getTo()
      getTo(): number;
      getToP(): Promise<number>;
      // public int groovy.lang.IntRange.getToInt()
      getToInt(): number;
      getToIntP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract java.lang.String groovy.lang.Range.inspect()
      inspect(): string;
      inspectP(): Promise<string>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract boolean groovy.lang.Range.isReverse()
      isReverse(): boolean;
      isReverseP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIterator(arg0: integer_t): ListIterator;
      listIteratorP(arg0: integer_t): Promise<ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIterator(): ListIterator;
      listIteratorP(): Promise<ListIterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: UnaryOperator): void;
      replaceAllP(arg0: UnaryOperator): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: Comparator): void;
      sortP(arg0: Comparator): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public abstract void groovy.lang.Range.step(int,groovy.lang.Closure)
      step(arg0: integer_t, arg1: Closure): void;
      stepP(arg0: integer_t, arg1: Closure): Promise<void>;
      // public abstract java.util.List<T> groovy.lang.Range.step(int)
      step(arg0: integer_t): List;
      stepP(arg0: integer_t): Promise<List>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public org.codehaus.groovy.runtime.RangeInfo groovy.lang.IntRange.subListBorders(int)
      subListBorders(arg0: integer_t): object_t;
      subListBordersP(arg0: integer_t): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IntRange {
      export interface Static {
        new (arg0: boolean_t, arg1: integer_t, arg2: integer_t): groovy.lang.IntRange;
        new (arg0: integer_t, arg1: integer_t): groovy.lang.IntRange;
      }
    }
  }

  export module groovy.lang {
    export interface MetaBeanProperty extends Java.groovy.lang.MetaProperty {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public org.codehaus.groovy.reflection.CachedField groovy.lang.MetaBeanProperty.getField()
      getField(): object_t;
      getFieldP(): Promise<object_t>;
      // public groovy.lang.MetaMethod groovy.lang.MetaBeanProperty.getGetter()
      getGetter(): MetaMethod;
      getGetterP(): Promise<MetaMethod>;
      // public int groovy.lang.MetaProperty.getModifiers()
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public java.lang.String groovy.lang.MetaProperty.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public abstract java.lang.Object groovy.lang.MetaProperty.getProperty(java.lang.Object)
      getProperty(arg0: object_t): object_t;
      getPropertyP(arg0: object_t): Promise<object_t>;
      // public groovy.lang.MetaMethod groovy.lang.MetaBeanProperty.getSetter()
      getSetter(): MetaMethod;
      getSetterP(): Promise<MetaMethod>;
      // public java.lang.Class groovy.lang.MetaProperty.getType()
      getType(): Class;
      getTypeP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void groovy.lang.MetaBeanProperty.setField(org.codehaus.groovy.reflection.CachedField)
      setField(arg0: object_t): void;
      setFieldP(arg0: object_t): Promise<void>;
      // public abstract void groovy.lang.MetaProperty.setProperty(java.lang.Object,java.lang.Object)
      setProperty(arg0: object_t, arg1: object_t): void;
      setPropertyP(arg0: object_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MetaBeanProperty {
      export interface Static {
        new (arg0: string_t, arg1: Class, arg2: MetaMethod, arg3: MetaMethod): groovy.lang.MetaBeanProperty;
        // public static java.lang.String groovy.lang.MetaProperty.getGetterName(java.lang.String,java.lang.Class)
        getGetterName(arg0: string_t, arg1: Class): string;
        getGetterNameP(arg0: string_t, arg1: Class): Promise<string>;
        // public static java.lang.String groovy.lang.MetaProperty.getSetterName(java.lang.String)
        getSetterName(arg0: string_t): string;
        getSetterNameP(arg0: string_t): Promise<string>;
        PROPERTY_SET_PREFIX: string;
      }
    }
  }

  export module groovy.lang {
    export interface MetaClass extends Java.java.lang.Object {
      // public abstract java.lang.Object groovy.lang.MetaClass.getAttribute(java.lang.Class,java.lang.Object,java.lang.String,boolean)
      getAttribute(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t): object_t;
      getAttributeP(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.getAttribute(java.lang.Object,java.lang.String)
      getAttribute(arg0: object_t, arg1: string_t): object_t;
      getAttributeP(arg0: object_t, arg1: string_t): Promise<object_t>;
      // public abstract org.codehaus.groovy.ast.ClassNode groovy.lang.MetaClass.getClassNode()
      getClassNode(): ClassNode;
      getClassNodeP(): Promise<ClassNode>;
      // public abstract groovy.lang.MetaMethod groovy.lang.MetaObjectProtocol.getMetaMethod(java.lang.String,java.lang.Object[])
      getMetaMethod(arg0: string_t, arg1: object_array_t): MetaMethod;
      getMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<MetaMethod>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaClass.getMetaMethods()
      getMetaMethods(): List;
      getMetaMethodsP(): Promise<List>;
      // public abstract groovy.lang.MetaProperty groovy.lang.MetaObjectProtocol.getMetaProperty(java.lang.String)
      getMetaProperty(arg0: string_t): MetaProperty;
      getMetaPropertyP(arg0: string_t): Promise<MetaProperty>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaClass.getMethods()
      getMethods(): List;
      getMethodsP(): Promise<List>;
      // public abstract java.util.List<groovy.lang.MetaProperty> groovy.lang.MetaClass.getProperties()
      getProperties(): List;
      getPropertiesP(): Promise<List>;
      // public abstract java.lang.Object groovy.lang.MetaClass.getProperty(java.lang.Class,java.lang.Object,java.lang.String,boolean,boolean)
      getProperty(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): object_t;
      getPropertyP(arg0: Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.getProperty(java.lang.Object,java.lang.String)
      getProperty(arg0: object_t, arg1: string_t): object_t;
      getPropertyP(arg0: object_t, arg1: string_t): Promise<object_t>;
      // public abstract groovy.lang.MetaMethod groovy.lang.MetaObjectProtocol.getStaticMetaMethod(java.lang.String,java.lang.Object[])
      getStaticMetaMethod(arg0: string_t, arg1: object_array_t): MetaMethod;
      getStaticMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<MetaMethod>;
      // public abstract java.lang.Class groovy.lang.MetaObjectProtocol.getTheClass()
      getTheClass(): Class;
      getTheClassP(): Promise<Class>;
      // public abstract groovy.lang.MetaProperty groovy.lang.MetaObjectProtocol.hasProperty(java.lang.Object,java.lang.String)
      hasProperty(arg0: object_t, arg1: string_t): MetaProperty;
      hasPropertyP(arg0: object_t, arg1: string_t): Promise<MetaProperty>;
      // public abstract void groovy.lang.MetaClass.initialize()
      initialize(): void;
      initializeP(): Promise<void>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeConstructor(java.lang.Object[])
      invokeConstructor(arg0: object_array_t): object_t;
      invokeConstructorP(arg0: object_array_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaClass.invokeMethod(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[],boolean,boolean)
      invokeMethod(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): object_t;
      invokeMethodP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)
      invokeMethod(arg0: object_t, arg1: string_t, arg2: object_t): object_t;
      invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaClass.invokeMissingMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeMissingMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeMissingMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaClass.invokeMissingProperty(java.lang.Object,java.lang.String,java.lang.Object,boolean)
      invokeMissingProperty(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): object_t;
      invokeMissingPropertyP(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): Promise<object_t>;
      // public abstract java.lang.Object groovy.lang.MetaObjectProtocol.invokeStaticMethod(java.lang.Object,java.lang.String,java.lang.Object[])
      invokeStaticMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeStaticMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public abstract groovy.lang.MetaMethod groovy.lang.MetaClass.pickMethod(java.lang.String,java.lang.Class[])
      pickMethod(arg0: string_t, arg1: array_t<Class>): MetaMethod;
      pickMethodP(arg0: string_t, arg1: array_t<Class>): Promise<MetaMethod>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaObjectProtocol.respondsTo(java.lang.Object,java.lang.String,java.lang.Object[])
      respondsTo(arg0: object_t, arg1: string_t, arg2: object_array_t): List;
      respondsToP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<List>;
      // public abstract java.util.List<groovy.lang.MetaMethod> groovy.lang.MetaObjectProtocol.respondsTo(java.lang.Object,java.lang.String)
      respondsTo(arg0: object_t, arg1: string_t): List;
      respondsToP(arg0: object_t, arg1: string_t): Promise<List>;
      // public abstract int groovy.lang.MetaClass.selectConstructorAndTransformArguments(int,java.lang.Object[])
      selectConstructorAndTransformArguments(arg0: integer_t, arg1: object_array_t): number;
      selectConstructorAndTransformArgumentsP(arg0: integer_t, arg1: object_array_t): Promise<number>;
      // public abstract void groovy.lang.MetaClass.setAttribute(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object,boolean,boolean)
      setAttribute(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
      setAttributeP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
      // public abstract void groovy.lang.MetaObjectProtocol.setAttribute(java.lang.Object,java.lang.String,java.lang.Object)
      setAttribute(arg0: object_t, arg1: string_t, arg2: object_t): void;
      setAttributeP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
      // public abstract void groovy.lang.MetaClass.setProperty(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object,boolean,boolean)
      setProperty(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
      setPropertyP(arg0: Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
      // public abstract void groovy.lang.MetaObjectProtocol.setProperty(java.lang.Object,java.lang.String,java.lang.Object)
      setProperty(arg0: object_t, arg1: string_t, arg2: object_t): void;
      setPropertyP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
    }
    export module MetaClass {
      export interface Static {
      }
    }
  }

  export module groovy.lang {
    export interface MetaMethod extends Java.java.lang.Object {
      // public void groovy.lang.MetaMethod.checkParameters(java.lang.Class[])
      checkParameters(arg0: array_t<Class>): void;
      checkParametersP(arg0: array_t<Class>): Promise<void>;
      // public java.lang.Object groovy.lang.MetaMethod.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public final java.lang.Object[] org.codehaus.groovy.reflection.ParameterTypes.coerceArgumentsToClasses(java.lang.Object[])
      coerceArgumentsToClasses(arg0: object_array_t): object_t[];
      coerceArgumentsToClassesP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.Object[] org.codehaus.groovy.reflection.ParameterTypes.correctArguments(java.lang.Object[])
      correctArguments(arg0: object_array_t): object_t[];
      correctArgumentsP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.Object groovy.lang.MetaMethod.doMethodInvoke(java.lang.Object,java.lang.Object[])
      doMethodInvoke(arg0: object_t, arg1: object_array_t): object_t;
      doMethodInvokeP(arg0: object_t, arg1: object_array_t): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.codehaus.groovy.reflection.CachedClass groovy.lang.MetaMethod.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public java.lang.String groovy.lang.MetaMethod.getDescriptor()
      getDescriptor(): string;
      getDescriptorP(): Promise<string>;
      // public abstract int groovy.lang.MetaMethod.getModifiers()
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public java.lang.String groovy.lang.MetaMethod.getMopName()
      getMopName(): string;
      getMopNameP(): Promise<string>;
      // public abstract java.lang.String groovy.lang.MetaMethod.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public java.lang.Class[] org.codehaus.groovy.reflection.ParameterTypes.getNativeParameterTypes()
      getNativeParameterTypes(): Class[];
      getNativeParameterTypesP(): Promise<Class[]>;
      // public org.codehaus.groovy.reflection.CachedClass[] org.codehaus.groovy.reflection.ParameterTypes.getParameterTypes()
      getParameterTypes(): object_t[];
      getParameterTypesP(): Promise<object_t[]>;
      // public abstract java.lang.Class groovy.lang.MetaMethod.getReturnType()
      getReturnType(): Class;
      getReturnTypeP(): Promise<Class>;
      // public synchronized java.lang.String groovy.lang.MetaMethod.getSignature()
      getSignature(): string;
      getSignatureP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.Object groovy.lang.MetaMethod.invoke(java.lang.Object,java.lang.Object[])
      invoke(arg0: object_t, arg1: object_array_t): object_t;
      invokeP(arg0: object_t, arg1: object_array_t): Promise<object_t>;
      // public boolean groovy.lang.MetaMethod.isAbstract()
      isAbstract(): boolean;
      isAbstractP(): Promise<boolean>;
      // public boolean groovy.lang.MetaMethod.isCacheable()
      isCacheable(): boolean;
      isCacheableP(): Promise<boolean>;
      // public boolean groovy.lang.MetaMethod.isMethod(groovy.lang.MetaMethod)
      isMethod(arg0: MetaMethod): boolean;
      isMethodP(arg0: MetaMethod): Promise<boolean>;
      // public final boolean groovy.lang.MetaMethod.isPrivate()
      isPrivate(): boolean;
      isPrivateP(): Promise<boolean>;
      // public final boolean groovy.lang.MetaMethod.isProtected()
      isProtected(): boolean;
      isProtectedP(): Promise<boolean>;
      // public final boolean groovy.lang.MetaMethod.isPublic()
      isPublic(): boolean;
      isPublicP(): Promise<boolean>;
      // public final boolean groovy.lang.MetaMethod.isSame(groovy.lang.MetaMethod)
      isSame(arg0: MetaMethod): boolean;
      isSameP(arg0: MetaMethod): Promise<boolean>;
      // public boolean groovy.lang.MetaMethod.isStatic()
      isStatic(): boolean;
      isStaticP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isValidExactMethod(java.lang.Object[])
      isValidExactMethod(arg0: object_array_t): boolean;
      isValidExactMethodP(arg0: object_array_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isValidExactMethod(java.lang.Class[])
      isValidExactMethod(arg0: array_t<Class>): boolean;
      isValidExactMethodP(arg0: array_t<Class>): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isValidMethod(java.lang.Object[])
      isValidMethod(arg0: object_array_t): boolean;
      isValidMethodP(arg0: object_array_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isValidMethod(java.lang.Class[])
      isValidMethod(arg0: array_t<Class>): boolean;
      isValidMethodP(arg0: array_t<Class>): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isVargsMethod(java.lang.Object[])
      isVargsMethod(arg0: object_array_t): boolean;
      isVargsMethodP(arg0: object_array_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.reflection.ParameterTypes.isVargsMethod()
      isVargsMethod(): boolean;
      isVargsMethodP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final java.lang.RuntimeException groovy.lang.MetaMethod.processDoMethodInvokeException(java.lang.Exception,java.lang.Object,java.lang.Object[])
      processDoMethodInvokeException(arg0: object_t, arg1: object_t, arg2: object_array_t): object_t;
      processDoMethodInvokeExceptionP(arg0: object_t, arg1: object_t, arg2: object_array_t): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MetaMethod {
      export interface Static {
        new (arg0: array_t<Class>): groovy.lang.MetaMethod;
        new (): groovy.lang.MetaMethod;
      }
    }
  }

  export module groovy.lang {
    export interface MetaProperty extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int groovy.lang.MetaProperty.getModifiers()
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public java.lang.String groovy.lang.MetaProperty.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public abstract java.lang.Object groovy.lang.MetaProperty.getProperty(java.lang.Object)
      getProperty(arg0: object_t): object_t;
      getPropertyP(arg0: object_t): Promise<object_t>;
      // public java.lang.Class groovy.lang.MetaProperty.getType()
      getType(): Class;
      getTypeP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void groovy.lang.MetaProperty.setProperty(java.lang.Object,java.lang.Object)
      setProperty(arg0: object_t, arg1: object_t): void;
      setPropertyP(arg0: object_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MetaProperty {
      export interface Static {
        new (arg0: string_t, arg1: Class): groovy.lang.MetaProperty;
        // public static java.lang.String groovy.lang.MetaProperty.getGetterName(java.lang.String,java.lang.Class)
        getGetterName(arg0: string_t, arg1: Class): string;
        getGetterNameP(arg0: string_t, arg1: Class): Promise<string>;
        // public static java.lang.String groovy.lang.MetaProperty.getSetterName(java.lang.String)
        getSetterName(arg0: string_t): string;
        getSetterNameP(arg0: string_t): Promise<string>;
        PROPERTY_SET_PREFIX: string;
      }
    }
  }

  export module groovy.lang {
    export interface Range extends Java.java.util.List {
      // public abstract void java.util.List.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public abstract boolean groovy.lang.Range.containsWithinBounds(java.lang.Object)
      containsWithinBounds(arg0: object_t): boolean;
      containsWithinBoundsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract E java.util.List.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public abstract T groovy.lang.Range.getFrom()
      getFrom(): object_t;
      getFromP(): Promise<object_t>;
      // public abstract T groovy.lang.Range.getTo()
      getTo(): object_t;
      getToP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract java.lang.String groovy.lang.Range.inspect()
      inspect(): string;
      inspectP(): Promise<string>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract boolean groovy.lang.Range.isReverse()
      isReverse(): boolean;
      isReverseP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIterator(arg0: integer_t): ListIterator;
      listIteratorP(arg0: integer_t): Promise<ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIterator(): ListIterator;
      listIteratorP(): Promise<ListIterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: UnaryOperator): void;
      replaceAllP(arg0: UnaryOperator): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: Comparator): void;
      sortP(arg0: Comparator): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public abstract void groovy.lang.Range.step(int,groovy.lang.Closure)
      step(arg0: integer_t, arg1: Closure): void;
      stepP(arg0: integer_t, arg1: Closure): Promise<void>;
      // public abstract java.util.List<T> groovy.lang.Range.step(int)
      step(arg0: integer_t): List;
      stepP(arg0: integer_t): Promise<List>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Range {
      export interface Static {
      }
    }
  }

  export module groovy.lang {
    export interface Reference extends Java.groovy.lang.GroovyObjectSupport {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public T groovy.lang.Reference.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public groovy.lang.MetaClass groovy.lang.GroovyObjectSupport.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void groovy.lang.Reference.set(T)
      set(arg0: object_t): void;
      setP(arg0: object_t): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Reference {
      export interface Static {
        new (arg0: object_t): groovy.lang.Reference;
        new (): groovy.lang.Reference;
      }
    }
  }

  export module java.io {
    export interface ByteArrayOutputStream extends Java.java.io.OutputStream {
      // public void java.io.OutputStream.close() throws java.io.IOException
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void java.io.OutputStream.flush() throws java.io.IOException
      flush(): void;
      flushP(): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public synchronized void java.io.ByteArrayOutputStream.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public synchronized int java.io.ByteArrayOutputStream.size()
      size(): number;
      sizeP(): Promise<number>;
      // public synchronized byte[] java.io.ByteArrayOutputStream.toByteArray()
      toByteArray(): object_t[];
      toByteArrayP(): Promise<object_t[]>;
      // public synchronized java.lang.String java.io.ByteArrayOutputStream.toString(java.lang.String) throws java.io.UnsupportedEncodingException
      toString(arg0: string_t): string;
      toStringP(arg0: string_t): Promise<string>;
      // public synchronized java.lang.String java.io.ByteArrayOutputStream.toString(int)
      toString(arg0: integer_t): string;
      toStringP(arg0: integer_t): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public void java.io.OutputStream.write(byte[],int,int) throws java.io.IOException
      write(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
      writeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
      // public void java.io.OutputStream.write(byte[]) throws java.io.IOException
      write(arg0: object_array_t): void;
      writeP(arg0: object_array_t): Promise<void>;
      // public abstract void java.io.OutputStream.write(int) throws java.io.IOException
      write(arg0: integer_t): void;
      writeP(arg0: integer_t): Promise<void>;
      // public synchronized void java.io.ByteArrayOutputStream.writeTo(java.io.OutputStream) throws java.io.IOException
      writeTo(arg0: OutputStream): void;
      writeToP(arg0: OutputStream): Promise<void>;
    }
    export module ByteArrayOutputStream {
      export interface Static {
        new (arg0: integer_t): java.io.ByteArrayOutputStream;
        new (): java.io.ByteArrayOutputStream;
      }
    }
  }

  export module java.io {
    export interface FileInputStream extends Java.java.io.InputStream {
      // public int java.io.InputStream.available() throws java.io.IOException
      available(): number;
      availableP(): Promise<number>;
      // public void java.io.InputStream.close() throws java.io.IOException
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.nio.channels.FileChannel java.io.FileInputStream.getChannel()
      getChannel(): object_t;
      getChannelP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.io.FileDescriptor java.io.FileInputStream.getFD() throws java.io.IOException
      getFD(): object_t;
      getFDP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized void java.io.InputStream.mark(int)
      mark(arg0: integer_t): void;
      markP(arg0: integer_t): Promise<void>;
      // public boolean java.io.InputStream.markSupported()
      markSupported(): boolean;
      markSupportedP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.io.InputStream.read(byte[],int,int) throws java.io.IOException
      read(arg0: object_array_t, arg1: integer_t, arg2: integer_t): number;
      readP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<number>;
      // public int java.io.InputStream.read(byte[]) throws java.io.IOException
      read(arg0: object_array_t): number;
      readP(arg0: object_array_t): Promise<number>;
      // public abstract int java.io.InputStream.read() throws java.io.IOException
      read(): number;
      readP(): Promise<number>;
      // public synchronized void java.io.InputStream.reset() throws java.io.IOException
      reset(): void;
      resetP(): Promise<void>;
      // public long java.io.InputStream.skip(long) throws java.io.IOException
      skip(arg0: long_t): longValue_t;
      skipP(arg0: long_t): Promise<longValue_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module FileInputStream {
      export interface Static {
        new (arg0: object_t): java.io.FileInputStream;
        new (arg0: string_t): java.io.FileInputStream;
        new (arg0: object_t): java.io.FileInputStream;
      }
    }
  }

  export module java.io {
    export interface FileOutputStream extends Java.java.io.OutputStream {
      // public void java.io.OutputStream.close() throws java.io.IOException
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void java.io.OutputStream.flush() throws java.io.IOException
      flush(): void;
      flushP(): Promise<void>;
      // public java.nio.channels.FileChannel java.io.FileOutputStream.getChannel()
      getChannel(): object_t;
      getChannelP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.io.FileDescriptor java.io.FileOutputStream.getFD() throws java.io.IOException
      getFD(): object_t;
      getFDP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public void java.io.OutputStream.write(byte[],int,int) throws java.io.IOException
      write(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
      writeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
      // public void java.io.OutputStream.write(byte[]) throws java.io.IOException
      write(arg0: object_array_t): void;
      writeP(arg0: object_array_t): Promise<void>;
      // public abstract void java.io.OutputStream.write(int) throws java.io.IOException
      write(arg0: integer_t): void;
      writeP(arg0: integer_t): Promise<void>;
    }
    export module FileOutputStream {
      export interface Static {
        new (arg0: string_t, arg1: boolean_t): java.io.FileOutputStream;
        new (arg0: object_t, arg1: boolean_t): java.io.FileOutputStream;
        new (arg0: object_t): java.io.FileOutputStream;
        new (arg0: string_t): java.io.FileOutputStream;
        new (arg0: object_t): java.io.FileOutputStream;
      }
    }
  }

  export module java.io {
    export interface InputStream extends Java.java.lang.Object {
      // public int java.io.InputStream.available() throws java.io.IOException
      available(): number;
      availableP(): Promise<number>;
      // public void java.io.InputStream.close() throws java.io.IOException
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized void java.io.InputStream.mark(int)
      mark(arg0: integer_t): void;
      markP(arg0: integer_t): Promise<void>;
      // public boolean java.io.InputStream.markSupported()
      markSupported(): boolean;
      markSupportedP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.io.InputStream.read(byte[],int,int) throws java.io.IOException
      read(arg0: object_array_t, arg1: integer_t, arg2: integer_t): number;
      readP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<number>;
      // public int java.io.InputStream.read(byte[]) throws java.io.IOException
      read(arg0: object_array_t): number;
      readP(arg0: object_array_t): Promise<number>;
      // public abstract int java.io.InputStream.read() throws java.io.IOException
      read(): number;
      readP(): Promise<number>;
      // public synchronized void java.io.InputStream.reset() throws java.io.IOException
      reset(): void;
      resetP(): Promise<void>;
      // public long java.io.InputStream.skip(long) throws java.io.IOException
      skip(arg0: long_t): longValue_t;
      skipP(arg0: long_t): Promise<longValue_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module InputStream {
      export interface Static {
        new (): java.io.InputStream;
      }
    }
  }

  export module java.io {
    export interface OutputStream extends Java.java.lang.Object {
      // public void java.io.OutputStream.close() throws java.io.IOException
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void java.io.OutputStream.flush() throws java.io.IOException
      flush(): void;
      flushP(): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public void java.io.OutputStream.write(byte[],int,int) throws java.io.IOException
      write(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
      writeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
      // public void java.io.OutputStream.write(byte[]) throws java.io.IOException
      write(arg0: object_array_t): void;
      writeP(arg0: object_array_t): Promise<void>;
      // public abstract void java.io.OutputStream.write(int) throws java.io.IOException
      write(arg0: integer_t): void;
      writeP(arg0: integer_t): Promise<void>;
    }
    export module OutputStream {
      export interface Static {
        new (): java.io.OutputStream;
      }
    }
  }

  export module java.lang {
    export interface Boolean extends Java.java.lang.Object {
      // public boolean java.lang.Boolean.booleanValue()
      booleanValue(): boolean;
      booleanValueP(): Promise<boolean>;
      // public int java.lang.Boolean.compareTo(java.lang.Boolean)
      compareTo(arg0: boolean_t): number;
      compareToP(arg0: boolean_t): Promise<number>;
      // public int java.lang.Boolean.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Boolean {
      export interface Static {
        new (arg0: string_t): java.lang.Boolean;
        new (arg0: boolean_t): java.lang.Boolean;
        // public static int java.lang.Boolean.compare(boolean,boolean)
        compare(arg0: boolean_t, arg1: boolean_t): number;
        compareP(arg0: boolean_t, arg1: boolean_t): Promise<number>;
        // public static boolean java.lang.Boolean.getBoolean(java.lang.String)
        getBoolean(arg0: string_t): boolean;
        getBooleanP(arg0: string_t): Promise<boolean>;
        // public static int java.lang.Boolean.hashCode(boolean)
        hashCode(arg0: boolean_t): number;
        hashCodeP(arg0: boolean_t): Promise<number>;
        // public static boolean java.lang.Boolean.logicalAnd(boolean,boolean)
        logicalAnd(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalAndP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.logicalOr(boolean,boolean)
        logicalOr(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalOrP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.logicalXor(boolean,boolean)
        logicalXor(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalXorP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.parseBoolean(java.lang.String)
        parseBoolean(arg0: string_t): boolean;
        parseBooleanP(arg0: string_t): Promise<boolean>;
        // public static java.lang.String java.lang.Boolean.toString(boolean)
        toString(arg0: boolean_t): string;
        toStringP(arg0: boolean_t): Promise<string>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)
        valueOf(arg0: string_t): boolean;
        valueOfP(arg0: string_t): Promise<boolean>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)
        valueOf(arg0: boolean_t): boolean;
        valueOfP(arg0: boolean_t): Promise<boolean>;
        TRUE: boolean;
        FALSE: boolean;
        TYPE: Class;
      }
    }
  }

  export module java.lang {
    export interface Class extends Java.java.lang.Object {
      // public <U> java.lang.Class<? extends U> java.lang.Class.asSubclass(java.lang.Class<U>)
      asSubclass(arg0: Class): Class;
      asSubclassP(arg0: Class): Promise<Class>;
      // public T java.lang.Class.cast(java.lang.Object)
      cast(arg0: object_t): object_t;
      castP(arg0: object_t): Promise<object_t>;
      // public boolean java.lang.Class.desiredAssertionStatus()
      desiredAssertionStatus(): boolean;
      desiredAssertionStatusP(): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.reflect.AnnotatedType[] java.lang.Class.getAnnotatedInterfaces()
      getAnnotatedInterfaces(): object_t[];
      getAnnotatedInterfacesP(): Promise<object_t[]>;
      // public java.lang.reflect.AnnotatedType java.lang.Class.getAnnotatedSuperclass()
      getAnnotatedSuperclass(): object_t;
      getAnnotatedSuperclassP(): Promise<object_t>;
      // public <A> A java.lang.Class.getAnnotation(java.lang.Class<A>)
      getAnnotation(arg0: Class): object_t;
      getAnnotationP(arg0: Class): Promise<object_t>;
      // public java.lang.annotation.Annotation[] java.lang.Class.getAnnotations()
      getAnnotations(): object_t[];
      getAnnotationsP(): Promise<object_t[]>;
      // public <A> A[] java.lang.Class.getAnnotationsByType(java.lang.Class<A>)
      getAnnotationsByType(arg0: Class): object_t[];
      getAnnotationsByTypeP(arg0: Class): Promise<object_t[]>;
      // public java.lang.String java.lang.Class.getCanonicalName()
      getCanonicalName(): string;
      getCanonicalNameP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.Class<?>[] java.lang.Class.getClasses()
      getClasses(): Class[];
      getClassesP(): Promise<Class[]>;
      // public java.lang.ClassLoader java.lang.Class.getClassLoader()
      getClassLoader(): ClassLoader;
      getClassLoaderP(): Promise<ClassLoader>;
      // public native java.lang.Class<?> java.lang.Class.getComponentType()
      getComponentType(): Class;
      getComponentTypeP(): Promise<Class>;
      // public java.lang.reflect.Constructor<T> java.lang.Class.getConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getConstructor(...arg0: Class[]): object_t;
      getConstructor(arg0: array_t<Class>): object_t;
      getConstructorP(...arg0: Class[]): Promise<object_t>;
      getConstructorP(arg0: array_t<Class>): Promise<object_t>;
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getConstructors() throws java.lang.SecurityException
      getConstructors(): object_t[];
      getConstructorsP(): Promise<object_t[]>;
      // public <A> A java.lang.Class.getDeclaredAnnotation(java.lang.Class<A>)
      getDeclaredAnnotation(arg0: Class): object_t;
      getDeclaredAnnotationP(arg0: Class): Promise<object_t>;
      // public java.lang.annotation.Annotation[] java.lang.Class.getDeclaredAnnotations()
      getDeclaredAnnotations(): object_t[];
      getDeclaredAnnotationsP(): Promise<object_t[]>;
      // public <A> A[] java.lang.Class.getDeclaredAnnotationsByType(java.lang.Class<A>)
      getDeclaredAnnotationsByType(arg0: Class): object_t[];
      getDeclaredAnnotationsByTypeP(arg0: Class): Promise<object_t[]>;
      // public java.lang.Class<?>[] java.lang.Class.getDeclaredClasses() throws java.lang.SecurityException
      getDeclaredClasses(): Class[];
      getDeclaredClassesP(): Promise<Class[]>;
      // public java.lang.reflect.Constructor<T> java.lang.Class.getDeclaredConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredConstructor(...arg0: Class[]): object_t;
      getDeclaredConstructor(arg0: array_t<Class>): object_t;
      getDeclaredConstructorP(...arg0: Class[]): Promise<object_t>;
      getDeclaredConstructorP(arg0: array_t<Class>): Promise<object_t>;
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getDeclaredConstructors() throws java.lang.SecurityException
      getDeclaredConstructors(): object_t[];
      getDeclaredConstructorsP(): Promise<object_t[]>;
      // public java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getDeclaredField(arg0: string_t): object_t;
      getDeclaredFieldP(arg0: string_t): Promise<object_t>;
      // public java.lang.reflect.Field[] java.lang.Class.getDeclaredFields() throws java.lang.SecurityException
      getDeclaredFields(): object_t[];
      getDeclaredFieldsP(): Promise<object_t[]>;
      // public java.lang.reflect.Method java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredMethod(arg0: string_t, ...arg1: Class[]): object_t;
      getDeclaredMethod(arg0: string_t, arg1: array_t<Class>): object_t;
      getDeclaredMethodP(arg0: string_t, ...arg1: Class[]): Promise<object_t>;
      getDeclaredMethodP(arg0: string_t, arg1: array_t<Class>): Promise<object_t>;
      // public java.lang.reflect.Method[] java.lang.Class.getDeclaredMethods() throws java.lang.SecurityException
      getDeclaredMethods(): object_t[];
      getDeclaredMethodsP(): Promise<object_t[]>;
      // public java.lang.Class<?> java.lang.Class.getDeclaringClass() throws java.lang.SecurityException
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public java.lang.Class<?> java.lang.Class.getEnclosingClass() throws java.lang.SecurityException
      getEnclosingClass(): Class;
      getEnclosingClassP(): Promise<Class>;
      // public java.lang.reflect.Constructor<?> java.lang.Class.getEnclosingConstructor() throws java.lang.SecurityException
      getEnclosingConstructor(): object_t;
      getEnclosingConstructorP(): Promise<object_t>;
      // public java.lang.reflect.Method java.lang.Class.getEnclosingMethod() throws java.lang.SecurityException
      getEnclosingMethod(): object_t;
      getEnclosingMethodP(): Promise<object_t>;
      // public T[] java.lang.Class.getEnumConstants()
      getEnumConstants(): object_t[];
      getEnumConstantsP(): Promise<object_t[]>;
      // public java.lang.reflect.Field java.lang.Class.getField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getField(arg0: string_t): object_t;
      getFieldP(arg0: string_t): Promise<object_t>;
      // public java.lang.reflect.Field[] java.lang.Class.getFields() throws java.lang.SecurityException
      getFields(): object_t[];
      getFieldsP(): Promise<object_t[]>;
      // public java.lang.reflect.Type[] java.lang.Class.getGenericInterfaces()
      getGenericInterfaces(): object_t[];
      getGenericInterfacesP(): Promise<object_t[]>;
      // public java.lang.reflect.Type java.lang.Class.getGenericSuperclass()
      getGenericSuperclass(): object_t;
      getGenericSuperclassP(): Promise<object_t>;
      // public java.lang.Class<?>[] java.lang.Class.getInterfaces()
      getInterfaces(): Class[];
      getInterfacesP(): Promise<Class[]>;
      // public java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getMethod(arg0: string_t, ...arg1: Class[]): object_t;
      getMethod(arg0: string_t, arg1: array_t<Class>): object_t;
      getMethodP(arg0: string_t, ...arg1: Class[]): Promise<object_t>;
      getMethodP(arg0: string_t, arg1: array_t<Class>): Promise<object_t>;
      // public java.lang.reflect.Method[] java.lang.Class.getMethods() throws java.lang.SecurityException
      getMethods(): object_t[];
      getMethodsP(): Promise<object_t[]>;
      // public native int java.lang.Class.getModifiers()
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public java.lang.String java.lang.Class.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public java.lang.Package java.lang.Class.getPackage()
      getPackage(): object_t;
      getPackageP(): Promise<object_t>;
      // public java.security.ProtectionDomain java.lang.Class.getProtectionDomain()
      getProtectionDomain(): object_t;
      getProtectionDomainP(): Promise<object_t>;
      // public java.net.URL java.lang.Class.getResource(java.lang.String)
      getResource(arg0: string_t): object_t;
      getResourceP(arg0: string_t): Promise<object_t>;
      // public java.io.InputStream java.lang.Class.getResourceAsStream(java.lang.String)
      getResourceAsStream(arg0: string_t): InputStream;
      getResourceAsStreamP(arg0: string_t): Promise<InputStream>;
      // public native java.lang.Object[] java.lang.Class.getSigners()
      getSigners(): object_t[];
      getSignersP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Class.getSimpleName()
      getSimpleName(): string;
      getSimpleNameP(): Promise<string>;
      // public native java.lang.Class<? super T> java.lang.Class.getSuperclass()
      getSuperclass(): Class;
      getSuperclassP(): Promise<Class>;
      // public java.lang.String java.lang.Class.getTypeName()
      getTypeName(): string;
      getTypeNameP(): Promise<string>;
      // public java.lang.reflect.TypeVariable<java.lang.Class<T>>[] java.lang.Class.getTypeParameters()
      getTypeParameters(): object_t[];
      getTypeParametersP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.lang.Class.isAnnotation()
      isAnnotation(): boolean;
      isAnnotationP(): Promise<boolean>;
      // public boolean java.lang.Class.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class): boolean;
      isAnnotationPresentP(arg0: Class): Promise<boolean>;
      // public boolean java.lang.Class.isAnonymousClass()
      isAnonymousClass(): boolean;
      isAnonymousClassP(): Promise<boolean>;
      // public native boolean java.lang.Class.isArray()
      isArray(): boolean;
      isArrayP(): Promise<boolean>;
      // public native boolean java.lang.Class.isAssignableFrom(java.lang.Class<?>)
      isAssignableFrom(arg0: Class): boolean;
      isAssignableFromP(arg0: Class): Promise<boolean>;
      // public boolean java.lang.Class.isEnum()
      isEnum(): boolean;
      isEnumP(): Promise<boolean>;
      // public native boolean java.lang.Class.isInstance(java.lang.Object)
      isInstance(arg0: object_t): boolean;
      isInstanceP(arg0: object_t): Promise<boolean>;
      // public native boolean java.lang.Class.isInterface()
      isInterface(): boolean;
      isInterfaceP(): Promise<boolean>;
      // public boolean java.lang.Class.isLocalClass()
      isLocalClass(): boolean;
      isLocalClassP(): Promise<boolean>;
      // public boolean java.lang.Class.isMemberClass()
      isMemberClass(): boolean;
      isMemberClassP(): Promise<boolean>;
      // public native boolean java.lang.Class.isPrimitive()
      isPrimitive(): boolean;
      isPrimitiveP(): Promise<boolean>;
      // public boolean java.lang.Class.isSynthetic()
      isSynthetic(): boolean;
      isSyntheticP(): Promise<boolean>;
      // public T java.lang.Class.newInstance() throws java.lang.InstantiationException,java.lang.IllegalAccessException
      newInstance(): object_t;
      newInstanceP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Class.toGenericString()
      toGenericString(): string;
      toGenericStringP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Class {
      export interface Static {
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader) throws java.lang.ClassNotFoundException
        forName(arg0: string_t, arg1: boolean_t, arg2: ClassLoader): Class;
        forNameP(arg0: string_t, arg1: boolean_t, arg2: ClassLoader): Promise<Class>;
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String) throws java.lang.ClassNotFoundException
        forName(arg0: string_t): Class;
        forNameP(arg0: string_t): Promise<Class>;
      }
    }
  }

  export module java.lang {
    export interface ClassLoader extends Java.java.lang.Object {
      // public void java.lang.ClassLoader.clearAssertionStatus()
      clearAssertionStatus(): void;
      clearAssertionStatusP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.ClassLoader java.lang.ClassLoader.getParent()
      getParent(): ClassLoader;
      getParentP(): Promise<ClassLoader>;
      // public java.net.URL java.lang.ClassLoader.getResource(java.lang.String)
      getResource(arg0: string_t): object_t;
      getResourceP(arg0: string_t): Promise<object_t>;
      // public java.io.InputStream java.lang.ClassLoader.getResourceAsStream(java.lang.String)
      getResourceAsStream(arg0: string_t): InputStream;
      getResourceAsStreamP(arg0: string_t): Promise<InputStream>;
      // public java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getResources(java.lang.String) throws java.io.IOException
      getResources(arg0: string_t): object_t;
      getResourcesP(arg0: string_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Class<?> java.lang.ClassLoader.loadClass(java.lang.String) throws java.lang.ClassNotFoundException
      loadClass(arg0: string_t): Class;
      loadClassP(arg0: string_t): Promise<Class>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.ClassLoader.setClassAssertionStatus(java.lang.String,boolean)
      setClassAssertionStatus(arg0: string_t, arg1: boolean_t): void;
      setClassAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public void java.lang.ClassLoader.setDefaultAssertionStatus(boolean)
      setDefaultAssertionStatus(arg0: boolean_t): void;
      setDefaultAssertionStatusP(arg0: boolean_t): Promise<void>;
      // public void java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)
      setPackageAssertionStatus(arg0: string_t, arg1: boolean_t): void;
      setPackageAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ClassLoader {
      export interface Static {
        // public static java.lang.ClassLoader java.lang.ClassLoader.getSystemClassLoader()
        getSystemClassLoader(): ClassLoader;
        getSystemClassLoaderP(): Promise<ClassLoader>;
        // public static java.net.URL java.lang.ClassLoader.getSystemResource(java.lang.String)
        getSystemResource(arg0: string_t): object_t;
        getSystemResourceP(arg0: string_t): Promise<object_t>;
        // public static java.io.InputStream java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
        getSystemResourceAsStream(arg0: string_t): InputStream;
        getSystemResourceAsStreamP(arg0: string_t): Promise<InputStream>;
        // public static java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getSystemResources(java.lang.String) throws java.io.IOException
        getSystemResources(arg0: string_t): object_t;
        getSystemResourcesP(arg0: string_t): Promise<object_t>;
      }
    }
  }

  export module java.lang {
    export interface Double extends Java.java.lang.Number {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Double.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Double.compareTo(java.lang.Double)
      compareTo(arg0: double_t): number;
      compareToP(arg0: double_t): Promise<number>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public boolean java.lang.Double.isInfinite()
      isInfinite(): boolean;
      isInfiniteP(): Promise<boolean>;
      // public boolean java.lang.Double.isNaN()
      isNaN(): boolean;
      isNaNP(): Promise<boolean>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Double {
      export interface Static {
        new (arg0: string_t): java.lang.Double;
        new (arg0: double_t): java.lang.Double;
        // public static int java.lang.Double.compare(double,double)
        compare(arg0: double_t, arg1: double_t): number;
        compareP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static long java.lang.Double.doubleToLongBits(double)
        doubleToLongBits(arg0: double_t): longValue_t;
        doubleToLongBitsP(arg0: double_t): Promise<longValue_t>;
        // public static native long java.lang.Double.doubleToRawLongBits(double)
        doubleToRawLongBits(arg0: double_t): longValue_t;
        doubleToRawLongBitsP(arg0: double_t): Promise<longValue_t>;
        // public static int java.lang.Double.hashCode(double)
        hashCode(arg0: double_t): number;
        hashCodeP(arg0: double_t): Promise<number>;
        // public static boolean java.lang.Double.isFinite(double)
        isFinite(arg0: double_t): boolean;
        isFiniteP(arg0: double_t): Promise<boolean>;
        // public static boolean java.lang.Double.isInfinite(double)
        isInfinite(arg0: double_t): boolean;
        isInfiniteP(arg0: double_t): Promise<boolean>;
        // public static boolean java.lang.Double.isNaN(double)
        isNaN(arg0: double_t): boolean;
        isNaNP(arg0: double_t): Promise<boolean>;
        // public static native double java.lang.Double.longBitsToDouble(long)
        longBitsToDouble(arg0: long_t): number;
        longBitsToDoubleP(arg0: long_t): Promise<number>;
        // public static double java.lang.Double.max(double,double)
        max(arg0: double_t, arg1: double_t): number;
        maxP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static double java.lang.Double.min(double,double)
        min(arg0: double_t, arg1: double_t): number;
        minP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException
        parseDouble(arg0: string_t): number;
        parseDoubleP(arg0: string_t): Promise<number>;
        // public static double java.lang.Double.sum(double,double)
        sum(arg0: double_t, arg1: double_t): number;
        sumP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static java.lang.String java.lang.Double.toHexString(double)
        toHexString(arg0: double_t): string;
        toHexStringP(arg0: double_t): Promise<string>;
        // public static java.lang.String java.lang.Double.toString(double)
        toString(arg0: double_t): string;
        toStringP(arg0: double_t): Promise<string>;
        // public static java.lang.Double java.lang.Double.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Double java.lang.Double.valueOf(double)
        valueOf(arg0: double_t): number;
        valueOfP(arg0: double_t): Promise<number>;
        POSITIVE_INFINITY: number;
        NEGATIVE_INFINITY: number;
        NaN: number;
        MAX_VALUE: number;
        MIN_NORMAL: number;
        MIN_VALUE: number;
        MAX_EXPONENT: number;
        MIN_EXPONENT: number;
        SIZE: number;
        BYTES: number;
        TYPE: Class;
      }
    }
  }

  export module java.lang {
    export interface Enum extends Java.java.lang.Object {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Enum {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
      }
    }
  }

  export module java.lang {
    export interface Float extends Java.java.lang.Number {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Float.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Float.compareTo(java.lang.Float)
      compareTo(arg0: float_t): number;
      compareToP(arg0: float_t): Promise<number>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public boolean java.lang.Float.isInfinite()
      isInfinite(): boolean;
      isInfiniteP(): Promise<boolean>;
      // public boolean java.lang.Float.isNaN()
      isNaN(): boolean;
      isNaNP(): Promise<boolean>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Float {
      export interface Static {
        new (arg0: string_t): java.lang.Float;
        new (arg0: float_t): java.lang.Float;
        new (arg0: double_t): java.lang.Float;
        // public static int java.lang.Float.compare(float,float)
        compare(arg0: float_t, arg1: float_t): number;
        compareP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static int java.lang.Float.floatToIntBits(float)
        floatToIntBits(arg0: float_t): number;
        floatToIntBitsP(arg0: float_t): Promise<number>;
        // public static native int java.lang.Float.floatToRawIntBits(float)
        floatToRawIntBits(arg0: float_t): number;
        floatToRawIntBitsP(arg0: float_t): Promise<number>;
        // public static int java.lang.Float.hashCode(float)
        hashCode(arg0: float_t): number;
        hashCodeP(arg0: float_t): Promise<number>;
        // public static native float java.lang.Float.intBitsToFloat(int)
        intBitsToFloat(arg0: integer_t): number;
        intBitsToFloatP(arg0: integer_t): Promise<number>;
        // public static boolean java.lang.Float.isFinite(float)
        isFinite(arg0: float_t): boolean;
        isFiniteP(arg0: float_t): Promise<boolean>;
        // public static boolean java.lang.Float.isInfinite(float)
        isInfinite(arg0: float_t): boolean;
        isInfiniteP(arg0: float_t): Promise<boolean>;
        // public static boolean java.lang.Float.isNaN(float)
        isNaN(arg0: float_t): boolean;
        isNaNP(arg0: float_t): Promise<boolean>;
        // public static float java.lang.Float.max(float,float)
        max(arg0: float_t, arg1: float_t): number;
        maxP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static float java.lang.Float.min(float,float)
        min(arg0: float_t, arg1: float_t): number;
        minP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static float java.lang.Float.parseFloat(java.lang.String) throws java.lang.NumberFormatException
        parseFloat(arg0: string_t): number;
        parseFloatP(arg0: string_t): Promise<number>;
        // public static float java.lang.Float.sum(float,float)
        sum(arg0: float_t, arg1: float_t): number;
        sumP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static java.lang.String java.lang.Float.toHexString(float)
        toHexString(arg0: float_t): string;
        toHexStringP(arg0: float_t): Promise<string>;
        // public static java.lang.String java.lang.Float.toString(float)
        toString(arg0: float_t): string;
        toStringP(arg0: float_t): Promise<string>;
        // public static java.lang.Float java.lang.Float.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Float java.lang.Float.valueOf(float)
        valueOf(arg0: float_t): number;
        valueOfP(arg0: float_t): Promise<number>;
        POSITIVE_INFINITY: number;
        NEGATIVE_INFINITY: number;
        NaN: number;
        MAX_VALUE: number;
        MIN_NORMAL: number;
        MIN_VALUE: number;
        MAX_EXPONENT: number;
        MIN_EXPONENT: number;
        SIZE: number;
        BYTES: number;
        TYPE: Class;
      }
    }
  }

  export module java.lang {
    export interface Integer extends Java.java.lang.Number {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Integer.compareTo(java.lang.Integer)
      compareTo(arg0: integer_t): number;
      compareToP(arg0: integer_t): Promise<number>;
      // public int java.lang.Integer.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Integer {
      export interface Static {
        new (arg0: string_t): java.lang.Integer;
        new (arg0: integer_t): java.lang.Integer;
        // public static int java.lang.Integer.bitCount(int)
        bitCount(arg0: integer_t): number;
        bitCountP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.compare(int,int)
        compare(arg0: integer_t, arg1: integer_t): number;
        compareP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.compareUnsigned(int,int)
        compareUnsigned(arg0: integer_t, arg1: integer_t): number;
        compareUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.decode(java.lang.String) throws java.lang.NumberFormatException
        decode(arg0: string_t): number;
        decodeP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.divideUnsigned(int,int)
        divideUnsigned(arg0: integer_t, arg1: integer_t): number;
        divideUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)
        getInteger(arg0: string_t, arg1: integer_t): number;
        getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,int)
        getInteger(arg0: string_t, arg1: integer_t): number;
        getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String)
        getInteger(arg0: string_t): number;
        getIntegerP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.hashCode(int)
        hashCode(arg0: integer_t): number;
        hashCodeP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.highestOneBit(int)
        highestOneBit(arg0: integer_t): number;
        highestOneBitP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.lowestOneBit(int)
        lowestOneBit(arg0: integer_t): number;
        lowestOneBitP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.max(int,int)
        max(arg0: integer_t, arg1: integer_t): number;
        maxP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.min(int,int)
        min(arg0: integer_t, arg1: integer_t): number;
        minP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.numberOfLeadingZeros(int)
        numberOfLeadingZeros(arg0: integer_t): number;
        numberOfLeadingZerosP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.numberOfTrailingZeros(int)
        numberOfTrailingZeros(arg0: integer_t): number;
        numberOfTrailingZerosP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseInt(arg0: string_t, arg1: integer_t): number;
        parseIntP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseInt(java.lang.String) throws java.lang.NumberFormatException
        parseInt(arg0: string_t): number;
        parseIntP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedInt(arg0: string_t, arg1: integer_t): number;
        parseUnsignedIntP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedInt(arg0: string_t): number;
        parseUnsignedIntP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.remainderUnsigned(int,int)
        remainderUnsigned(arg0: integer_t, arg1: integer_t): number;
        remainderUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.reverse(int)
        reverse(arg0: integer_t): number;
        reverseP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.reverseBytes(int)
        reverseBytes(arg0: integer_t): number;
        reverseBytesP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.rotateLeft(int,int)
        rotateLeft(arg0: integer_t, arg1: integer_t): number;
        rotateLeftP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.rotateRight(int,int)
        rotateRight(arg0: integer_t, arg1: integer_t): number;
        rotateRightP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.signum(int)
        signum(arg0: integer_t): number;
        signumP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.sum(int,int)
        sum(arg0: integer_t, arg1: integer_t): number;
        sumP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.String java.lang.Integer.toBinaryString(int)
        toBinaryString(arg0: integer_t): string;
        toBinaryStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toHexString(int)
        toHexString(arg0: integer_t): string;
        toHexStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toOctalString(int)
        toOctalString(arg0: integer_t): string;
        toOctalStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toString(int,int)
        toString(arg0: integer_t, arg1: integer_t): string;
        toStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toString(int)
        toString(arg0: integer_t): string;
        toStringP(arg0: integer_t): Promise<string>;
        // public static long java.lang.Integer.toUnsignedLong(int)
        toUnsignedLong(arg0: integer_t): longValue_t;
        toUnsignedLongP(arg0: integer_t): Promise<longValue_t>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int,int)
        toUnsignedString(arg0: integer_t, arg1: integer_t): string;
        toUnsignedStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int)
        toUnsignedString(arg0: integer_t): string;
        toUnsignedStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOf(arg0: string_t, arg1: integer_t): number;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.valueOf(int)
        valueOf(arg0: integer_t): number;
        valueOfP(arg0: integer_t): Promise<number>;
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: Class;
        SIZE: number;
        BYTES: number;
      }
    }
  }

  export module java.lang {
    export interface Iterable extends Java.java.lang.Object {
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
    }
    export module Iterable {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface Long extends Java.java.lang.Number {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Long.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Long.compareTo(java.lang.Long)
      compareTo(arg0: long_t): number;
      compareToP(arg0: long_t): Promise<number>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Long {
      export interface Static {
        new (arg0: string_t): java.lang.Long;
        new (arg0: long_t): java.lang.Long;
        // public static int java.lang.Long.bitCount(long)
        bitCount(arg0: long_t): number;
        bitCountP(arg0: long_t): Promise<number>;
        // public static int java.lang.Long.compare(long,long)
        compare(arg0: long_t, arg1: long_t): number;
        compareP(arg0: long_t, arg1: long_t): Promise<number>;
        // public static int java.lang.Long.compareUnsigned(long,long)
        compareUnsigned(arg0: long_t, arg1: long_t): number;
        compareUnsignedP(arg0: long_t, arg1: long_t): Promise<number>;
        // public static java.lang.Long java.lang.Long.decode(java.lang.String) throws java.lang.NumberFormatException
        decode(arg0: string_t): longValue_t;
        decodeP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.divideUnsigned(long,long)
        divideUnsigned(arg0: long_t, arg1: long_t): longValue_t;
        divideUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String,java.lang.Long)
        getLong(arg0: string_t, arg1: long_t): longValue_t;
        getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String,long)
        getLong(arg0: string_t, arg1: long_t): longValue_t;
        getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String)
        getLong(arg0: string_t): longValue_t;
        getLongP(arg0: string_t): Promise<longValue_t>;
        // public static int java.lang.Long.hashCode(long)
        hashCode(arg0: long_t): number;
        hashCodeP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.highestOneBit(long)
        highestOneBit(arg0: long_t): longValue_t;
        highestOneBitP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.lowestOneBit(long)
        lowestOneBit(arg0: long_t): longValue_t;
        lowestOneBitP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.max(long,long)
        max(arg0: long_t, arg1: long_t): longValue_t;
        maxP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.min(long,long)
        min(arg0: long_t, arg1: long_t): longValue_t;
        minP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static int java.lang.Long.numberOfLeadingZeros(long)
        numberOfLeadingZeros(arg0: long_t): number;
        numberOfLeadingZerosP(arg0: long_t): Promise<number>;
        // public static int java.lang.Long.numberOfTrailingZeros(long)
        numberOfTrailingZeros(arg0: long_t): number;
        numberOfTrailingZerosP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.parseLong(java.lang.String,int) throws java.lang.NumberFormatException
        parseLong(arg0: string_t, arg1: integer_t): longValue_t;
        parseLongP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseLong(java.lang.String) throws java.lang.NumberFormatException
        parseLong(arg0: string_t): longValue_t;
        parseLongP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseUnsignedLong(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedLong(arg0: string_t, arg1: integer_t): longValue_t;
        parseUnsignedLongP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseUnsignedLong(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedLong(arg0: string_t): longValue_t;
        parseUnsignedLongP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.remainderUnsigned(long,long)
        remainderUnsigned(arg0: long_t, arg1: long_t): longValue_t;
        remainderUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.reverse(long)
        reverse(arg0: long_t): longValue_t;
        reverseP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.reverseBytes(long)
        reverseBytes(arg0: long_t): longValue_t;
        reverseBytesP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.rotateLeft(long,int)
        rotateLeft(arg0: long_t, arg1: integer_t): longValue_t;
        rotateLeftP(arg0: long_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.rotateRight(long,int)
        rotateRight(arg0: long_t, arg1: integer_t): longValue_t;
        rotateRightP(arg0: long_t, arg1: integer_t): Promise<longValue_t>;
        // public static int java.lang.Long.signum(long)
        signum(arg0: long_t): number;
        signumP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.sum(long,long)
        sum(arg0: long_t, arg1: long_t): longValue_t;
        sumP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.String java.lang.Long.toBinaryString(long)
        toBinaryString(arg0: long_t): string;
        toBinaryStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toHexString(long)
        toHexString(arg0: long_t): string;
        toHexStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toOctalString(long)
        toOctalString(arg0: long_t): string;
        toOctalStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toString(long,int)
        toString(arg0: long_t, arg1: integer_t): string;
        toStringP(arg0: long_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toString(long)
        toString(arg0: long_t): string;
        toStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toUnsignedString(long,int)
        toUnsignedString(arg0: long_t, arg1: integer_t): string;
        toUnsignedStringP(arg0: long_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toUnsignedString(long)
        toUnsignedString(arg0: long_t): string;
        toUnsignedStringP(arg0: long_t): Promise<string>;
        // public static java.lang.Long java.lang.Long.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOf(arg0: string_t, arg1: integer_t): longValue_t;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): longValue_t;
        valueOfP(arg0: string_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.valueOf(long)
        valueOf(arg0: long_t): longValue_t;
        valueOfP(arg0: long_t): Promise<longValue_t>;
        MIN_VALUE: longValue_t;
        MAX_VALUE: longValue_t;
        TYPE: Class;
        SIZE: number;
        BYTES: number;
      }
    }
  }

  export module java.lang {
    export interface Number extends Java.java.lang.Object {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Number {
      export interface Static {
        new (): java.lang.Number;
      }
    }
  }

  export module java.lang {
    export interface Object  {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Object {
      export interface Static {
        new (): java.lang.Object;
      }
    }
  }

  export module java.lang.reflect {
    export interface Array extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Array {
      export interface Static {
        // public static native java.lang.Object java.lang.reflect.Array.get(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        get(arg0: object_t, arg1: integer_t): object_t;
        getP(arg0: object_t, arg1: integer_t): Promise<object_t>;
        // public static native boolean java.lang.reflect.Array.getBoolean(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getBoolean(arg0: object_t, arg1: integer_t): boolean;
        getBooleanP(arg0: object_t, arg1: integer_t): Promise<boolean>;
        // public static native byte java.lang.reflect.Array.getByte(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getByte(arg0: object_t, arg1: integer_t): object_t;
        getByteP(arg0: object_t, arg1: integer_t): Promise<object_t>;
        // public static native char java.lang.reflect.Array.getChar(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getChar(arg0: object_t, arg1: integer_t): object_t;
        getCharP(arg0: object_t, arg1: integer_t): Promise<object_t>;
        // public static native double java.lang.reflect.Array.getDouble(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getDouble(arg0: object_t, arg1: integer_t): number;
        getDoubleP(arg0: object_t, arg1: integer_t): Promise<number>;
        // public static native float java.lang.reflect.Array.getFloat(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getFloat(arg0: object_t, arg1: integer_t): number;
        getFloatP(arg0: object_t, arg1: integer_t): Promise<number>;
        // public static native int java.lang.reflect.Array.getInt(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getInt(arg0: object_t, arg1: integer_t): number;
        getIntP(arg0: object_t, arg1: integer_t): Promise<number>;
        // public static native int java.lang.reflect.Array.getLength(java.lang.Object) throws java.lang.IllegalArgumentException
        getLength(arg0: object_t): number;
        getLengthP(arg0: object_t): Promise<number>;
        // public static native long java.lang.reflect.Array.getLong(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getLong(arg0: object_t, arg1: integer_t): longValue_t;
        getLongP(arg0: object_t, arg1: integer_t): Promise<longValue_t>;
        // public static native short java.lang.reflect.Array.getShort(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        getShort(arg0: object_t, arg1: integer_t): number;
        getShortP(arg0: object_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Object java.lang.reflect.Array.newInstance(java.lang.Class<?>,int...) throws java.lang.IllegalArgumentException,java.lang.NegativeArraySizeException
        newInstance(arg0: Class, ...arg1: integer_t[]): object_t;
        newInstance(arg0: Class, arg1: array_t<integer_t>): object_t;
        newInstanceP(arg0: Class, ...arg1: integer_t[]): Promise<object_t>;
        newInstanceP(arg0: Class, arg1: array_t<integer_t>): Promise<object_t>;
        // public static java.lang.Object java.lang.reflect.Array.newInstance(java.lang.Class<?>,int) throws java.lang.NegativeArraySizeException
        newInstance(arg0: Class, arg1: integer_t): object_t;
        newInstanceP(arg0: Class, arg1: integer_t): Promise<object_t>;
        // public static native void java.lang.reflect.Array.set(java.lang.Object,int,java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        set(arg0: object_t, arg1: integer_t, arg2: object_t): void;
        setP(arg0: object_t, arg1: integer_t, arg2: object_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setBoolean(java.lang.Object,int,boolean) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setBoolean(arg0: object_t, arg1: integer_t, arg2: boolean_t): void;
        setBooleanP(arg0: object_t, arg1: integer_t, arg2: boolean_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setByte(java.lang.Object,int,byte) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setByte(arg0: object_t, arg1: integer_t, arg2: object_t): void;
        setByteP(arg0: object_t, arg1: integer_t, arg2: object_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setChar(java.lang.Object,int,char) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setChar(arg0: object_t, arg1: integer_t, arg2: object_t): void;
        setCharP(arg0: object_t, arg1: integer_t, arg2: object_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setDouble(java.lang.Object,int,double) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setDouble(arg0: object_t, arg1: integer_t, arg2: double_t): void;
        setDoubleP(arg0: object_t, arg1: integer_t, arg2: double_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setFloat(java.lang.Object,int,float) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setFloat(arg0: object_t, arg1: integer_t, arg2: float_t): void;
        setFloatP(arg0: object_t, arg1: integer_t, arg2: float_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setInt(java.lang.Object,int,int) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setInt(arg0: object_t, arg1: integer_t, arg2: integer_t): void;
        setIntP(arg0: object_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setLong(java.lang.Object,int,long) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setLong(arg0: object_t, arg1: integer_t, arg2: long_t): void;
        setLongP(arg0: object_t, arg1: integer_t, arg2: long_t): Promise<void>;
        // public static native void java.lang.reflect.Array.setShort(java.lang.Object,int,short) throws java.lang.IllegalArgumentException,java.lang.ArrayIndexOutOfBoundsException
        setShort(arg0: object_t, arg1: integer_t, arg2: short_t): void;
        setShortP(arg0: object_t, arg1: integer_t, arg2: short_t): Promise<void>;
      }
    }
  }

  export module java.lang {
    export interface Short extends Java.java.lang.Number {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Short.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Short.compareTo(java.lang.Short)
      compareTo(arg0: short_t): number;
      compareToP(arg0: short_t): Promise<number>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Short {
      export interface Static {
        new (arg0: string_t): java.lang.Short;
        new (arg0: short_t): java.lang.Short;
        // public static int java.lang.Short.compare(short,short)
        compare(arg0: short_t, arg1: short_t): number;
        compareP(arg0: short_t, arg1: short_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.decode(java.lang.String) throws java.lang.NumberFormatException
        decode(arg0: string_t): number;
        decodeP(arg0: string_t): Promise<number>;
        // public static int java.lang.Short.hashCode(short)
        hashCode(arg0: short_t): number;
        hashCodeP(arg0: short_t): Promise<number>;
        // public static short java.lang.Short.parseShort(java.lang.String,int) throws java.lang.NumberFormatException
        parseShort(arg0: string_t, arg1: integer_t): number;
        parseShortP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static short java.lang.Short.parseShort(java.lang.String) throws java.lang.NumberFormatException
        parseShort(arg0: string_t): number;
        parseShortP(arg0: string_t): Promise<number>;
        // public static short java.lang.Short.reverseBytes(short)
        reverseBytes(arg0: short_t): number;
        reverseBytesP(arg0: short_t): Promise<number>;
        // public static java.lang.String java.lang.Short.toString(short)
        toString(arg0: short_t): string;
        toStringP(arg0: short_t): Promise<string>;
        // public static int java.lang.Short.toUnsignedInt(short)
        toUnsignedInt(arg0: short_t): number;
        toUnsignedIntP(arg0: short_t): Promise<number>;
        // public static long java.lang.Short.toUnsignedLong(short)
        toUnsignedLong(arg0: short_t): longValue_t;
        toUnsignedLongP(arg0: short_t): Promise<longValue_t>;
        // public static java.lang.Short java.lang.Short.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOf(arg0: string_t, arg1: integer_t): number;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.valueOf(short)
        valueOf(arg0: short_t): number;
        valueOfP(arg0: short_t): Promise<number>;
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: Class;
        SIZE: number;
        BYTES: number;
      }
    }
  }

  export module java.lang {
    export interface String extends Java.java.lang.Object {
      // public char java.lang.String.charAt(int)
      charAt(arg0: integer_t): object_t;
      charAtP(arg0: integer_t): Promise<object_t>;
      // public default java.util.stream.IntStream java.lang.CharSequence.chars()
      chars(): object_t;
      charsP(): Promise<object_t>;
      // public int java.lang.String.codePointAt(int)
      codePointAt(arg0: integer_t): number;
      codePointAtP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.codePointBefore(int)
      codePointBefore(arg0: integer_t): number;
      codePointBeforeP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.codePointCount(int,int)
      codePointCount(arg0: integer_t, arg1: integer_t): number;
      codePointCountP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public default java.util.stream.IntStream java.lang.CharSequence.codePoints()
      codePoints(): object_t;
      codePointsP(): Promise<object_t>;
      // public int java.lang.String.compareTo(java.lang.String)
      compareTo(arg0: string_t): number;
      compareToP(arg0: string_t): Promise<number>;
      // public int java.lang.String.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.String.compareToIgnoreCase(java.lang.String)
      compareToIgnoreCase(arg0: string_t): number;
      compareToIgnoreCaseP(arg0: string_t): Promise<number>;
      // public java.lang.String java.lang.String.concat(java.lang.String)
      concat(arg0: string_t): string;
      concatP(arg0: string_t): Promise<string>;
      // public boolean java.lang.String.contains(java.lang.CharSequence)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.contentEquals(java.lang.StringBuffer)
      contentEquals(arg0: object_t): boolean;
      contentEqualsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.contentEquals(java.lang.CharSequence)
      contentEquals(arg0: object_t): boolean;
      contentEqualsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.endsWith(java.lang.String)
      endsWith(arg0: string_t): boolean;
      endsWithP(arg0: string_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.equalsIgnoreCase(java.lang.String)
      equalsIgnoreCase(arg0: string_t): boolean;
      equalsIgnoreCaseP(arg0: string_t): Promise<boolean>;
      // public void java.lang.String.getBytes(int,int,byte[],int)
      getBytes(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
      getBytesP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
      // public byte[] java.lang.String.getBytes(java.nio.charset.Charset)
      getBytes(arg0: Charset): object_t[];
      getBytesP(arg0: Charset): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException
      getBytes(arg0: string_t): object_t[];
      getBytesP(arg0: string_t): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes()
      getBytes(): object_t[];
      getBytesP(): Promise<object_t[]>;
      // public void java.lang.String.getChars(int,int,char[],int)
      getChars(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
      getCharsP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.String.indexOf(java.lang.String,int)
      indexOf(arg0: string_t, arg1: integer_t): number;
      indexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.indexOf(int,int)
      indexOf(arg0: integer_t, arg1: integer_t): number;
      indexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.indexOf(java.lang.String)
      indexOf(arg0: string_t): number;
      indexOfP(arg0: string_t): Promise<number>;
      // public int java.lang.String.indexOf(int)
      indexOf(arg0: integer_t): number;
      indexOfP(arg0: integer_t): Promise<number>;
      // public native java.lang.String java.lang.String.intern()
      intern(): string;
      internP(): Promise<string>;
      // public boolean java.lang.String.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public int java.lang.String.lastIndexOf(java.lang.String,int)
      lastIndexOf(arg0: string_t, arg1: integer_t): number;
      lastIndexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(int,int)
      lastIndexOf(arg0: integer_t, arg1: integer_t): number;
      lastIndexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(java.lang.String)
      lastIndexOf(arg0: string_t): number;
      lastIndexOfP(arg0: string_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(int)
      lastIndexOf(arg0: integer_t): number;
      lastIndexOfP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.length()
      length(): number;
      lengthP(): Promise<number>;
      // public boolean java.lang.String.matches(java.lang.String)
      matches(arg0: string_t): boolean;
      matchesP(arg0: string_t): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.lang.String.offsetByCodePoints(int,int)
      offsetByCodePoints(arg0: integer_t, arg1: integer_t): number;
      offsetByCodePointsP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)
      regionMatches(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): boolean;
      regionMatchesP(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): Promise<boolean>;
      // public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)
      regionMatches(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): boolean;
      regionMatchesP(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): Promise<boolean>;
      // public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)
      replace(arg0: object_t, arg1: object_t): string;
      replaceP(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replace(char,char)
      replace(arg0: object_t, arg1: object_t): string;
      replaceP(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)
      replaceAll(arg0: string_t, arg1: string_t): string;
      replaceAllP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)
      replaceFirst(arg0: string_t, arg1: string_t): string;
      replaceFirstP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String[] java.lang.String.split(java.lang.String,int)
      split(arg0: string_t, arg1: integer_t): string[];
      splitP(arg0: string_t, arg1: integer_t): Promise<string[]>;
      // public java.lang.String[] java.lang.String.split(java.lang.String)
      split(arg0: string_t): string[];
      splitP(arg0: string_t): Promise<string[]>;
      // public boolean java.lang.String.startsWith(java.lang.String,int)
      startsWith(arg0: string_t, arg1: integer_t): boolean;
      startsWithP(arg0: string_t, arg1: integer_t): Promise<boolean>;
      // public boolean java.lang.String.startsWith(java.lang.String)
      startsWith(arg0: string_t): boolean;
      startsWithP(arg0: string_t): Promise<boolean>;
      // public java.lang.CharSequence java.lang.String.subSequence(int,int)
      subSequence(arg0: integer_t, arg1: integer_t): object_t;
      subSequenceP(arg0: integer_t, arg1: integer_t): Promise<object_t>;
      // public java.lang.String java.lang.String.substring(int,int)
      substring(arg0: integer_t, arg1: integer_t): string;
      substringP(arg0: integer_t, arg1: integer_t): Promise<string>;
      // public java.lang.String java.lang.String.substring(int)
      substring(arg0: integer_t): string;
      substringP(arg0: integer_t): Promise<string>;
      // public char[] java.lang.String.toCharArray()
      toCharArray(): object_t[];
      toCharArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.String.toLowerCase(java.util.Locale)
      toLowerCase(arg0: object_t): string;
      toLowerCaseP(arg0: object_t): Promise<string>;
      // public java.lang.String java.lang.String.toLowerCase()
      toLowerCase(): string;
      toLowerCaseP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase(java.util.Locale)
      toUpperCase(arg0: object_t): string;
      toUpperCaseP(arg0: object_t): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase()
      toUpperCase(): string;
      toUpperCaseP(): Promise<string>;
      // public java.lang.String java.lang.String.trim()
      trim(): string;
      trimP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module String {
      export interface Static {
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Charset): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): java.lang.String;
        new (arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: Charset): java.lang.String;
        new (arg0: object_array_t, arg1: string_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: string_t): java.lang.String;
        new (arg0: object_array_t): java.lang.String;
        new (arg0: object_array_t): java.lang.String;
        new (): java.lang.String;
        // public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
        copyValueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
        copyValueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.copyValueOf(char[])
        copyValueOf(arg0: object_array_t): string;
        copyValueOfP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)
        format(arg0: object_t, arg1: string_t, ...arg2: object_t[]): string;
        format(arg0: object_t, arg1: string_t, arg2: object_array_t): string;
        formatP(arg0: object_t, arg1: string_t, ...arg2: object_t[]): Promise<string>;
        formatP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object...)
        format(arg0: string_t, ...arg1: object_t[]): string;
        format(arg0: string_t, arg1: object_array_t): string;
        formatP(arg0: string_t, ...arg1: object_t[]): Promise<string>;
        formatP(arg0: string_t, arg1: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)
        join(arg0: object_t, ...arg1: object_t[]): string;
        join(arg0: object_t, arg1: object_array_t): string;
        joinP(arg0: object_t, ...arg1: object_t[]): Promise<string>;
        joinP(arg0: object_t, arg1: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)
        join(arg0: object_t, arg1: Iterable): string;
        joinP(arg0: object_t, arg1: Iterable): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[],int,int)
        valueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
        valueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(java.lang.Object)
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[])
        valueOf(arg0: object_array_t): string;
        valueOfP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(boolean)
        valueOf(arg0: boolean_t): string;
        valueOfP(arg0: boolean_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(long)
        valueOf(arg0: long_t): string;
        valueOfP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(int)
        valueOf(arg0: integer_t): string;
        valueOfP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(float)
        valueOf(arg0: float_t): string;
        valueOfP(arg0: float_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(double)
        valueOf(arg0: double_t): string;
        valueOfP(arg0: double_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char)
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        CASE_INSENSITIVE_ORDER: Comparator;
      }
    }
  }

  export module java.nio.charset {
    export interface Charset extends Java.java.lang.Object {
      // public final java.util.Set<java.lang.String> java.nio.charset.Charset.aliases()
      aliases(): Set;
      aliasesP(): Promise<Set>;
      // public boolean java.nio.charset.Charset.canEncode()
      canEncode(): boolean;
      canEncodeP(): Promise<boolean>;
      // public final int java.nio.charset.Charset.compareTo(java.nio.charset.Charset)
      compareTo(arg0: Charset): number;
      compareToP(arg0: Charset): Promise<number>;
      // public int java.nio.charset.Charset.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public abstract boolean java.nio.charset.Charset.contains(java.nio.charset.Charset)
      contains(arg0: Charset): boolean;
      containsP(arg0: Charset): Promise<boolean>;
      // public final java.nio.CharBuffer java.nio.charset.Charset.decode(java.nio.ByteBuffer)
      decode(arg0: object_t): object_t;
      decodeP(arg0: object_t): Promise<object_t>;
      // public java.lang.String java.nio.charset.Charset.displayName(java.util.Locale)
      displayName(arg0: object_t): string;
      displayNameP(arg0: object_t): Promise<string>;
      // public java.lang.String java.nio.charset.Charset.displayName()
      displayName(): string;
      displayNameP(): Promise<string>;
      // public final java.nio.ByteBuffer java.nio.charset.Charset.encode(java.nio.CharBuffer)
      encode(arg0: object_t): object_t;
      encodeP(arg0: object_t): Promise<object_t>;
      // public final java.nio.ByteBuffer java.nio.charset.Charset.encode(java.lang.String)
      encode(arg0: string_t): object_t;
      encodeP(arg0: string_t): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final boolean java.nio.charset.Charset.isRegistered()
      isRegistered(): boolean;
      isRegisteredP(): Promise<boolean>;
      // public final java.lang.String java.nio.charset.Charset.name()
      name(): string;
      nameP(): Promise<string>;
      // public abstract java.nio.charset.CharsetDecoder java.nio.charset.Charset.newDecoder()
      newDecoder(): object_t;
      newDecoderP(): Promise<object_t>;
      // public abstract java.nio.charset.CharsetEncoder java.nio.charset.Charset.newEncoder()
      newEncoder(): object_t;
      newEncoderP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Charset {
      export interface Static {
        // public static java.util.SortedMap<java.lang.String, java.nio.charset.Charset> java.nio.charset.Charset.availableCharsets()
        availableCharsets(): object_t;
        availableCharsetsP(): Promise<object_t>;
        // public static java.nio.charset.Charset java.nio.charset.Charset.defaultCharset()
        defaultCharset(): Charset;
        defaultCharsetP(): Promise<Charset>;
        // public static java.nio.charset.Charset java.nio.charset.Charset.forName(java.lang.String)
        forName(arg0: string_t): Charset;
        forNameP(arg0: string_t): Promise<Charset>;
        // public static boolean java.nio.charset.Charset.isSupported(java.lang.String)
        isSupported(arg0: string_t): boolean;
        isSupportedP(arg0: string_t): Promise<boolean>;
      }
    }
  }

  export module java.nio.charset {
    export interface StandardCharsets extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StandardCharsets {
      export interface Static {
        US_ASCII: Charset;
        ISO_8859_1: Charset;
        UTF_8: Charset;
        UTF_16BE: Charset;
        UTF_16LE: Charset;
        UTF_16: Charset;
      }
    }
  }

  export module java.util {
    export interface AbstractCollection extends Java.java.lang.Object,Java.java.util.Collection {
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractCollection {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractList extends Java.java.util.AbstractCollection,Java.java.util.List {
      // public abstract void java.util.List.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract E java.util.List.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIterator(arg0: integer_t): ListIterator;
      listIteratorP(arg0: integer_t): Promise<ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIterator(): ListIterator;
      listIteratorP(): Promise<ListIterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: UnaryOperator): void;
      replaceAllP(arg0: UnaryOperator): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: Comparator): void;
      sortP(arg0: Comparator): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractList {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractMap extends Java.java.lang.Object,Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      compute(arg0: object_t, arg1: BiFunction): object_t;
      computeP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsent(arg0: object_t, arg1: Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresent(arg0: object_t, arg1: BiFunction): object_t;
      computeIfPresentP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySet(): Set;
      entrySetP(): Promise<Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySet(): Set;
      keySetP(): Promise<Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      merge(arg0: object_t, arg1: object_t, arg2: BiFunction): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: BiFunction): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map.put(K,V)
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAll(arg0: Map): void;
      putAllP(arg0: Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAll(arg0: BiFunction): void;
      replaceAllP(arg0: BiFunction): Promise<void>;
      // public abstract int java.util.Map.size()
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      values(): Collection;
      valuesP(): Promise<Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractMap {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractSet extends Java.java.util.AbstractCollection,Java.java.util.Set {
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractSet {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface ArrayList extends Java.java.util.AbstractList,Java.java.util.List {
      // public abstract void java.util.List.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.ArrayList.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public void java.util.ArrayList.ensureCapacity(int)
      ensureCapacity(arg0: integer_t): void;
      ensureCapacityP(arg0: integer_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract E java.util.List.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIterator(arg0: integer_t): ListIterator;
      listIteratorP(arg0: integer_t): Promise<ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIterator(): ListIterator;
      listIteratorP(): Promise<ListIterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: UnaryOperator): void;
      replaceAllP(arg0: UnaryOperator): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: Comparator): void;
      sortP(arg0: Comparator): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public void java.util.ArrayList.trimToSize()
      trimToSize(): void;
      trimToSizeP(): Promise<void>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ArrayList {
      export interface Static {
        new (arg0: Collection): java.util.ArrayList;
        new (arg0: integer_t): java.util.ArrayList;
        new (): java.util.ArrayList;
      }
    }
  }

  export module java.util {
    export interface Collection extends Java.java.lang.Iterable {
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Collection {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Comparator extends Java.java.lang.Object {
      // public abstract int java.util.Comparator.compare(T,T)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): Comparator;
      reversedP(): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: Comparator): Comparator;
      thenComparingP(arg0: Function, arg1: Comparator): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): Comparator;
      thenComparingP(arg0: Function): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: Comparator): Comparator;
      thenComparingP(arg0: Comparator): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): Comparator;
      thenComparingDoubleP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): Comparator;
      thenComparingIntP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): Comparator;
      thenComparingLongP(arg0: object_t): Promise<Comparator>;
    }
    export module Comparator {
      export interface Static {
        // public static <T,U> java.util.Comparator<T> java.util.Comparator.comparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
        comparing(arg0: Function, arg1: Comparator): Comparator;
        comparingP(arg0: Function, arg1: Comparator): Promise<Comparator>;
        // public static <T,U> java.util.Comparator<T> java.util.Comparator.comparing(java.util.function.Function<? super T, ? extends U>)
        comparing(arg0: Function): Comparator;
        comparingP(arg0: Function): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.comparingDouble(java.util.function.ToDoubleFunction<? super T>)
        comparingDouble(arg0: object_t): Comparator;
        comparingDoubleP(arg0: object_t): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.comparingInt(java.util.function.ToIntFunction<? super T>)
        comparingInt(arg0: object_t): Comparator;
        comparingIntP(arg0: object_t): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.comparingLong(java.util.function.ToLongFunction<? super T>)
        comparingLong(arg0: object_t): Comparator;
        comparingLongP(arg0: object_t): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.naturalOrder()
        naturalOrder(): Comparator;
        naturalOrderP(): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.nullsFirst(java.util.Comparator<? super T>)
        nullsFirst(arg0: Comparator): Comparator;
        nullsFirstP(arg0: Comparator): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.nullsLast(java.util.Comparator<? super T>)
        nullsLast(arg0: Comparator): Comparator;
        nullsLastP(arg0: Comparator): Promise<Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.reverseOrder()
        reverseOrder(): Comparator;
        reverseOrderP(): Promise<Comparator>;
      }
    }
  }

  export module java.util.function_ {
    export interface BiConsumer extends Java.java.lang.Object {
      // public abstract void java.util.function.BiConsumer.accept(T,U)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public default java.util.function.BiConsumer<T, U> java.util.function.BiConsumer.andThen(java.util.function.BiConsumer<? super T, ? super U>)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
    }
    export module BiConsumer {
      export interface Static {
      }
    }
  }

  export module java.util.function_ {
    export interface BiFunction extends Java.java.lang.Object {
      // public default <V> java.util.function.BiFunction<T, U, V> java.util.function.BiFunction.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public abstract R java.util.function.BiFunction.apply(T,U)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
    }
    export module BiFunction {
      export interface Static {
      }
    }
  }

  export module java.util.function_ {
    export interface BinaryOperator extends Java.java.util.function_.BiFunction {
      // public default <V> java.util.function.BiFunction<T, U, V> java.util.function.BiFunction.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public abstract R java.util.function.BiFunction.apply(T,U)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
    }
    export module BinaryOperator {
      export interface Static {
        // public static <T> java.util.function.BinaryOperator<T> java.util.function.BinaryOperator.maxBy(java.util.Comparator<? super T>)
        maxBy(arg0: Comparator): BinaryOperator;
        maxByP(arg0: Comparator): Promise<BinaryOperator>;
        // public static <T> java.util.function.BinaryOperator<T> java.util.function.BinaryOperator.minBy(java.util.Comparator<? super T>)
        minBy(arg0: Comparator): BinaryOperator;
        minByP(arg0: Comparator): Promise<BinaryOperator>;
      }
    }
  }

  export module java.util.function_ {
    export interface BiPredicate extends Java.java.lang.Object {
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public abstract boolean java.util.function.BiPredicate.test(T,U)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
    }
    export module BiPredicate {
      export interface Static {
      }
    }
  }

  export module java.util.function_ {
    export interface Consumer extends Java.java.lang.Object {
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
    }
    export module Consumer {
      export interface Static {
      }
    }
  }

  export module java.util.function_ {
    export interface Function extends Java.java.lang.Object {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
    }
    export module Function {
      export interface Static {
        // public static <T> java.util.function.Function<T, T> java.util.function.Function.identity()
        identity(): Function;
        identityP(): Promise<Function>;
      }
    }
  }

  export module java.util.function_ {
    export interface Predicate extends Java.java.lang.Object {
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
    }
    export module Predicate {
      export interface Static {
        // public static <T> java.util.function.Predicate<T> java.util.function.Predicate.isEqual(java.lang.Object)
        isEqual(arg0: object_t): Predicate;
        isEqualP(arg0: object_t): Promise<Predicate>;
      }
    }
  }

  export module java.util.function_ {
    export interface Supplier extends Java.java.lang.Object {
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
    }
    export module Supplier {
      export interface Static {
      }
    }
  }

  export module java.util.function_ {
    export interface UnaryOperator extends Java.java.util.function_.Function {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
    }
    export module UnaryOperator {
      export interface Static {
        // public static <T> java.util.function.UnaryOperator<T> java.util.function.UnaryOperator.identity()
        identity(): UnaryOperator;
        identityP(): Promise<UnaryOperator>;
        // public static <T> java.util.function.Function<T, T> java.util.function.Function.identity()
        identity(): Function;
        identityP(): Promise<Function>;
      }
    }
  }

  export module java.util {
    export interface HashMap extends Java.java.util.AbstractMap,Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.HashMap.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      compute(arg0: object_t, arg1: BiFunction): object_t;
      computeP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsent(arg0: object_t, arg1: Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresent(arg0: object_t, arg1: BiFunction): object_t;
      computeIfPresentP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySet(): Set;
      entrySetP(): Promise<Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySet(): Set;
      keySetP(): Promise<Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      merge(arg0: object_t, arg1: object_t, arg2: BiFunction): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: BiFunction): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map.put(K,V)
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAll(arg0: Map): void;
      putAllP(arg0: Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAll(arg0: BiFunction): void;
      replaceAllP(arg0: BiFunction): Promise<void>;
      // public abstract int java.util.Map.size()
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      values(): Collection;
      valuesP(): Promise<Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module HashMap {
      export interface Static {
        new (arg0: integer_t, arg1: float_t): java.util.HashMap;
        new (arg0: Map): java.util.HashMap;
        new (arg0: integer_t): java.util.HashMap;
        new (): java.util.HashMap;
      }
    }
  }

  export module java.util {
    export interface HashSet extends Java.java.util.AbstractSet,Java.java.util.Set {
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.HashSet.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module HashSet {
      export interface Static {
        new (arg0: integer_t, arg1: float_t): java.util.HashSet;
        new (arg0: Collection): java.util.HashSet;
        new (arg0: integer_t): java.util.HashSet;
        new (): java.util.HashSet;
      }
    }
  }

  export module java.util {
    export interface Iterator extends Java.java.lang.Object {
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
    }
    export module Iterator {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface LinkedHashMap extends Java.java.util.HashMap,Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.HashMap.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      compute(arg0: object_t, arg1: BiFunction): object_t;
      computeP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsent(arg0: object_t, arg1: Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresent(arg0: object_t, arg1: BiFunction): object_t;
      computeIfPresentP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySet(): Set;
      entrySetP(): Promise<Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySet(): Set;
      keySetP(): Promise<Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      merge(arg0: object_t, arg1: object_t, arg2: BiFunction): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: BiFunction): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map.put(K,V)
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAll(arg0: Map): void;
      putAllP(arg0: Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAll(arg0: BiFunction): void;
      replaceAllP(arg0: BiFunction): Promise<void>;
      // public abstract int java.util.Map.size()
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      values(): Collection;
      valuesP(): Promise<Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module LinkedHashMap {
      export interface Static {
        new (arg0: integer_t, arg1: float_t, arg2: boolean_t): java.util.LinkedHashMap;
        new (arg0: integer_t, arg1: float_t): java.util.LinkedHashMap;
        new (arg0: Map): java.util.LinkedHashMap;
        new (arg0: integer_t): java.util.LinkedHashMap;
        new (): java.util.LinkedHashMap;
      }
    }
  }

  export module java.util {
    export interface List extends Java.java.util.Collection {
      // public abstract void java.util.List.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract E java.util.List.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIterator(arg0: integer_t): ListIterator;
      listIteratorP(arg0: integer_t): Promise<ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIterator(): ListIterator;
      listIteratorP(): Promise<ListIterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: UnaryOperator): void;
      replaceAllP(arg0: UnaryOperator): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: Comparator): void;
      sortP(arg0: Comparator): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module List {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface ListIterator extends Java.java.util.Iterator {
      // public abstract void java.util.ListIterator.add(E)
      add(arg0: object_t): void;
      addP(arg0: object_t): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract boolean java.util.ListIterator.hasPrevious()
      hasPrevious(): boolean;
      hasPreviousP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public abstract int java.util.ListIterator.nextIndex()
      nextIndex(): number;
      nextIndexP(): Promise<number>;
      // public abstract E java.util.ListIterator.previous()
      previous(): object_t;
      previousP(): Promise<object_t>;
      // public abstract int java.util.ListIterator.previousIndex()
      previousIndex(): number;
      previousIndexP(): Promise<number>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void java.util.ListIterator.set(E)
      set(arg0: object_t): void;
      setP(arg0: object_t): Promise<void>;
    }
    export module ListIterator {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Map extends Java.java.lang.Object {
      // public abstract void java.util.Map.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      compute(arg0: object_t, arg1: BiFunction): object_t;
      computeP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsent(arg0: object_t, arg1: Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresent(arg0: object_t, arg1: BiFunction): object_t;
      computeIfPresentP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySet(): Set;
      entrySetP(): Promise<Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySet(): Set;
      keySetP(): Promise<Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      merge(arg0: object_t, arg1: object_t, arg2: BiFunction): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: BiFunction): Promise<object_t>;
      // public abstract V java.util.Map.put(K,V)
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAll(arg0: Map): void;
      putAllP(arg0: Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAll(arg0: BiFunction): void;
      replaceAllP(arg0: BiFunction): Promise<void>;
      // public abstract int java.util.Map.size()
      size(): number;
      sizeP(): Promise<number>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      values(): Collection;
      valuesP(): Promise<Collection>;
    }
    export module Map {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Map$Entry extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract K java.util.Map$Entry.getKey()
      getKey(): object_t;
      getKeyP(): Promise<object_t>;
      // public abstract V java.util.Map$Entry.getValue()
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract V java.util.Map$Entry.setValue(V)
      setValue(arg0: object_t): object_t;
      setValueP(arg0: object_t): Promise<object_t>;
    }
    export module Map$Entry {
      export interface Static {
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByKey(java.util.Comparator<? super K>)
        comparingByKey(arg0: Comparator): Comparator;
        comparingByKeyP(arg0: Comparator): Promise<Comparator>;
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByKey()
        comparingByKey(): Comparator;
        comparingByKeyP(): Promise<Comparator>;
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByValue(java.util.Comparator<? super V>)
        comparingByValue(arg0: Comparator): Comparator;
        comparingByValueP(arg0: Comparator): Promise<Comparator>;
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByValue()
        comparingByValue(): Comparator;
        comparingByValueP(): Promise<Comparator>;
      }
    }
  }

  export module java.util {
    export interface NoSuchElementException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module NoSuchElementException {
      export interface Static {
        new (arg0: string_t): java.util.NoSuchElementException;
        new (): java.util.NoSuchElementException;
      }
    }
  }

  export module java.util {
    export interface Set extends Java.java.util.Collection {
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Set {
      export interface Static {
      }
    }
  }

  export module javax.script {
    export interface AbstractScriptEngine extends Java.java.lang.Object,Java.javax.script.ScriptEngine {
      // public abstract javax.script.Bindings javax.script.ScriptEngine.createBindings()
      createBindings(): Bindings;
      createBindingsP(): Promise<Bindings>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: ScriptContext): object_t;
      evalP(arg0: string_t, arg1: ScriptContext): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: ScriptContext): object_t;
      evalP(arg0: object_t, arg1: ScriptContext): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: Bindings): object_t;
      evalP(arg0: string_t, arg1: Bindings): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: Bindings): object_t;
      evalP(arg0: object_t, arg1: Bindings): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String) throws javax.script.ScriptException
      eval(arg0: string_t): object_t;
      evalP(arg0: string_t): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader) throws javax.script.ScriptException
      eval(arg0: object_t): object_t;
      evalP(arg0: object_t): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.get(java.lang.String)
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public abstract javax.script.Bindings javax.script.ScriptEngine.getBindings(int)
      getBindings(arg0: integer_t): Bindings;
      getBindingsP(arg0: integer_t): Promise<Bindings>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract javax.script.ScriptContext javax.script.ScriptEngine.getContext()
      getContext(): ScriptContext;
      getContextP(): Promise<ScriptContext>;
      // public abstract javax.script.ScriptEngineFactory javax.script.ScriptEngine.getFactory()
      getFactory(): ScriptEngineFactory;
      getFactoryP(): Promise<ScriptEngineFactory>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void javax.script.ScriptEngine.put(java.lang.String,java.lang.Object)
      put(arg0: string_t, arg1: object_t): void;
      putP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void javax.script.ScriptEngine.setBindings(javax.script.Bindings,int)
      setBindings(arg0: Bindings, arg1: integer_t): void;
      setBindingsP(arg0: Bindings, arg1: integer_t): Promise<void>;
      // public abstract void javax.script.ScriptEngine.setContext(javax.script.ScriptContext)
      setContext(arg0: ScriptContext): void;
      setContextP(arg0: ScriptContext): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractScriptEngine {
      export interface Static {
        new (arg0: Bindings): javax.script.AbstractScriptEngine;
        new (): javax.script.AbstractScriptEngine;
        ARGV: string;
        FILENAME: string;
        ENGINE: string;
        ENGINE_VERSION: string;
        NAME: string;
        LANGUAGE: string;
        LANGUAGE_VERSION: string;
      }
    }
  }

  export module javax.script {
    export interface Bindings extends Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      compute(arg0: object_t, arg1: BiFunction): object_t;
      computeP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsent(arg0: object_t, arg1: Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresent(arg0: object_t, arg1: BiFunction): object_t;
      computeIfPresentP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySet(): Set;
      entrySetP(): Promise<Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySet(): Set;
      keySetP(): Promise<Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      merge(arg0: object_t, arg1: object_t, arg2: BiFunction): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: BiFunction): Promise<object_t>;
      // public abstract java.lang.Object javax.script.Bindings.put(java.lang.String,java.lang.Object)
      put(arg0: string_t, arg1: object_t): object_t;
      putP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public abstract V java.util.Map.put(K,V)
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAll(arg0: Map): void;
      putAllP(arg0: Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAll(arg0: BiFunction): void;
      replaceAllP(arg0: BiFunction): Promise<void>;
      // public abstract int java.util.Map.size()
      size(): number;
      sizeP(): Promise<number>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      values(): Collection;
      valuesP(): Promise<Collection>;
    }
    export module Bindings {
      export interface Static {
      }
    }
  }

  export module javax.script {
    export interface CompiledScript extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.Object javax.script.CompiledScript.eval(javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: ScriptContext): object_t;
      evalP(arg0: ScriptContext): Promise<object_t>;
      // public java.lang.Object javax.script.CompiledScript.eval(javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: Bindings): object_t;
      evalP(arg0: Bindings): Promise<object_t>;
      // public java.lang.Object javax.script.CompiledScript.eval() throws javax.script.ScriptException
      eval(): object_t;
      evalP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract javax.script.ScriptEngine javax.script.CompiledScript.getEngine()
      getEngine(): ScriptEngine;
      getEngineP(): Promise<ScriptEngine>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module CompiledScript {
      export interface Static {
        new (): javax.script.CompiledScript;
      }
    }
  }

  export module javax.script {
    export interface ScriptContext extends Java.java.lang.Object {
      // public abstract java.lang.Object javax.script.ScriptContext.getAttribute(java.lang.String,int)
      getAttribute(arg0: string_t, arg1: integer_t): object_t;
      getAttributeP(arg0: string_t, arg1: integer_t): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptContext.getAttribute(java.lang.String)
      getAttribute(arg0: string_t): object_t;
      getAttributeP(arg0: string_t): Promise<object_t>;
      // public abstract int javax.script.ScriptContext.getAttributesScope(java.lang.String)
      getAttributesScope(arg0: string_t): number;
      getAttributesScopeP(arg0: string_t): Promise<number>;
      // public abstract javax.script.Bindings javax.script.ScriptContext.getBindings(int)
      getBindings(arg0: integer_t): Bindings;
      getBindingsP(arg0: integer_t): Promise<Bindings>;
      // public abstract java.io.Writer javax.script.ScriptContext.getErrorWriter()
      getErrorWriter(): object_t;
      getErrorWriterP(): Promise<object_t>;
      // public abstract java.io.Reader javax.script.ScriptContext.getReader()
      getReader(): object_t;
      getReaderP(): Promise<object_t>;
      // public abstract java.util.List<java.lang.Integer> javax.script.ScriptContext.getScopes()
      getScopes(): List;
      getScopesP(): Promise<List>;
      // public abstract java.io.Writer javax.script.ScriptContext.getWriter()
      getWriter(): object_t;
      getWriterP(): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptContext.removeAttribute(java.lang.String,int)
      removeAttribute(arg0: string_t, arg1: integer_t): object_t;
      removeAttributeP(arg0: string_t, arg1: integer_t): Promise<object_t>;
      // public abstract void javax.script.ScriptContext.setAttribute(java.lang.String,java.lang.Object,int)
      setAttribute(arg0: string_t, arg1: object_t, arg2: integer_t): void;
      setAttributeP(arg0: string_t, arg1: object_t, arg2: integer_t): Promise<void>;
      // public abstract void javax.script.ScriptContext.setBindings(javax.script.Bindings,int)
      setBindings(arg0: Bindings, arg1: integer_t): void;
      setBindingsP(arg0: Bindings, arg1: integer_t): Promise<void>;
      // public abstract void javax.script.ScriptContext.setErrorWriter(java.io.Writer)
      setErrorWriter(arg0: object_t): void;
      setErrorWriterP(arg0: object_t): Promise<void>;
      // public abstract void javax.script.ScriptContext.setReader(java.io.Reader)
      setReader(arg0: object_t): void;
      setReaderP(arg0: object_t): Promise<void>;
      // public abstract void javax.script.ScriptContext.setWriter(java.io.Writer)
      setWriter(arg0: object_t): void;
      setWriterP(arg0: object_t): Promise<void>;
    }
    export module ScriptContext {
      export interface Static {
        ENGINE_SCOPE: number;
        GLOBAL_SCOPE: number;
      }
    }
  }

  export module javax.script {
    export interface ScriptEngine extends Java.java.lang.Object {
      // public abstract javax.script.Bindings javax.script.ScriptEngine.createBindings()
      createBindings(): Bindings;
      createBindingsP(): Promise<Bindings>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: ScriptContext): object_t;
      evalP(arg0: string_t, arg1: ScriptContext): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: ScriptContext): object_t;
      evalP(arg0: object_t, arg1: ScriptContext): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: Bindings): object_t;
      evalP(arg0: string_t, arg1: Bindings): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: Bindings): object_t;
      evalP(arg0: object_t, arg1: Bindings): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String) throws javax.script.ScriptException
      eval(arg0: string_t): object_t;
      evalP(arg0: string_t): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader) throws javax.script.ScriptException
      eval(arg0: object_t): object_t;
      evalP(arg0: object_t): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.get(java.lang.String)
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public abstract javax.script.Bindings javax.script.ScriptEngine.getBindings(int)
      getBindings(arg0: integer_t): Bindings;
      getBindingsP(arg0: integer_t): Promise<Bindings>;
      // public abstract javax.script.ScriptContext javax.script.ScriptEngine.getContext()
      getContext(): ScriptContext;
      getContextP(): Promise<ScriptContext>;
      // public abstract javax.script.ScriptEngineFactory javax.script.ScriptEngine.getFactory()
      getFactory(): ScriptEngineFactory;
      getFactoryP(): Promise<ScriptEngineFactory>;
      // public abstract void javax.script.ScriptEngine.put(java.lang.String,java.lang.Object)
      put(arg0: string_t, arg1: object_t): void;
      putP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void javax.script.ScriptEngine.setBindings(javax.script.Bindings,int)
      setBindings(arg0: Bindings, arg1: integer_t): void;
      setBindingsP(arg0: Bindings, arg1: integer_t): Promise<void>;
      // public abstract void javax.script.ScriptEngine.setContext(javax.script.ScriptContext)
      setContext(arg0: ScriptContext): void;
      setContextP(arg0: ScriptContext): Promise<void>;
    }
    export module ScriptEngine {
      export interface Static {
        ARGV: string;
        FILENAME: string;
        ENGINE: string;
        ENGINE_VERSION: string;
        NAME: string;
        LANGUAGE: string;
        LANGUAGE_VERSION: string;
      }
    }
  }

  export module javax.script {
    export interface ScriptEngineFactory extends Java.java.lang.Object {
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getEngineName()
      getEngineName(): string;
      getEngineNameP(): Promise<string>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getEngineVersion()
      getEngineVersion(): string;
      getEngineVersionP(): Promise<string>;
      // public abstract java.util.List<java.lang.String> javax.script.ScriptEngineFactory.getExtensions()
      getExtensions(): List;
      getExtensionsP(): Promise<List>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getLanguageName()
      getLanguageName(): string;
      getLanguageNameP(): Promise<string>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getLanguageVersion()
      getLanguageVersion(): string;
      getLanguageVersionP(): Promise<string>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getMethodCallSyntax(java.lang.String,java.lang.String,java.lang.String...)
      getMethodCallSyntax(arg0: string_t, arg1: string_t, ...arg2: string_t[]): string;
      getMethodCallSyntax(arg0: string_t, arg1: string_t, arg2: array_t<string_t>): string;
      getMethodCallSyntaxP(arg0: string_t, arg1: string_t, ...arg2: string_t[]): Promise<string>;
      getMethodCallSyntaxP(arg0: string_t, arg1: string_t, arg2: array_t<string_t>): Promise<string>;
      // public abstract java.util.List<java.lang.String> javax.script.ScriptEngineFactory.getMimeTypes()
      getMimeTypes(): List;
      getMimeTypesP(): Promise<List>;
      // public abstract java.util.List<java.lang.String> javax.script.ScriptEngineFactory.getNames()
      getNames(): List;
      getNamesP(): Promise<List>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getOutputStatement(java.lang.String)
      getOutputStatement(arg0: string_t): string;
      getOutputStatementP(arg0: string_t): Promise<string>;
      // public abstract java.lang.Object javax.script.ScriptEngineFactory.getParameter(java.lang.String)
      getParameter(arg0: string_t): object_t;
      getParameterP(arg0: string_t): Promise<object_t>;
      // public abstract java.lang.String javax.script.ScriptEngineFactory.getProgram(java.lang.String...)
      getProgram(...arg0: string_t[]): string;
      getProgram(arg0: array_t<string_t>): string;
      getProgramP(...arg0: string_t[]): Promise<string>;
      getProgramP(arg0: array_t<string_t>): Promise<string>;
      // public abstract javax.script.ScriptEngine javax.script.ScriptEngineFactory.getScriptEngine()
      getScriptEngine(): ScriptEngine;
      getScriptEngineP(): Promise<ScriptEngine>;
    }
    export module ScriptEngineFactory {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.groovy.function_ {
    export interface GComparator extends Java.java.lang.Object,Java.java.util.Comparator {
      // public abstract int java.util.Comparator.compare(T,T)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): Comparator;
      reversedP(): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: Comparator): Comparator;
      thenComparingP(arg0: Function, arg1: Comparator): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): Comparator;
      thenComparingP(arg0: Function): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: Comparator): Comparator;
      thenComparingP(arg0: Comparator): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): Comparator;
      thenComparingDoubleP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): Comparator;
      thenComparingIntP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): Comparator;
      thenComparingLongP(arg0: object_t): Promise<Comparator>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GComparator {
      export interface Static {
        new (arg0: Closure): org.apache.tinkerpop.gremlin.groovy.function_.GComparator;
        // public static org.apache.tinkerpop.gremlin.groovy.function.GComparator[] org.apache.tinkerpop.gremlin.groovy.function.GComparator.make(groovy.lang.Closure...)
        make(...arg0: Closure[]): GComparator[];
        make(arg0: array_t<Closure>): GComparator[];
        makeP(...arg0: Closure[]): Promise<GComparator[]>;
        makeP(arg0: array_t<Closure>): Promise<GComparator[]>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.groovy.function_ {
    export interface GFunction extends Java.java.lang.Object,Java.java.util.function_.Function {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GFunction {
      export interface Static {
        new (arg0: Closure): org.apache.tinkerpop.gremlin.groovy.function_.GFunction;
        // public static org.apache.tinkerpop.gremlin.groovy.function.GFunction[] org.apache.tinkerpop.gremlin.groovy.function.GFunction.make(groovy.lang.Closure...)
        make(...arg0: Closure[]): GFunction[];
        make(arg0: array_t<Closure>): GFunction[];
        makeP(...arg0: Closure[]): Promise<GFunction[]>;
        makeP(arg0: array_t<Closure>): Promise<GFunction[]>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.groovy.function_ {
    export interface GSupplier extends Java.java.lang.Object,Java.java.util.function_.Supplier {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GSupplier {
      export interface Static {
        new (arg0: Closure): org.apache.tinkerpop.gremlin.groovy.function_.GSupplier;
        // public static org.apache.tinkerpop.gremlin.groovy.function.GSupplier[] org.apache.tinkerpop.gremlin.groovy.function.GSupplier.make(groovy.lang.Closure...)
        make(...arg0: Closure[]): GSupplier[];
        make(arg0: array_t<Closure>): GSupplier[];
        makeP(...arg0: Closure[]): Promise<GSupplier[]>;
        makeP(arg0: array_t<Closure>): Promise<GSupplier[]>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.groovy.function_ {
    export interface GUnaryOperator extends Java.java.lang.Object,Java.java.util.function_.UnaryOperator {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GUnaryOperator {
      export interface Static {
        new (arg0: Closure): org.apache.tinkerpop.gremlin.groovy.function_.GUnaryOperator;
        // public static org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator[] org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator.make(groovy.lang.Closure...)
        make(...arg0: Closure[]): GUnaryOperator[];
        make(arg0: array_t<Closure>): GUnaryOperator[];
        makeP(...arg0: Closure[]): Promise<GUnaryOperator[]>;
        makeP(arg0: array_t<Closure>): Promise<GUnaryOperator[]>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.groovy.jsr223 {
    export interface GremlinGroovyScriptEngine extends Java.javax.script.AbstractScriptEngine {
      // public synchronized void org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.addImports(java.util.Set<java.lang.String>)
      addImports(arg0: Set): void;
      addImportsP(arg0: Set): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.close() throws java.lang.Exception
      close(): void;
      closeP(): Promise<void>;
      // public javax.script.CompiledScript org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.compile(java.lang.String) throws javax.script.ScriptException
      compile(arg0: string_t): CompiledScript;
      compileP(arg0: string_t): Promise<CompiledScript>;
      // public javax.script.CompiledScript org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.compile(java.io.Reader) throws javax.script.ScriptException
      compile(arg0: object_t): CompiledScript;
      compileP(arg0: object_t): Promise<CompiledScript>;
      // public abstract javax.script.Bindings javax.script.ScriptEngine.createBindings()
      createBindings(): Bindings;
      createBindingsP(): Promise<Bindings>;
      // public java.util.Map[] org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.dependencies()
      dependencies(): Map[];
      dependenciesP(): Promise<Map[]>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: ScriptContext): object_t;
      evalP(arg0: string_t, arg1: ScriptContext): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader,javax.script.ScriptContext) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: ScriptContext): object_t;
      evalP(arg0: object_t, arg1: ScriptContext): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: string_t, arg1: Bindings): object_t;
      evalP(arg0: string_t, arg1: Bindings): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader,javax.script.Bindings) throws javax.script.ScriptException
      eval(arg0: object_t, arg1: Bindings): object_t;
      evalP(arg0: object_t, arg1: Bindings): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.lang.String) throws javax.script.ScriptException
      eval(arg0: string_t): object_t;
      evalP(arg0: string_t): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.eval(java.io.Reader) throws javax.script.ScriptException
      eval(arg0: object_t): object_t;
      evalP(arg0: object_t): Promise<object_t>;
      // public abstract java.lang.Object javax.script.ScriptEngine.get(java.lang.String)
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public abstract javax.script.Bindings javax.script.ScriptEngine.getBindings(int)
      getBindings(arg0: integer_t): Bindings;
      getBindingsP(arg0: integer_t): Promise<Bindings>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public groovy.lang.GroovyClassLoader org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getClassLoader()
      getClassLoader(): GroovyClassLoader;
      getClassLoaderP(): Promise<GroovyClassLoader>;
      // public abstract javax.script.ScriptContext javax.script.ScriptEngine.getContext()
      getContext(): ScriptContext;
      getContextP(): Promise<ScriptContext>;
      // public abstract javax.script.ScriptEngineFactory javax.script.ScriptEngine.getFactory()
      getFactory(): ScriptEngineFactory;
      getFactoryP(): Promise<ScriptEngineFactory>;
      // public <T> T org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.getInterface(java.lang.Object,java.lang.Class<T>)
      getInterface(arg0: object_t, arg1: Class): object_t;
      getInterfaceP(arg0: object_t, arg1: Class): Promise<object_t>;
      // public <T> T org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.getInterface(java.lang.Class<T>)
      getInterface(arg0: Class): object_t;
      getInterfaceP(arg0: Class): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.imports()
      imports(): Map;
      importsP(): Promise<Map>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.invokeFunction(java.lang.String,java.lang.Object...) throws javax.script.ScriptException,java.lang.NoSuchMethodException
      invokeFunction(arg0: string_t, ...arg1: object_t[]): object_t;
      invokeFunction(arg0: string_t, arg1: object_array_t): object_t;
      invokeFunctionP(arg0: string_t, ...arg1: object_t[]): Promise<object_t>;
      invokeFunctionP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.invokeMethod(java.lang.Object,java.lang.String,java.lang.Object...) throws javax.script.ScriptException,java.lang.NoSuchMethodException
      invokeMethod(arg0: object_t, arg1: string_t, ...arg2: object_t[]): object_t;
      invokeMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
      invokeMethodP(arg0: object_t, arg1: string_t, ...arg2: object_t[]): Promise<object_t>;
      invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
      // public void org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.loadPlugins(java.util.List<org.apache.tinkerpop.gremlin.groovy.plugin.GremlinPlugin>) throws org.apache.tinkerpop.gremlin.groovy.plugin.GremlinPluginException
      loadPlugins(arg0: List): void;
      loadPluginsP(arg0: List): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.util.Set org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.plugins()
      plugins(): Set;
      pluginsP(): Promise<Set>;
      // public abstract void javax.script.ScriptEngine.put(java.lang.String,java.lang.Object)
      put(arg0: string_t, arg1: object_t): void;
      putP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void javax.script.ScriptEngine.setBindings(javax.script.Bindings,int)
      setBindings(arg0: Bindings, arg1: integer_t): void;
      setBindingsP(arg0: Bindings, arg1: integer_t): Promise<void>;
      // public void org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.setClassLoader(groovy.lang.GroovyClassLoader)
      setClassLoader(arg0: GroovyClassLoader): void;
      setClassLoaderP(arg0: GroovyClassLoader): Promise<void>;
      // public abstract void javax.script.ScriptEngine.setContext(javax.script.ScriptContext)
      setContext(arg0: ScriptContext): void;
      setContextP(arg0: ScriptContext): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public synchronized java.util.List<org.apache.tinkerpop.gremlin.groovy.plugin.GremlinPlugin> org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.use(java.lang.String,java.lang.String,java.lang.String)
      use(arg0: string_t, arg1: string_t, arg2: string_t): List;
      useP(arg0: string_t, arg1: string_t, arg2: string_t): Promise<List>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GremlinGroovyScriptEngine {
      export interface Static {
        new (arg0: object_t, arg1: object_t, arg2: long_t): org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
        new (arg0: object_t, arg1: object_t): org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
        new (arg0: object_t): org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
        new (): org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
        DEFAULT_SCRIPT_EVALUATION_TIMEOUT: longValue_t;
        KEY_REFERENCE_TYPE: string;
        REFERENCE_TYPE_PHANTOM: string;
        REFERENCE_TYPE_WEAK: string;
        REFERENCE_TYPE_SOFT: string;
        REFERENCE_TYPE_HARD: string;
        ARGV: string;
        FILENAME: string;
        ENGINE: string;
        ENGINE_VERSION: string;
        NAME: string;
        LANGUAGE: string;
        LANGUAGE_VERSION: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
    export interface ClusterCountMapReduce extends Java.java.lang.Object {
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.addResultToMemory(org.apache.tinkerpop.gremlin.process.computer.Memory$Admin,java.util.Iterator<org.apache.tinkerpop.gremlin.process.computer.KeyValue<RK, RV>>)
      addResultToMemory(arg0: Memory$Admin, arg1: Iterator): void;
      addResultToMemoryP(arg0: Memory$Admin, arg1: Iterator): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.computer.MapReduce<MK, MV, RK, RV, R> org.apache.tinkerpop.gremlin.process.computer.util.StaticMapReduce.clone()
      clone(): MapReduce;
      cloneP(): Promise<MapReduce>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.computer.util.StaticMapReduce.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.combine(org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject,java.util.Iterator<java.io.Serializable>,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject, java.lang.Integer>)
      combine(arg0: MapReduce$NullObject, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      combineP(arg0: MapReduce$NullObject, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.combine(java.lang.Object,java.util.Iterator,org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter)
      combine(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      combineP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public boolean org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.doStage(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      doStage(arg0: MapReduce$Stage): boolean;
      doStageP(arg0: MapReduce$Stage): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Integer org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.generateFinalResult(java.util.Iterator<org.apache.tinkerpop.gremlin.process.computer.KeyValue<org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject, java.lang.Integer>>)
      generateFinalResult(arg0: Iterator): number;
      generateFinalResultP(arg0: Iterator): Promise<number>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.generateFinalResult(java.util.Iterator)
      generateFinalResult(arg0: Iterator): object_t;
      generateFinalResultP(arg0: Iterator): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.util.Optional<java.util.Comparator<MK>> org.apache.tinkerpop.gremlin.process.computer.MapReduce.getMapKeySort()
      getMapKeySort(): object_t;
      getMapKeySortP(): Promise<object_t>;
      // public java.lang.String org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.getMemoryKey()
      getMemoryKey(): string;
      getMemoryKeyP(): Promise<string>;
      // public default java.util.Optional<java.util.Comparator<RK>> org.apache.tinkerpop.gremlin.process.computer.MapReduce.getReduceKeySort()
      getReduceKeySort(): object_t;
      getReduceKeySortP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.loadState(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
      loadState(arg0: Graph, arg1: object_t): void;
      loadStateP(arg0: Graph, arg1: object_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.map(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter<org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject, java.io.Serializable>)
      map(arg0: Vertex, arg1: MapReduce$MapEmitter): void;
      mapP(arg0: Vertex, arg1: MapReduce$MapEmitter): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.reduce(org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject,java.util.Iterator<java.io.Serializable>,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject, java.lang.Integer>)
      reduce(arg0: MapReduce$NullObject, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      reduceP(arg0: MapReduce$NullObject, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.reduce(java.lang.Object,java.util.Iterator,org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter)
      reduce(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      reduceP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.storeState(org.apache.commons.configuration.Configuration)
      storeState(arg0: object_t): void;
      storeStateP(arg0: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.workerEnd(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      workerEnd(arg0: MapReduce$Stage): void;
      workerEndP(arg0: MapReduce$Stage): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.workerStart(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      workerStart(arg0: MapReduce$Stage): void;
      workerStartP(arg0: MapReduce$Stage): Promise<void>;
    }
    export module ClusterCountMapReduce {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.build()
        build(): ClusterCountMapReduce$Builder;
        buildP(): Promise<ClusterCountMapReduce$Builder>;
        CLUSTER_COUNT_MEMORY_KEY: string;
        DEFAULT_MEMORY_KEY: string;
        MAP_REDUCE: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
    export interface ClusterCountMapReduce$Builder extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder.create()
      create(): ClusterCountMapReduce;
      createP(): Promise<ClusterCountMapReduce>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder.memoryKey(java.lang.String)
      memoryKey(arg0: string_t): ClusterCountMapReduce$Builder;
      memoryKeyP(arg0: string_t): Promise<ClusterCountMapReduce$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ClusterCountMapReduce$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
    export interface ClusterPopulationMapReduce extends Java.java.lang.Object {
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.addResultToMemory(org.apache.tinkerpop.gremlin.process.computer.Memory$Admin,java.util.Iterator<org.apache.tinkerpop.gremlin.process.computer.KeyValue<RK, RV>>)
      addResultToMemory(arg0: Memory$Admin, arg1: Iterator): void;
      addResultToMemoryP(arg0: Memory$Admin, arg1: Iterator): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.computer.MapReduce<MK, MV, RK, RV, R> org.apache.tinkerpop.gremlin.process.computer.util.StaticMapReduce.clone()
      clone(): MapReduce;
      cloneP(): Promise<MapReduce>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.computer.util.StaticMapReduce.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.combine(java.io.Serializable,java.util.Iterator<java.lang.Long>,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<java.io.Serializable, java.lang.Long>)
      combine(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      combineP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.combine(java.lang.Object,java.util.Iterator,org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter)
      combine(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      combineP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public boolean org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.doStage(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      doStage(arg0: MapReduce$Stage): boolean;
      doStageP(arg0: MapReduce$Stage): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.generateFinalResult(java.util.Iterator)
      generateFinalResult(arg0: Iterator): object_t;
      generateFinalResultP(arg0: Iterator): Promise<object_t>;
      // public java.util.Map<java.io.Serializable, java.lang.Long> org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.generateFinalResult(java.util.Iterator<org.apache.tinkerpop.gremlin.process.computer.KeyValue<java.io.Serializable, java.lang.Long>>)
      generateFinalResult(arg0: Iterator): Map;
      generateFinalResultP(arg0: Iterator): Promise<Map>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.util.Optional<java.util.Comparator<MK>> org.apache.tinkerpop.gremlin.process.computer.MapReduce.getMapKeySort()
      getMapKeySort(): object_t;
      getMapKeySortP(): Promise<object_t>;
      // public java.lang.String org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.getMemoryKey()
      getMemoryKey(): string;
      getMemoryKeyP(): Promise<string>;
      // public default java.util.Optional<java.util.Comparator<RK>> org.apache.tinkerpop.gremlin.process.computer.MapReduce.getReduceKeySort()
      getReduceKeySort(): object_t;
      getReduceKeySortP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.loadState(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
      loadState(arg0: Graph, arg1: object_t): void;
      loadStateP(arg0: Graph, arg1: object_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.map(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter<java.io.Serializable, java.lang.Long>)
      map(arg0: Vertex, arg1: MapReduce$MapEmitter): void;
      mapP(arg0: Vertex, arg1: MapReduce$MapEmitter): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.reduce(java.io.Serializable,java.util.Iterator<java.lang.Long>,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<java.io.Serializable, java.lang.Long>)
      reduce(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      reduceP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.reduce(java.lang.Object,java.util.Iterator,org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter)
      reduce(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      reduceP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.storeState(org.apache.commons.configuration.Configuration)
      storeState(arg0: object_t): void;
      storeStateP(arg0: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.workerEnd(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      workerEnd(arg0: MapReduce$Stage): void;
      workerEndP(arg0: MapReduce$Stage): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.workerStart(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      workerStart(arg0: MapReduce$Stage): void;
      workerStartP(arg0: MapReduce$Stage): Promise<void>;
    }
    export module ClusterPopulationMapReduce {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.build()
        build(): ClusterPopulationMapReduce$Builder;
        buildP(): Promise<ClusterPopulationMapReduce$Builder>;
        CLUSTER_POPULATION_MEMORY_KEY: string;
        DEFAULT_MEMORY_KEY: string;
        MAP_REDUCE: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
    export interface ClusterPopulationMapReduce$Builder extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder.create()
      create(): ClusterPopulationMapReduce;
      createP(): Promise<ClusterPopulationMapReduce>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder.memoryKey(java.lang.String)
      memoryKey(arg0: string_t): ClusterPopulationMapReduce$Builder;
      memoryKeyP(arg0: string_t): Promise<ClusterPopulationMapReduce$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ClusterPopulationMapReduce$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
    export interface PeerPressureVertexProgram extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.process.computer.util.StaticVertexProgram<M> org.apache.tinkerpop.gremlin.process.computer.util.StaticVertexProgram.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public org.apache.tinkerpop.gremlin.process.computer.VertexProgram org.apache.tinkerpop.gremlin.process.computer.util.StaticVertexProgram.clone()
      clone(): VertexProgram;
      cloneP(): Promise<VertexProgram>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.computer.util.StaticVertexProgram.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.execute(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.process.computer.Messenger<org.javatuples.Pair<java.io.Serializable, java.lang.Double>>,org.apache.tinkerpop.gremlin.process.computer.Memory)
      execute(arg0: Vertex, arg1: Messenger, arg2: Memory): void;
      executeP(arg0: Vertex, arg1: Messenger, arg2: Memory): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.getElementComputeKeys()
      getElementComputeKeys(): Set;
      getElementComputeKeysP(): Promise<Set>;
      // public org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.getFeatures()
      getFeatures(): VertexProgram$Features;
      getFeaturesP(): Promise<VertexProgram$Features>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.computer.MapReduce> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMapReducers()
      getMapReducers(): Set;
      getMapReducersP(): Promise<Set>;
      // public java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.getMemoryComputeKeys()
      getMemoryComputeKeys(): Set;
      getMemoryComputeKeysP(): Promise<Set>;
      // public default java.util.Optional<org.apache.tinkerpop.gremlin.process.computer.MessageCombiner<M>> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMessageCombiner()
      getMessageCombiner(): object_t;
      getMessageCombinerP(): Promise<object_t>;
      // public java.util.Set<org.apache.tinkerpop.gremlin.process.computer.MessageScope> org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.getMessageScopes(org.apache.tinkerpop.gremlin.process.computer.Memory)
      getMessageScopes(arg0: Memory): Set;
      getMessageScopesP(arg0: Memory): Promise<Set>;
      // public org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.getPreferredPersist()
      getPreferredPersist(): GraphComputer$Persist;
      getPreferredPersistP(): Promise<GraphComputer$Persist>;
      // public org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.getPreferredResultGraph()
      getPreferredResultGraph(): GraphComputer$ResultGraph;
      getPreferredResultGraphP(): Promise<GraphComputer$ResultGraph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.loadState(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
      loadState(arg0: Graph, arg1: object_t): void;
      loadStateP(arg0: Graph, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.setup(org.apache.tinkerpop.gremlin.process.computer.Memory)
      setup(arg0: Memory): void;
      setupP(arg0: Memory): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.storeState(org.apache.commons.configuration.Configuration)
      storeState(arg0: object_t): void;
      storeStateP(arg0: object_t): Promise<void>;
      // public boolean org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.terminate(org.apache.tinkerpop.gremlin.process.computer.Memory)
      terminate(arg0: Memory): boolean;
      terminateP(arg0: Memory): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.workerIterationEnd(org.apache.tinkerpop.gremlin.process.computer.Memory)
      workerIterationEnd(arg0: Memory): void;
      workerIterationEndP(arg0: Memory): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.workerIterationStart(org.apache.tinkerpop.gremlin.process.computer.Memory)
      workerIterationStart(arg0: Memory): void;
      workerIterationStartP(arg0: Memory): Promise<void>;
    }
    export module PeerPressureVertexProgram {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.build()
        build(): PeerPressureVertexProgram$Builder;
        buildP(): Promise<PeerPressureVertexProgram$Builder>;
        CLUSTER: string;
        VOTE_STRENGTH: string;
        VERTEX_PROGRAM: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
    export interface PeerPressureVertexProgram$Builder extends Java.java.lang.Object {
      // public B org.apache.tinkerpop.gremlin.process.computer.util.AbstractVertexProgramBuilder.configure(java.lang.Object...)
      configure(...arg0: object_t[]): VertexProgram$Builder;
      configure(arg0: object_array_t): VertexProgram$Builder;
      configureP(...arg0: object_t[]): Promise<VertexProgram$Builder>;
      configureP(arg0: object_array_t): Promise<VertexProgram$Builder>;
      // public <P> P org.apache.tinkerpop.gremlin.process.computer.util.AbstractVertexProgramBuilder.create(org.apache.tinkerpop.gremlin.structure.Graph)
      create(arg0: Graph): VertexProgram;
      createP(arg0: Graph): Promise<VertexProgram>;
      // public org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder.distributeVote(boolean)
      distributeVote(arg0: boolean_t): PeerPressureVertexProgram$Builder;
      distributeVoteP(arg0: boolean_t): Promise<PeerPressureVertexProgram$Builder>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder.maxIterations(int)
      maxIterations(arg0: integer_t): PeerPressureVertexProgram$Builder;
      maxIterationsP(arg0: integer_t): Promise<PeerPressureVertexProgram$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder.traversal(org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder,java.lang.String,java.lang.String,java.lang.Object...)
      traversal(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): PeerPressureVertexProgram$Builder;
      traversal(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): PeerPressureVertexProgram$Builder;
      traversalP(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<PeerPressureVertexProgram$Builder>;
      traversalP(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<PeerPressureVertexProgram$Builder>;
      // public org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder.traversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<org.apache.tinkerpop.gremlin.structure.Vertex, org.apache.tinkerpop.gremlin.structure.Edge>)
      traversal(arg0: Traversal$Admin): PeerPressureVertexProgram$Builder;
      traversalP(arg0: Traversal$Admin): Promise<PeerPressureVertexProgram$Builder>;
      // public org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder.traversal(java.lang.Class<? extends java.util.function.Supplier<org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>>>)
      traversal(arg0: Class): PeerPressureVertexProgram$Builder;
      traversalP(arg0: Class): Promise<PeerPressureVertexProgram$Builder>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module PeerPressureVertexProgram$Builder {
      export interface Static {
        GREMLIN_GROOVY: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface ComputerResult extends Java.java.lang.Object {
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.ComputerResult.close() throws java.lang.Exception
      close(): void;
      closeP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.process.computer.ComputerResult.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.Memory org.apache.tinkerpop.gremlin.process.computer.ComputerResult.memory()
      memory(): Memory;
      memoryP(): Promise<Memory>;
    }
    export module ComputerResult {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface GraphComputer extends Java.java.lang.Object {
      // public default org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features org.apache.tinkerpop.gremlin.process.computer.GraphComputer.features()
      features(): GraphComputer$Features;
      featuresP(): Promise<GraphComputer$Features>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer org.apache.tinkerpop.gremlin.process.computer.GraphComputer.mapReduce(org.apache.tinkerpop.gremlin.process.computer.MapReduce)
      mapReduce(arg0: MapReduce): GraphComputer;
      mapReduceP(arg0: MapReduce): Promise<GraphComputer>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer org.apache.tinkerpop.gremlin.process.computer.GraphComputer.persist(org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist)
      persist(arg0: GraphComputer$Persist): GraphComputer;
      persistP(arg0: GraphComputer$Persist): Promise<GraphComputer>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer org.apache.tinkerpop.gremlin.process.computer.GraphComputer.program(org.apache.tinkerpop.gremlin.process.computer.VertexProgram)
      program(arg0: VertexProgram): GraphComputer;
      programP(arg0: VertexProgram): Promise<GraphComputer>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer org.apache.tinkerpop.gremlin.process.computer.GraphComputer.result(org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph)
      result(arg0: GraphComputer$ResultGraph): GraphComputer;
      resultP(arg0: GraphComputer$ResultGraph): Promise<GraphComputer>;
      // public abstract java.util.concurrent.Future<org.apache.tinkerpop.gremlin.process.computer.ComputerResult> org.apache.tinkerpop.gremlin.process.computer.GraphComputer.submit()
      submit(): object_t;
      submitP(): Promise<object_t>;
    }
    export module GraphComputer {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface GraphComputer$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphComputer$Exceptions {
      export interface Static {
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.adjacentVertexEdgesAndVerticesCanNotBeReadOrUpdated()
        adjacentVertexEdgesAndVerticesCanNotBeReadOrUpdated(): object_t;
        adjacentVertexEdgesAndVerticesCanNotBeReadOrUpdatedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.adjacentVertexLabelsCanNotBeRead()
        adjacentVertexLabelsCanNotBeRead(): object_t;
        adjacentVertexLabelsCanNotBeReadP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.adjacentVertexPropertiesCanNotBeReadOrUpdated()
        adjacentVertexPropertiesCanNotBeReadOrUpdated(): object_t;
        adjacentVertexPropertiesCanNotBeReadOrUpdatedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.computerHasAlreadyBeenSubmittedAVertexProgram()
        computerHasAlreadyBeenSubmittedAVertexProgram(): object_t;
        computerHasAlreadyBeenSubmittedAVertexProgramP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.computerHasNoVertexProgramNorMapReducers()
        computerHasNoVertexProgramNorMapReducers(): object_t;
        computerHasNoVertexProgramNorMapReducersP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.incidentAndAdjacentElementsCanNotBeAccessedInMapReduce()
        incidentAndAdjacentElementsCanNotBeAccessedInMapReduce(): object_t;
        incidentAndAdjacentElementsCanNotBeAccessedInMapReduceP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.providedKeyIsNotAMemoryComputeKey(java.lang.String)
        providedKeyIsNotAMemoryComputeKey(arg0: string_t): object_t;
        providedKeyIsNotAMemoryComputeKeyP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.providedKeyIsNotAnElementComputeKey(java.lang.String)
        providedKeyIsNotAnElementComputeKey(arg0: string_t): object_t;
        providedKeyIsNotAnElementComputeKeyP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.resultGraphPersistCombinationNotSupported(org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph,org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist)
        resultGraphPersistCombinationNotSupported(arg0: GraphComputer$ResultGraph, arg1: GraphComputer$Persist): object_t;
        resultGraphPersistCombinationNotSupportedP(arg0: GraphComputer$ResultGraph, arg1: GraphComputer$Persist): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.vertexPropertiesCanNotBeUpdatedInMapReduce()
        vertexPropertiesCanNotBeUpdatedInMapReduce(): object_t;
        vertexPropertiesCanNotBeUpdatedInMapReduceP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface GraphComputer$Features extends Java.java.lang.Object {
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsDirectObjects()
      supportsDirectObjects(): boolean;
      supportsDirectObjectsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsEdgeAddition()
      supportsEdgeAddition(): boolean;
      supportsEdgeAdditionP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsEdgePropertyAddition()
      supportsEdgePropertyAddition(): boolean;
      supportsEdgePropertyAdditionP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsEdgePropertyRemoval()
      supportsEdgePropertyRemoval(): boolean;
      supportsEdgePropertyRemovalP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsEdgeRemoval()
      supportsEdgeRemoval(): boolean;
      supportsEdgeRemovalP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsGlobalMessageScopes()
      supportsGlobalMessageScopes(): boolean;
      supportsGlobalMessageScopesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsLocalMessageScopes()
      supportsLocalMessageScopes(): boolean;
      supportsLocalMessageScopesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsResultGraphPersistCombination(org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph,org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist)
      supportsResultGraphPersistCombination(arg0: GraphComputer$ResultGraph, arg1: GraphComputer$Persist): boolean;
      supportsResultGraphPersistCombinationP(arg0: GraphComputer$ResultGraph, arg1: GraphComputer$Persist): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsVertexAddition()
      supportsVertexAddition(): boolean;
      supportsVertexAdditionP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsVertexPropertyAddition()
      supportsVertexPropertyAddition(): boolean;
      supportsVertexPropertyAdditionP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsVertexPropertyRemoval()
      supportsVertexPropertyRemoval(): boolean;
      supportsVertexPropertyRemovalP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.supportsVertexRemoval()
      supportsVertexRemoval(): boolean;
      supportsVertexRemovalP(): Promise<boolean>;
    }
    export module GraphComputer$Features {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface GraphComputer$Persist extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphComputer$Persist {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist.valueOf(java.lang.String)
        valueOf(arg0: string_t): GraphComputer$Persist;
        valueOfP(arg0: string_t): Promise<GraphComputer$Persist>;
        // public static org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist[] org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist.values()
        values(): GraphComputer$Persist[];
        valuesP(): Promise<GraphComputer$Persist[]>;
        NOTHING: GraphComputer$Persist;
        VERTEX_PROPERTIES: GraphComputer$Persist;
        EDGES: GraphComputer$Persist;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface GraphComputer$ResultGraph extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphComputer$ResultGraph {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph.valueOf(java.lang.String)
        valueOf(arg0: string_t): GraphComputer$ResultGraph;
        valueOfP(arg0: string_t): Promise<GraphComputer$ResultGraph>;
        // public static org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph[] org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph.values()
        values(): GraphComputer$ResultGraph[];
        valuesP(): Promise<GraphComputer$ResultGraph[]>;
        ORIGINAL: GraphComputer$ResultGraph;
        NEW: GraphComputer$ResultGraph;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface KeyValue extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public K org.apache.tinkerpop.gremlin.process.computer.KeyValue.getKey()
      getKey(): object_t;
      getKeyP(): Promise<object_t>;
      // public V org.apache.tinkerpop.gremlin.process.computer.KeyValue.getValue()
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module KeyValue {
      export interface Static {
        new (arg0: object_t, arg1: object_t): org.apache.tinkerpop.gremlin.process.computer.KeyValue;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface MapReduce extends Java.java.lang.Object {
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.addResultToMemory(org.apache.tinkerpop.gremlin.process.computer.Memory$Admin,java.util.Iterator<org.apache.tinkerpop.gremlin.process.computer.KeyValue<RK, RV>>)
      addResultToMemory(arg0: Memory$Admin, arg1: Iterator): void;
      addResultToMemoryP(arg0: Memory$Admin, arg1: Iterator): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.MapReduce<MK, MV, RK, RV, R> org.apache.tinkerpop.gremlin.process.computer.MapReduce.clone()
      clone(): MapReduce;
      cloneP(): Promise<MapReduce>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.combine(MK,java.util.Iterator<MV>,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<RK, RV>)
      combine(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      combineP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public abstract boolean org.apache.tinkerpop.gremlin.process.computer.MapReduce.doStage(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      doStage(arg0: MapReduce$Stage): boolean;
      doStageP(arg0: MapReduce$Stage): Promise<boolean>;
      // public abstract R org.apache.tinkerpop.gremlin.process.computer.MapReduce.generateFinalResult(java.util.Iterator<org.apache.tinkerpop.gremlin.process.computer.KeyValue<RK, RV>>)
      generateFinalResult(arg0: Iterator): object_t;
      generateFinalResultP(arg0: Iterator): Promise<object_t>;
      // public default java.util.Optional<java.util.Comparator<MK>> org.apache.tinkerpop.gremlin.process.computer.MapReduce.getMapKeySort()
      getMapKeySort(): object_t;
      getMapKeySortP(): Promise<object_t>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.computer.MapReduce.getMemoryKey()
      getMemoryKey(): string;
      getMemoryKeyP(): Promise<string>;
      // public default java.util.Optional<java.util.Comparator<RK>> org.apache.tinkerpop.gremlin.process.computer.MapReduce.getReduceKeySort()
      getReduceKeySort(): object_t;
      getReduceKeySortP(): Promise<object_t>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.loadState(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
      loadState(arg0: Graph, arg1: object_t): void;
      loadStateP(arg0: Graph, arg1: object_t): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.map(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter<MK, MV>)
      map(arg0: Vertex, arg1: MapReduce$MapEmitter): void;
      mapP(arg0: Vertex, arg1: MapReduce$MapEmitter): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.reduce(MK,java.util.Iterator<MV>,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<RK, RV>)
      reduce(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      reduceP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.storeState(org.apache.commons.configuration.Configuration)
      storeState(arg0: object_t): void;
      storeStateP(arg0: object_t): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.workerEnd(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      workerEnd(arg0: MapReduce$Stage): void;
      workerEndP(arg0: MapReduce$Stage): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.workerStart(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      workerStart(arg0: MapReduce$Stage): void;
      workerStartP(arg0: MapReduce$Stage): Promise<void>;
    }
    export module MapReduce {
      export interface Static {
        // public static <M> M org.apache.tinkerpop.gremlin.process.computer.MapReduce.createMapReduce(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
        createMapReduce(arg0: Graph, arg1: object_t): MapReduce;
        createMapReduceP(arg0: Graph, arg1: object_t): Promise<MapReduce>;
        MAP_REDUCE: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface MapReduce$MapEmitter extends Java.java.lang.Object {
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter.emit(K,V)
      emit(arg0: object_t, arg1: object_t): void;
      emitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter.emit(V)
      emit(arg0: object_t): void;
      emitP(arg0: object_t): Promise<void>;
    }
    export module MapReduce$MapEmitter {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface MapReduce$NullObject extends Java.java.lang.Object {
      // public int org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MapReduce$NullObject {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject;
        // public static org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject.instance()
        instance(): MapReduce$NullObject;
        instanceP(): Promise<MapReduce$NullObject>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface MapReduce$ReduceEmitter extends Java.java.lang.Object {
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter.emit(OK,OV)
      emit(arg0: object_t, arg1: object_t): void;
      emitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter.emit(OV)
      emit(arg0: object_t): void;
      emitP(arg0: object_t): Promise<void>;
    }
    export module MapReduce$ReduceEmitter {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface MapReduce$Stage extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MapReduce$Stage {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage.valueOf(java.lang.String)
        valueOf(arg0: string_t): MapReduce$Stage;
        valueOfP(arg0: string_t): Promise<MapReduce$Stage>;
        // public static org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage[] org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage.values()
        values(): MapReduce$Stage[];
        valuesP(): Promise<MapReduce$Stage[]>;
        MAP: MapReduce$Stage;
        COMBINE: MapReduce$Stage;
        REDUCE: MapReduce$Stage;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface Memory extends Java.java.lang.Object {
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.and(java.lang.String,boolean)
      and(arg0: string_t, arg1: boolean_t): void;
      andP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public default java.util.Map<java.lang.String, java.lang.Object> org.apache.tinkerpop.gremlin.process.computer.Memory.asMap()
      asMap(): Map;
      asMapP(): Promise<Map>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.Memory.exists(java.lang.String)
      exists(arg0: string_t): boolean;
      existsP(arg0: string_t): Promise<boolean>;
      // public abstract <R> R org.apache.tinkerpop.gremlin.process.computer.Memory.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public abstract int org.apache.tinkerpop.gremlin.process.computer.Memory.getIteration()
      getIteration(): number;
      getIterationP(): Promise<number>;
      // public abstract long org.apache.tinkerpop.gremlin.process.computer.Memory.getRuntime()
      getRuntime(): longValue_t;
      getRuntimeP(): Promise<longValue_t>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.incr(java.lang.String,long)
      incr(arg0: string_t, arg1: long_t): void;
      incrP(arg0: string_t, arg1: long_t): Promise<void>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.Memory.isInitialIteration()
      isInitialIteration(): boolean;
      isInitialIterationP(): Promise<boolean>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.computer.Memory.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.or(java.lang.String,boolean)
      or(arg0: string_t, arg1: boolean_t): void;
      orP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
    }
    export module Memory {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface Memory$Admin extends Java.org.apache.tinkerpop.gremlin.process.computer.Memory {
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.and(java.lang.String,boolean)
      and(arg0: string_t, arg1: boolean_t): void;
      andP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.computer.Memory org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.asImmutable()
      asImmutable(): Memory;
      asImmutableP(): Promise<Memory>;
      // public default java.util.Map<java.lang.String, java.lang.Object> org.apache.tinkerpop.gremlin.process.computer.Memory.asMap()
      asMap(): Map;
      asMapP(): Promise<Map>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.Memory.exists(java.lang.String)
      exists(arg0: string_t): boolean;
      existsP(arg0: string_t): Promise<boolean>;
      // public abstract <R> R org.apache.tinkerpop.gremlin.process.computer.Memory.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public abstract int org.apache.tinkerpop.gremlin.process.computer.Memory.getIteration()
      getIteration(): number;
      getIterationP(): Promise<number>;
      // public abstract long org.apache.tinkerpop.gremlin.process.computer.Memory.getRuntime()
      getRuntime(): longValue_t;
      getRuntimeP(): Promise<longValue_t>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.incr(java.lang.String,long)
      incr(arg0: string_t, arg1: long_t): void;
      incrP(arg0: string_t, arg1: long_t): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.incrIteration()
      incrIteration(): void;
      incrIterationP(): Promise<void>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.Memory.isInitialIteration()
      isInitialIteration(): boolean;
      isInitialIterationP(): Promise<boolean>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.computer.Memory.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.or(java.lang.String,boolean)
      or(arg0: string_t, arg1: boolean_t): void;
      orP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.setIteration(int)
      setIteration(arg0: integer_t): void;
      setIterationP(arg0: integer_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.setRuntime(long)
      setRuntime(arg0: long_t): void;
      setRuntimeP(arg0: long_t): Promise<void>;
    }
    export module Memory$Admin {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface Memory$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Memory$Exceptions {
      export interface Static {
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions.dataTypeOfMemoryValueNotSupported(java.lang.Object)
        dataTypeOfMemoryValueNotSupported(arg0: object_t): object_t;
        dataTypeOfMemoryValueNotSupportedP(arg0: object_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions.memoryDoesNotExist(java.lang.String)
        memoryDoesNotExist(arg0: string_t): object_t;
        memoryDoesNotExistP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions.memoryIsCurrentlyImmutable()
        memoryIsCurrentlyImmutable(): object_t;
        memoryIsCurrentlyImmutableP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions.memoryKeyCanNotBeEmpty()
        memoryKeyCanNotBeEmpty(): object_t;
        memoryKeyCanNotBeEmptyP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions.memoryKeyCanNotBeNull()
        memoryKeyCanNotBeNull(): object_t;
        memoryKeyCanNotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions.memoryValueCanNotBeNull()
        memoryValueCanNotBeNull(): object_t;
        memoryValueCanNotBeNullP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface MessageCombiner extends Java.java.lang.Object {
      // public abstract M org.apache.tinkerpop.gremlin.process.computer.MessageCombiner.combine(M,M)
      combine(arg0: object_t, arg1: object_t): object_t;
      combineP(arg0: object_t, arg1: object_t): Promise<object_t>;
    }
    export module MessageCombiner {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface MessageScope extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MessageScope {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.computer.MessageScope;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface MessageScope$Global extends Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public java.lang.Iterable<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global.vertices()
      vertices(): Iterable;
      verticesP(): Promise<Iterable>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MessageScope$Global {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global.instance()
        instance(): MessageScope$Global;
        instanceP(): Promise<MessageScope$Global>;
        // public static org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global.of(org.apache.tinkerpop.gremlin.structure.Vertex...)
        of(...arg0: Vertex[]): MessageScope$Global;
        of(arg0: array_t<Vertex>): MessageScope$Global;
        ofP(...arg0: Vertex[]): Promise<MessageScope$Global>;
        ofP(arg0: array_t<Vertex>): Promise<MessageScope$Global>;
        // public static org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global.of(java.lang.Iterable<org.apache.tinkerpop.gremlin.structure.Vertex>)
        of(arg0: Iterable): MessageScope$Global;
        ofP(arg0: Iterable): Promise<MessageScope$Global>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface MessageScope$Local extends Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.function.BiFunction<M, org.apache.tinkerpop.gremlin.structure.Edge, M> org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local.getEdgeFunction()
      getEdgeFunction(): BiFunction;
      getEdgeFunctionP(): Promise<BiFunction>;
      // public java.util.function.Supplier<? extends org.apache.tinkerpop.gremlin.process.traversal.Traversal<org.apache.tinkerpop.gremlin.structure.Vertex, org.apache.tinkerpop.gremlin.structure.Edge>> org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local.getIncidentTraversal()
      getIncidentTraversal(): Supplier;
      getIncidentTraversalP(): Promise<Supplier>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      incidentTraversal: Supplier;
      edgeFunction: BiFunction;
    }
    export module MessageScope$Local {
      export interface Static {
        // public static <M> org.apache.tinkerpop.gremlin.process.computer.MessageScope.org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local<M> org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local.of(java.util.function.Supplier<? extends org.apache.tinkerpop.gremlin.process.traversal.Traversal<org.apache.tinkerpop.gremlin.structure.Vertex, org.apache.tinkerpop.gremlin.structure.Edge>>,java.util.function.BiFunction<M, org.apache.tinkerpop.gremlin.structure.Edge, M>)
        of(arg0: Supplier, arg1: BiFunction): MessageScope$Local;
        ofP(arg0: Supplier, arg1: BiFunction): Promise<MessageScope$Local>;
        // public static <M> org.apache.tinkerpop.gremlin.process.computer.MessageScope.org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local<M> org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local.of(java.util.function.Supplier<? extends org.apache.tinkerpop.gremlin.process.traversal.Traversal<org.apache.tinkerpop.gremlin.structure.Vertex, org.apache.tinkerpop.gremlin.structure.Edge>>)
        of(arg0: Supplier): MessageScope$Local;
        ofP(arg0: Supplier): Promise<MessageScope$Local>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface MessageScope$Local$ReverseTraversalSupplier extends Java.java.lang.Object,Java.java.util.function_.Supplier {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traversal<org.apache.tinkerpop.gremlin.structure.Vertex, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier.get()
      get(): Traversal;
      getP(): Promise<Traversal>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MessageScope$Local$ReverseTraversalSupplier {
      export interface Static {
        new (arg0: MessageScope$Local): org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface Messenger extends Java.java.lang.Object {
      // public abstract java.util.Iterator<M> org.apache.tinkerpop.gremlin.process.computer.Messenger.receiveMessages()
      receiveMessages(): Iterator;
      receiveMessagesP(): Promise<Iterator>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Messenger.sendMessage(org.apache.tinkerpop.gremlin.process.computer.MessageScope,M)
      sendMessage(arg0: MessageScope, arg1: object_t): void;
      sendMessageP(arg0: MessageScope, arg1: object_t): Promise<void>;
    }
    export module Messenger {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank {
    export interface PageRankMapReduce extends Java.java.lang.Object {
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.addResultToMemory(org.apache.tinkerpop.gremlin.process.computer.Memory$Admin,java.util.Iterator<org.apache.tinkerpop.gremlin.process.computer.KeyValue<RK, RV>>)
      addResultToMemory(arg0: Memory$Admin, arg1: Iterator): void;
      addResultToMemoryP(arg0: Memory$Admin, arg1: Iterator): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.computer.MapReduce<MK, MV, RK, RV, R> org.apache.tinkerpop.gremlin.process.computer.util.StaticMapReduce.clone()
      clone(): MapReduce;
      cloneP(): Promise<MapReduce>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.computer.util.StaticMapReduce.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.combine(MK,java.util.Iterator<MV>,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<RK, RV>)
      combine(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      combineP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public boolean org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.doStage(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      doStage(arg0: MapReduce$Stage): boolean;
      doStageP(arg0: MapReduce$Stage): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.Iterator<org.apache.tinkerpop.gremlin.process.computer.KeyValue<java.lang.Object, java.lang.Double>> org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.generateFinalResult(java.util.Iterator<org.apache.tinkerpop.gremlin.process.computer.KeyValue<java.lang.Object, java.lang.Double>>)
      generateFinalResult(arg0: Iterator): Iterator;
      generateFinalResultP(arg0: Iterator): Promise<Iterator>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.generateFinalResult(java.util.Iterator)
      generateFinalResult(arg0: Iterator): object_t;
      generateFinalResultP(arg0: Iterator): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.util.Optional<java.util.Comparator<MK>> org.apache.tinkerpop.gremlin.process.computer.MapReduce.getMapKeySort()
      getMapKeySort(): object_t;
      getMapKeySortP(): Promise<object_t>;
      // public java.lang.String org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.getMemoryKey()
      getMemoryKey(): string;
      getMemoryKeyP(): Promise<string>;
      // public default java.util.Optional<java.util.Comparator<RK>> org.apache.tinkerpop.gremlin.process.computer.MapReduce.getReduceKeySort()
      getReduceKeySort(): object_t;
      getReduceKeySortP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.loadState(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
      loadState(arg0: Graph, arg1: object_t): void;
      loadStateP(arg0: Graph, arg1: object_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.map(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter<java.lang.Object, java.lang.Double>)
      map(arg0: Vertex, arg1: MapReduce$MapEmitter): void;
      mapP(arg0: Vertex, arg1: MapReduce$MapEmitter): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.reduce(MK,java.util.Iterator<MV>,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<RK, RV>)
      reduce(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      reduceP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.storeState(org.apache.commons.configuration.Configuration)
      storeState(arg0: object_t): void;
      storeStateP(arg0: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.workerEnd(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      workerEnd(arg0: MapReduce$Stage): void;
      workerEndP(arg0: MapReduce$Stage): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.workerStart(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      workerStart(arg0: MapReduce$Stage): void;
      workerStartP(arg0: MapReduce$Stage): Promise<void>;
    }
    export module PageRankMapReduce {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.build()
        build(): PageRankMapReduce$Builder;
        buildP(): Promise<PageRankMapReduce$Builder>;
        PAGE_RANK_MEMORY_KEY: string;
        DEFAULT_MEMORY_KEY: string;
        MAP_REDUCE: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank {
    export interface PageRankMapReduce$Builder extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder.create()
      create(): PageRankMapReduce;
      createP(): Promise<PageRankMapReduce>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder.memoryKey(java.lang.String)
      memoryKey(arg0: string_t): PageRankMapReduce$Builder;
      memoryKeyP(arg0: string_t): Promise<PageRankMapReduce$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module PageRankMapReduce$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank {
    export interface PageRankMessageCombiner extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.computer.MessageCombiner {
      // public abstract M org.apache.tinkerpop.gremlin.process.computer.MessageCombiner.combine(M,M)
      combine(arg0: object_t, arg1: object_t): object_t;
      combineP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public java.lang.Double org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner.combine(java.lang.Double,java.lang.Double)
      combine(arg0: double_t, arg1: double_t): number;
      combineP(arg0: double_t, arg1: double_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module PageRankMessageCombiner {
      export interface Static {
        // public static java.util.Optional<org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner> org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner.instance()
        instance(): object_t;
        instanceP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank {
    export interface PageRankVertexProgram extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.process.computer.util.StaticVertexProgram<M> org.apache.tinkerpop.gremlin.process.computer.util.StaticVertexProgram.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public org.apache.tinkerpop.gremlin.process.computer.VertexProgram org.apache.tinkerpop.gremlin.process.computer.util.StaticVertexProgram.clone()
      clone(): VertexProgram;
      cloneP(): Promise<VertexProgram>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.computer.util.StaticVertexProgram.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.execute(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.process.computer.Messenger<java.lang.Double>,org.apache.tinkerpop.gremlin.process.computer.Memory)
      execute(arg0: Vertex, arg1: Messenger, arg2: Memory): void;
      executeP(arg0: Vertex, arg1: Messenger, arg2: Memory): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.getElementComputeKeys()
      getElementComputeKeys(): Set;
      getElementComputeKeysP(): Promise<Set>;
      // public org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.getFeatures()
      getFeatures(): VertexProgram$Features;
      getFeaturesP(): Promise<VertexProgram$Features>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.computer.MapReduce> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMapReducers()
      getMapReducers(): Set;
      getMapReducersP(): Promise<Set>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMemoryComputeKeys()
      getMemoryComputeKeys(): Set;
      getMemoryComputeKeysP(): Promise<Set>;
      // public java.util.Optional<org.apache.tinkerpop.gremlin.process.computer.MessageCombiner<java.lang.Double>> org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.getMessageCombiner()
      getMessageCombiner(): object_t;
      getMessageCombinerP(): Promise<object_t>;
      // public java.util.Set<org.apache.tinkerpop.gremlin.process.computer.MessageScope> org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.getMessageScopes(org.apache.tinkerpop.gremlin.process.computer.Memory)
      getMessageScopes(arg0: Memory): Set;
      getMessageScopesP(arg0: Memory): Promise<Set>;
      // public org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.getPreferredPersist()
      getPreferredPersist(): GraphComputer$Persist;
      getPreferredPersistP(): Promise<GraphComputer$Persist>;
      // public org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.getPreferredResultGraph()
      getPreferredResultGraph(): GraphComputer$ResultGraph;
      getPreferredResultGraphP(): Promise<GraphComputer$ResultGraph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.loadState(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
      loadState(arg0: Graph, arg1: object_t): void;
      loadStateP(arg0: Graph, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.setup(org.apache.tinkerpop.gremlin.process.computer.Memory)
      setup(arg0: Memory): void;
      setupP(arg0: Memory): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.storeState(org.apache.commons.configuration.Configuration)
      storeState(arg0: object_t): void;
      storeStateP(arg0: object_t): Promise<void>;
      // public boolean org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.terminate(org.apache.tinkerpop.gremlin.process.computer.Memory)
      terminate(arg0: Memory): boolean;
      terminateP(arg0: Memory): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.workerIterationEnd(org.apache.tinkerpop.gremlin.process.computer.Memory)
      workerIterationEnd(arg0: Memory): void;
      workerIterationEndP(arg0: Memory): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.workerIterationStart(org.apache.tinkerpop.gremlin.process.computer.Memory)
      workerIterationStart(arg0: Memory): void;
      workerIterationStartP(arg0: Memory): Promise<void>;
    }
    export module PageRankVertexProgram {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.build()
        build(): PageRankVertexProgram$Builder;
        buildP(): Promise<PageRankVertexProgram$Builder>;
        PAGE_RANK: string;
        EDGE_COUNT: string;
        VERTEX_PROGRAM: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank {
    export interface PageRankVertexProgram$Builder extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder.alpha(double)
      alpha(arg0: double_t): PageRankVertexProgram$Builder;
      alphaP(arg0: double_t): Promise<PageRankVertexProgram$Builder>;
      // public B org.apache.tinkerpop.gremlin.process.computer.util.AbstractVertexProgramBuilder.configure(java.lang.Object...)
      configure(...arg0: object_t[]): VertexProgram$Builder;
      configure(arg0: object_array_t): VertexProgram$Builder;
      configureP(...arg0: object_t[]): Promise<VertexProgram$Builder>;
      configureP(arg0: object_array_t): Promise<VertexProgram$Builder>;
      // public <P> P org.apache.tinkerpop.gremlin.process.computer.util.AbstractVertexProgramBuilder.create(org.apache.tinkerpop.gremlin.structure.Graph)
      create(arg0: Graph): VertexProgram;
      createP(arg0: Graph): Promise<VertexProgram>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder.iterations(int)
      iterations(arg0: integer_t): PageRankVertexProgram$Builder;
      iterationsP(arg0: integer_t): Promise<PageRankVertexProgram$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder.traversal(org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder,java.lang.String,java.lang.String,java.lang.Object...)
      traversal(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): PageRankVertexProgram$Builder;
      traversal(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): PageRankVertexProgram$Builder;
      traversalP(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<PageRankVertexProgram$Builder>;
      traversalP(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<PageRankVertexProgram$Builder>;
      // public org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder.traversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<org.apache.tinkerpop.gremlin.structure.Vertex, org.apache.tinkerpop.gremlin.structure.Edge>)
      traversal(arg0: Traversal$Admin): PageRankVertexProgram$Builder;
      traversalP(arg0: Traversal$Admin): Promise<PageRankVertexProgram$Builder>;
      // public org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder.traversal(java.lang.Class<? extends java.util.function.Supplier<org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>>>)
      traversal(arg0: Class): PageRankVertexProgram$Builder;
      traversalP(arg0: Class): Promise<PageRankVertexProgram$Builder>;
      // public org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder.vertexCount(long)
      vertexCount(arg0: long_t): PageRankVertexProgram$Builder;
      vertexCountP(arg0: long_t): Promise<PageRankVertexProgram$Builder>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module PageRankVertexProgram$Builder {
      export interface Static {
        GREMLIN_GROOVY: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.traversal {
    export interface SingleMessenger extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.computer.Messenger {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract java.util.Iterator<M> org.apache.tinkerpop.gremlin.process.computer.Messenger.receiveMessages()
      receiveMessages(): Iterator;
      receiveMessagesP(): Promise<Iterator>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Messenger.sendMessage(org.apache.tinkerpop.gremlin.process.computer.MessageScope,M)
      sendMessage(arg0: MessageScope, arg1: object_t): void;
      sendMessageP(arg0: MessageScope, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module SingleMessenger {
      export interface Static {
        new (arg0: Messenger, arg1: object_t): org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.traversal {
    export interface TraversalVertexProgram extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.computer.VertexProgram {
      // public org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram.clone()
      clone(): TraversalVertexProgram;
      cloneP(): Promise<TraversalVertexProgram>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.VertexProgram<M> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.clone()
      clone(): VertexProgram;
      cloneP(): Promise<VertexProgram>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public <S,E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram.computerResultTraversal(org.apache.tinkerpop.gremlin.process.computer.ComputerResult)
      computerResultTraversal(arg0: ComputerResult): Traversal$Admin;
      computerResultTraversalP(arg0: ComputerResult): Promise<Traversal$Admin>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.execute(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.process.computer.Messenger<M>,org.apache.tinkerpop.gremlin.process.computer.Memory)
      execute(arg0: Vertex, arg1: Messenger, arg2: Memory): void;
      executeP(arg0: Vertex, arg1: Messenger, arg2: Memory): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getElementComputeKeys()
      getElementComputeKeys(): Set;
      getElementComputeKeysP(): Promise<Set>;
      // public default org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getFeatures()
      getFeatures(): VertexProgram$Features;
      getFeaturesP(): Promise<VertexProgram$Features>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.computer.MapReduce> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMapReducers()
      getMapReducers(): Set;
      getMapReducersP(): Promise<Set>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMemoryComputeKeys()
      getMemoryComputeKeys(): Set;
      getMemoryComputeKeysP(): Promise<Set>;
      // public default java.util.Optional<org.apache.tinkerpop.gremlin.process.computer.MessageCombiner<M>> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMessageCombiner()
      getMessageCombiner(): object_t;
      getMessageCombinerP(): Promise<object_t>;
      // public abstract java.util.Set<org.apache.tinkerpop.gremlin.process.computer.MessageScope> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMessageScopes(org.apache.tinkerpop.gremlin.process.computer.Memory)
      getMessageScopes(arg0: Memory): Set;
      getMessageScopesP(arg0: Memory): Promise<Set>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getPreferredPersist()
      getPreferredPersist(): GraphComputer$Persist;
      getPreferredPersistP(): Promise<GraphComputer$Persist>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getPreferredResultGraph()
      getPreferredResultGraph(): GraphComputer$ResultGraph;
      getPreferredResultGraphP(): Promise<GraphComputer$ResultGraph>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?> org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.loadState(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
      loadState(arg0: Graph, arg1: object_t): void;
      loadStateP(arg0: Graph, arg1: object_t): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.setup(org.apache.tinkerpop.gremlin.process.computer.Memory)
      setup(arg0: Memory): void;
      setupP(arg0: Memory): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.storeState(org.apache.commons.configuration.Configuration)
      storeState(arg0: object_t): void;
      storeStateP(arg0: object_t): Promise<void>;
      // public abstract boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram.terminate(org.apache.tinkerpop.gremlin.process.computer.Memory)
      terminate(arg0: Memory): boolean;
      terminateP(arg0: Memory): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.workerIterationEnd(org.apache.tinkerpop.gremlin.process.computer.Memory)
      workerIterationEnd(arg0: Memory): void;
      workerIterationEndP(arg0: Memory): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.workerIterationStart(org.apache.tinkerpop.gremlin.process.computer.Memory)
      workerIterationStart(arg0: Memory): void;
      workerIterationStartP(arg0: Memory): Promise<void>;
    }
    export module TraversalVertexProgram {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram.build()
        build(): TraversalVertexProgram$Builder;
        buildP(): Promise<TraversalVertexProgram$Builder>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?> org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram.getTraversal(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
        getTraversal(arg0: Graph, arg1: object_t): Traversal$Admin;
        getTraversalP(arg0: Graph, arg1: object_t): Promise<Traversal$Admin>;
        HALTED_TRAVERSERS: string;
        TRAVERSAL_SUPPLIER: string;
        VERTEX_PROGRAM: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.traversal {
    export interface TraversalVertexProgram$Builder extends Java.java.lang.Object {
      // public B org.apache.tinkerpop.gremlin.process.computer.util.AbstractVertexProgramBuilder.configure(java.lang.Object...)
      configure(...arg0: object_t[]): VertexProgram$Builder;
      configure(arg0: object_array_t): VertexProgram$Builder;
      configureP(...arg0: object_t[]): Promise<VertexProgram$Builder>;
      configureP(arg0: object_array_t): Promise<VertexProgram$Builder>;
      // public <P> P org.apache.tinkerpop.gremlin.process.computer.util.AbstractVertexProgramBuilder.create(org.apache.tinkerpop.gremlin.structure.Graph)
      create(arg0: Graph): VertexProgram;
      createP(arg0: Graph): Promise<VertexProgram>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder.traversal(org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder,java.lang.String,java.lang.String,java.lang.Object...)
      traversal(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): TraversalVertexProgram$Builder;
      traversal(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): TraversalVertexProgram$Builder;
      traversalP(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<TraversalVertexProgram$Builder>;
      traversalP(arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<TraversalVertexProgram$Builder>;
      // public org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder.traversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      traversal(arg0: Traversal$Admin): TraversalVertexProgram$Builder;
      traversalP(arg0: Traversal$Admin): Promise<TraversalVertexProgram$Builder>;
      // public org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder.traversal(java.lang.Class<? extends java.util.function.Supplier<org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>>>)
      traversal(arg0: Class): TraversalVertexProgram$Builder;
      traversalP(arg0: Class): Promise<TraversalVertexProgram$Builder>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalVertexProgram$Builder {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder;
        GREMLIN_GROOVY: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.traversal {
    export interface TraversalVertexProgramMessageCombiner extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.computer.MessageCombiner {
      // public org.apache.tinkerpop.gremlin.process.traversal.traverser.util.TraverserSet<?> org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner.combine(org.apache.tinkerpop.gremlin.process.traversal.traverser.util.TraverserSet<?>,org.apache.tinkerpop.gremlin.process.traversal.traverser.util.TraverserSet<?>)
      combine(arg0: object_t, arg1: object_t): object_t;
      combineP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract M org.apache.tinkerpop.gremlin.process.computer.MessageCombiner.combine(M,M)
      combine(arg0: object_t, arg1: object_t): object_t;
      combineP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalVertexProgramMessageCombiner {
      export interface Static {
        // public static java.util.Optional<org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner> org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner.instance()
        instance(): object_t;
        instanceP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.traversal {
    export interface TraverserExecutor extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraverserExecutor {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor;
        // public static boolean org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor.execute(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.process.computer.Messenger<org.apache.tinkerpop.gremlin.process.traversal.traverser.util.TraverserSet<?>>,org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix<?, ?>)
        execute(arg0: Vertex, arg1: Messenger, arg2: TraversalMatrix): boolean;
        executeP(arg0: Vertex, arg1: Messenger, arg2: TraversalMatrix): Promise<boolean>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer.traversal {
    export interface VertexTraversalSideEffects extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects {
      // public org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects.clone()
      clone(): VertexTraversalSideEffects;
      cloneP(): Promise<VertexTraversalSideEffects>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.clone()
      clone(): TraversalSideEffects;
      cloneP(): Promise<TraversalSideEffects>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <V> void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.forEach(java.util.function.BiConsumer<java.lang.String, V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract <V> java.util.Optional<V> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default <V> V org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getOrCreate(java.lang.String,java.util.function.Supplier<V>)
      getOrCreate(arg0: string_t, arg1: Supplier): object_t;
      getOrCreateP(arg0: string_t, arg1: Supplier): Promise<object_t>;
      // public abstract <V> java.util.Optional<java.util.function.Supplier<V>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getRegisteredSupplier(java.lang.String)
      getRegisteredSupplier(arg0: string_t): object_t;
      getRegisteredSupplierP(arg0: string_t): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.Supplier<S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getSackInitialValue()
      getSackInitialValue(): object_t;
      getSackInitialValueP(): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.UnaryOperator<S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getSackSplitOperator()
      getSackSplitOperator(): object_t;
      getSackSplitOperatorP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.mergeInto(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
      mergeInto(arg0: TraversalSideEffects): void;
      mergeIntoP(arg0: TraversalSideEffects): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.registerSupplier(java.lang.String,java.util.function.Supplier)
      registerSupplier(arg0: string_t, arg1: Supplier): void;
      registerSupplierP(arg0: string_t, arg1: Supplier): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.registerSupplierIfAbsent(java.lang.String,java.util.function.Supplier)
      registerSupplierIfAbsent(arg0: string_t, arg1: Supplier): void;
      registerSupplierIfAbsentP(arg0: string_t, arg1: Supplier): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.remove(java.lang.String)
      remove(arg0: string_t): void;
      removeP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.setLocalVertex(org.apache.tinkerpop.gremlin.structure.Vertex)
      setLocalVertex(arg0: Vertex): void;
      setLocalVertexP(arg0: Vertex): Promise<void>;
      // public abstract <S> void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.setSack(java.util.function.Supplier<S>,java.util.Optional<java.util.function.UnaryOperator<S>>)
      setSack(arg0: Supplier, arg1: object_t): void;
      setSackP(arg0: Supplier, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module VertexTraversalSideEffects {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects.of(org.apache.tinkerpop.gremlin.structure.Vertex)
        of(arg0: Vertex): TraversalSideEffects;
        ofP(arg0: Vertex): Promise<TraversalSideEffects>;
        SIDE_EFFECTS: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface VertexProgram extends Java.java.lang.Object {
      // public abstract org.apache.tinkerpop.gremlin.process.computer.VertexProgram<M> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.clone()
      clone(): VertexProgram;
      cloneP(): Promise<VertexProgram>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.execute(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.process.computer.Messenger<M>,org.apache.tinkerpop.gremlin.process.computer.Memory)
      execute(arg0: Vertex, arg1: Messenger, arg2: Memory): void;
      executeP(arg0: Vertex, arg1: Messenger, arg2: Memory): Promise<void>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getElementComputeKeys()
      getElementComputeKeys(): Set;
      getElementComputeKeysP(): Promise<Set>;
      // public default org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getFeatures()
      getFeatures(): VertexProgram$Features;
      getFeaturesP(): Promise<VertexProgram$Features>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.computer.MapReduce> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMapReducers()
      getMapReducers(): Set;
      getMapReducersP(): Promise<Set>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMemoryComputeKeys()
      getMemoryComputeKeys(): Set;
      getMemoryComputeKeysP(): Promise<Set>;
      // public default java.util.Optional<org.apache.tinkerpop.gremlin.process.computer.MessageCombiner<M>> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMessageCombiner()
      getMessageCombiner(): object_t;
      getMessageCombinerP(): Promise<object_t>;
      // public abstract java.util.Set<org.apache.tinkerpop.gremlin.process.computer.MessageScope> org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getMessageScopes(org.apache.tinkerpop.gremlin.process.computer.Memory)
      getMessageScopes(arg0: Memory): Set;
      getMessageScopesP(arg0: Memory): Promise<Set>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getPreferredPersist()
      getPreferredPersist(): GraphComputer$Persist;
      getPreferredPersistP(): Promise<GraphComputer$Persist>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph org.apache.tinkerpop.gremlin.process.computer.VertexProgram.getPreferredResultGraph()
      getPreferredResultGraph(): GraphComputer$ResultGraph;
      getPreferredResultGraphP(): Promise<GraphComputer$ResultGraph>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.loadState(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
      loadState(arg0: Graph, arg1: object_t): void;
      loadStateP(arg0: Graph, arg1: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.setup(org.apache.tinkerpop.gremlin.process.computer.Memory)
      setup(arg0: Memory): void;
      setupP(arg0: Memory): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.storeState(org.apache.commons.configuration.Configuration)
      storeState(arg0: object_t): void;
      storeStateP(arg0: object_t): Promise<void>;
      // public abstract boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram.terminate(org.apache.tinkerpop.gremlin.process.computer.Memory)
      terminate(arg0: Memory): boolean;
      terminateP(arg0: Memory): Promise<boolean>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.workerIterationEnd(org.apache.tinkerpop.gremlin.process.computer.Memory)
      workerIterationEnd(arg0: Memory): void;
      workerIterationEndP(arg0: Memory): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.VertexProgram.workerIterationStart(org.apache.tinkerpop.gremlin.process.computer.Memory)
      workerIterationStart(arg0: Memory): void;
      workerIterationStartP(arg0: Memory): Promise<void>;
    }
    export module VertexProgram {
      export interface Static {
        // public static <V> V org.apache.tinkerpop.gremlin.process.computer.VertexProgram.createVertexProgram(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
        createVertexProgram(arg0: Graph, arg1: object_t): VertexProgram;
        createVertexProgramP(arg0: Graph, arg1: object_t): Promise<VertexProgram>;
        VERTEX_PROGRAM: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface VertexProgram$Builder extends Java.java.lang.Object {
      // public abstract org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder.configure(java.lang.Object...)
      configure(...arg0: object_t[]): VertexProgram$Builder;
      configure(arg0: object_array_t): VertexProgram$Builder;
      configureP(...arg0: object_t[]): Promise<VertexProgram$Builder>;
      configureP(arg0: object_array_t): Promise<VertexProgram$Builder>;
      // public abstract <P> P org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder.create(org.apache.tinkerpop.gremlin.structure.Graph)
      create(arg0: Graph): VertexProgram;
      createP(arg0: Graph): Promise<VertexProgram>;
    }
    export module VertexProgram$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.computer {
    export interface VertexProgram$Features extends Java.java.lang.Object {
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.requiresEdgeAddition()
      requiresEdgeAddition(): boolean;
      requiresEdgeAdditionP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.requiresEdgePropertyAddition()
      requiresEdgePropertyAddition(): boolean;
      requiresEdgePropertyAdditionP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.requiresEdgePropertyRemoval()
      requiresEdgePropertyRemoval(): boolean;
      requiresEdgePropertyRemovalP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.requiresEdgeRemoval()
      requiresEdgeRemoval(): boolean;
      requiresEdgeRemovalP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.requiresGlobalMessageScopes()
      requiresGlobalMessageScopes(): boolean;
      requiresGlobalMessageScopesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.requiresLocalMessageScopes()
      requiresLocalMessageScopes(): boolean;
      requiresLocalMessageScopesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.requiresVertexAddition()
      requiresVertexAddition(): boolean;
      requiresVertexAdditionP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.requiresVertexPropertyAddition()
      requiresVertexPropertyAddition(): boolean;
      requiresVertexPropertyAdditionP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.requiresVertexPropertyRemoval()
      requiresVertexPropertyRemoval(): boolean;
      requiresVertexPropertyRemovalP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.requiresVertexRemoval()
      requiresVertexRemoval(): boolean;
      requiresVertexRemovalP(): Promise<boolean>;
    }
    export module VertexProgram$Features {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Compare extends Java.java.lang.Enum,Java.java.util.function_.BiPredicate {
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Compare org.apache.tinkerpop.gremlin.process.traversal.Compare.negate()
      negate(): Compare;
      negateP(): Promise<Compare>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public abstract boolean java.util.function.BiPredicate.test(T,U)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Compare {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Compare org.apache.tinkerpop.gremlin.process.traversal.Compare.valueOf(java.lang.String)
        valueOf(arg0: string_t): Compare;
        valueOfP(arg0: string_t): Promise<Compare>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Compare[] org.apache.tinkerpop.gremlin.process.traversal.Compare.values()
        values(): Compare[];
        valuesP(): Promise<Compare[]>;
        eq: Compare;
        neq: Compare;
        gt: Compare;
        gte: Compare;
        lt: Compare;
        lte: Compare;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Contains extends Java.java.lang.Enum,Java.java.util.function_.BiPredicate {
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Contains org.apache.tinkerpop.gremlin.process.traversal.Contains.negate()
      negate(): Contains;
      negateP(): Promise<Contains>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public abstract boolean org.apache.tinkerpop.gremlin.process.traversal.Contains.test(java.lang.Object,java.util.Collection)
      test(arg0: object_t, arg1: Collection): boolean;
      testP(arg0: object_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.function.BiPredicate.test(T,U)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Contains {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Contains org.apache.tinkerpop.gremlin.process.traversal.Contains.valueOf(java.lang.String)
        valueOf(arg0: string_t): Contains;
        valueOfP(arg0: string_t): Promise<Contains>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Contains[] org.apache.tinkerpop.gremlin.process.traversal.Contains.values()
        values(): Contains[];
        valuesP(): Promise<Contains[]>;
        within: Contains;
        without: Contains;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
    export interface __ extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module __ {
      export interface Static {
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.__(A...)
        __(...arg0: object_t[]): GraphTraversal;
        __(arg0: object_array_t): GraphTraversal;
        __P(...arg0: object_t[]): Promise<GraphTraversal>;
        __P(arg0: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
        addE(arg0: Direction, arg1: string_t, arg2: Vertex, ...arg3: object_t[]): GraphTraversal;
        addE(arg0: Direction, arg1: string_t, arg2: Vertex, arg3: object_array_t): GraphTraversal;
        addEP(arg0: Direction, arg1: string_t, arg2: Vertex, ...arg3: object_t[]): Promise<GraphTraversal>;
        addEP(arg0: Direction, arg1: string_t, arg2: Vertex, arg3: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
        addE(arg0: Direction, arg1: string_t, arg2: Iterator, ...arg3: object_t[]): GraphTraversal;
        addE(arg0: Direction, arg1: string_t, arg2: Iterator, arg3: object_array_t): GraphTraversal;
        addEP(arg0: Direction, arg1: string_t, arg2: Iterator, ...arg3: object_t[]): Promise<GraphTraversal>;
        addEP(arg0: Direction, arg1: string_t, arg2: Iterator, arg3: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
        addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
        addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
        addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
        addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.addInE(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
        addInE(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): GraphTraversal;
        addInE(arg0: string_t, arg1: Vertex, arg2: object_array_t): GraphTraversal;
        addInEP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<GraphTraversal>;
        addInEP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.addInE(java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
        addInE(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): GraphTraversal;
        addInE(arg0: string_t, arg1: Iterator, arg2: object_array_t): GraphTraversal;
        addInEP(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): Promise<GraphTraversal>;
        addInEP(arg0: string_t, arg1: Iterator, arg2: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.addInE(java.lang.String,java.lang.String,java.lang.Object...)
        addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
        addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
        addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
        addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.addOutE(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
        addOutE(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): GraphTraversal;
        addOutE(arg0: string_t, arg1: Vertex, arg2: object_array_t): GraphTraversal;
        addOutEP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<GraphTraversal>;
        addOutEP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.addOutE(java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
        addOutE(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): GraphTraversal;
        addOutE(arg0: string_t, arg1: Iterator, arg2: object_array_t): GraphTraversal;
        addOutEP(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): Promise<GraphTraversal>;
        addOutEP(arg0: string_t, arg1: Iterator, arg2: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
        addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
        addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
        addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
        addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.addV(java.lang.Object...)
        addV(...arg0: object_t[]): GraphTraversal;
        addV(arg0: object_array_t): GraphTraversal;
        addVP(...arg0: object_t[]): Promise<GraphTraversal>;
        addVP(arg0: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.aggregate(java.lang.String)
        aggregate(arg0: string_t): GraphTraversal;
        aggregateP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.and(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
        and(...arg0: Traversal[]): GraphTraversal;
        and(arg0: array_t<Traversal>): GraphTraversal;
        andP(...arg0: Traversal[]): Promise<GraphTraversal>;
        andP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.as(java.lang.String,java.lang.String...)
        as(arg0: string_t, ...arg1: string_t[]): GraphTraversal;
        as(arg0: string_t, arg1: array_t<string_t>): GraphTraversal;
        asP(arg0: string_t, ...arg1: string_t[]): Promise<GraphTraversal>;
        asP(arg0: string_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.barrier()
        barrier(): GraphTraversal;
        barrierP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.both(java.lang.String...)
        both(...arg0: string_t[]): GraphTraversal;
        both(arg0: array_t<string_t>): GraphTraversal;
        bothP(...arg0: string_t[]): Promise<GraphTraversal>;
        bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.bothE(java.lang.String...)
        bothE(...arg0: string_t[]): GraphTraversal;
        bothE(arg0: array_t<string_t>): GraphTraversal;
        bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
        bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.bothV()
        bothV(): GraphTraversal;
        bothVP(): Promise<GraphTraversal>;
        // public static <A,M,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.branch(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, M>)
        branch(arg0: Traversal): GraphTraversal;
        branchP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A,M,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.branch(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<A>, M>)
        branch(arg0: Function): GraphTraversal;
        branchP(arg0: Function): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.cap(java.lang.String,java.lang.String...)
        cap(arg0: string_t, ...arg1: string_t[]): GraphTraversal;
        cap(arg0: string_t, arg1: array_t<string_t>): GraphTraversal;
        capP(arg0: string_t, ...arg1: string_t[]): Promise<GraphTraversal>;
        capP(arg0: string_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A,M,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.choose(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, M>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, B>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, B>)
        choose(arg0: Traversal, arg1: Traversal, arg2: Traversal): GraphTraversal;
        chooseP(arg0: Traversal, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.choose(java.util.function.Predicate<A>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, B>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, B>)
        choose(arg0: Predicate, arg1: Traversal, arg2: Traversal): GraphTraversal;
        chooseP(arg0: Predicate, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
        // public static <A,M,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.choose(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, M>)
        choose(arg0: Traversal): GraphTraversal;
        chooseP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A,M,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.choose(java.util.function.Function<A, M>)
        choose(arg0: Function): GraphTraversal;
        chooseP(arg0: Function): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.coalesce(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, B>...)
        coalesce(...arg0: Traversal[]): GraphTraversal;
        coalesce(arg0: array_t<Traversal>): GraphTraversal;
        coalesceP(...arg0: Traversal[]): Promise<GraphTraversal>;
        coalesceP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.coin(double)
        coin(arg0: double_t): GraphTraversal;
        coinP(arg0: double_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.count(org.apache.tinkerpop.gremlin.process.traversal.Scope)
        count(arg0: Scope): GraphTraversal;
        countP(arg0: Scope): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.count()
        count(): GraphTraversal;
        countP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.cyclicPath()
        cyclicPath(): GraphTraversal;
        cyclicPathP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.dedup(org.apache.tinkerpop.gremlin.process.traversal.Scope)
        dedup(arg0: Scope): GraphTraversal;
        dedupP(arg0: Scope): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.dedup()
        dedup(): GraphTraversal;
        dedupP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.drop()
        drop(): GraphTraversal;
        dropP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.emit(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
        emit(arg0: Traversal): GraphTraversal;
        emitP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.emit(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<A>>)
        emit(arg0: Predicate): GraphTraversal;
        emitP(arg0: Predicate): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.emit()
        emit(): GraphTraversal;
        emitP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.filter(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<A>>)
        filter(arg0: Predicate): GraphTraversal;
        filterP(arg0: Predicate): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.flatMap(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<A>, java.util.Iterator<B>>)
        flatMap(arg0: Function): GraphTraversal;
        flatMapP(arg0: Function): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.fold(B,java.util.function.BiFunction<B, A, B>)
        fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
        foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.util.List<A>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.fold()
        fold(): GraphTraversal;
        foldP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.group(java.lang.String)
        group(arg0: string_t): GraphTraversal;
        groupP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A,K,R> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.util.Map<K, R>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.group()
        group(): GraphTraversal;
        groupP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.groupCount(java.lang.String)
        groupCount(arg0: string_t): GraphTraversal;
        groupCountP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.util.Map<B, java.lang.Long>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.groupCount()
        groupCount(): GraphTraversal;
        groupCountP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.has(java.lang.String,java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
        has(arg0: string_t, arg1: string_t, arg2: P): GraphTraversal;
        hasP(arg0: string_t, arg1: string_t, arg2: P): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.has(java.lang.String,java.lang.String,java.lang.Object)
        has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
        hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.has(org.apache.tinkerpop.gremlin.structure.T,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
        has(arg0: T, arg1: P): GraphTraversal;
        hasP(arg0: T, arg1: P): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.has(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
        has(arg0: string_t, arg1: Traversal): GraphTraversal;
        hasP(arg0: string_t, arg1: Traversal): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.has(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
        has(arg0: string_t, arg1: P): GraphTraversal;
        hasP(arg0: string_t, arg1: P): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.has(org.apache.tinkerpop.gremlin.structure.T,java.lang.Object)
        has(arg0: T, arg1: object_t): GraphTraversal;
        hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.has(java.lang.String,java.lang.Object)
        has(arg0: string_t, arg1: object_t): GraphTraversal;
        hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.has(java.lang.String)
        has(arg0: string_t): GraphTraversal;
        hasP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.hasId(java.lang.Object...)
        hasId(...arg0: object_t[]): GraphTraversal;
        hasId(arg0: object_array_t): GraphTraversal;
        hasIdP(...arg0: object_t[]): Promise<GraphTraversal>;
        hasIdP(arg0: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.hasKey(java.lang.String...)
        hasKey(...arg0: string_t[]): GraphTraversal;
        hasKey(arg0: array_t<string_t>): GraphTraversal;
        hasKeyP(...arg0: string_t[]): Promise<GraphTraversal>;
        hasKeyP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.hasLabel(java.lang.String...)
        hasLabel(...arg0: string_t[]): GraphTraversal;
        hasLabel(arg0: array_t<string_t>): GraphTraversal;
        hasLabelP(...arg0: string_t[]): Promise<GraphTraversal>;
        hasLabelP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.hasNot(java.lang.String)
        hasNot(arg0: string_t): GraphTraversal;
        hasNotP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.hasValue(java.lang.Object...)
        hasValue(...arg0: object_t[]): GraphTraversal;
        hasValue(arg0: object_array_t): GraphTraversal;
        hasValueP(...arg0: object_t[]): Promise<GraphTraversal>;
        hasValueP(arg0: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.id()
        id(): GraphTraversal;
        idP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.identity()
        identity(): GraphTraversal;
        identityP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.in(java.lang.String...)
        in(...arg0: string_t[]): GraphTraversal;
        in(arg0: array_t<string_t>): GraphTraversal;
        inP(...arg0: string_t[]): Promise<GraphTraversal>;
        inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.inE(java.lang.String...)
        inE(...arg0: string_t[]): GraphTraversal;
        inE(arg0: array_t<string_t>): GraphTraversal;
        inEP(...arg0: string_t[]): Promise<GraphTraversal>;
        inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.inject(A...)
        inject(...arg0: object_t[]): GraphTraversal;
        inject(arg0: object_array_t): GraphTraversal;
        injectP(...arg0: object_t[]): Promise<GraphTraversal>;
        injectP(arg0: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.inV()
        inV(): GraphTraversal;
        inVP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.is(org.apache.tinkerpop.gremlin.process.traversal.P<A>)
        is(arg0: P): GraphTraversal;
        isP(arg0: P): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.is(java.lang.Object)
        is(arg0: object_t): GraphTraversal;
        isP(arg0: object_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.key()
        key(): GraphTraversal;
        keyP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.label()
        label(): GraphTraversal;
        labelP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.limit(org.apache.tinkerpop.gremlin.process.traversal.Scope,long)
        limit(arg0: Scope, arg1: long_t): GraphTraversal;
        limitP(arg0: Scope, arg1: long_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.limit(long)
        limit(arg0: long_t): GraphTraversal;
        limitP(arg0: long_t): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.local(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, B>)
        local(arg0: Traversal): GraphTraversal;
        localP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.map(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<A>, B>)
        map(arg0: Function): GraphTraversal;
        mapP(arg0: Function): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.util.Map<java.lang.String, B>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.match(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
        match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
        match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
        matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
        matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.max(org.apache.tinkerpop.gremlin.process.traversal.Scope)
        max(arg0: Scope): GraphTraversal;
        maxP(arg0: Scope): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.max()
        max(): GraphTraversal;
        maxP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.mean(org.apache.tinkerpop.gremlin.process.traversal.Scope)
        mean(arg0: Scope): GraphTraversal;
        meanP(arg0: Scope): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.mean()
        mean(): GraphTraversal;
        meanP(): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.min(org.apache.tinkerpop.gremlin.process.traversal.Scope)
        min(arg0: Scope): GraphTraversal;
        minP(arg0: Scope): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.min()
        min(): GraphTraversal;
        minP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.or(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
        or(...arg0: Traversal[]): GraphTraversal;
        or(arg0: array_t<Traversal>): GraphTraversal;
        orP(...arg0: Traversal[]): Promise<GraphTraversal>;
        orP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.order(org.apache.tinkerpop.gremlin.process.traversal.Scope)
        order(arg0: Scope): GraphTraversal;
        orderP(arg0: Scope): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.order()
        order(): GraphTraversal;
        orderP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.otherV()
        otherV(): GraphTraversal;
        otherVP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.out(java.lang.String...)
        out(...arg0: string_t[]): GraphTraversal;
        out(arg0: array_t<string_t>): GraphTraversal;
        outP(...arg0: string_t[]): Promise<GraphTraversal>;
        outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.outE(java.lang.String...)
        outE(...arg0: string_t[]): GraphTraversal;
        outE(arg0: array_t<string_t>): GraphTraversal;
        outEP(...arg0: string_t[]): Promise<GraphTraversal>;
        outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.outV()
        outV(): GraphTraversal;
        outVP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.process.traversal.Path> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.path()
        path(): GraphTraversal;
        pathP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.profile()
        profile(): GraphTraversal;
        profileP(): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, ? extends org.apache.tinkerpop.gremlin.structure.Property<B>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.properties(java.lang.String...)
        properties(...arg0: string_t[]): GraphTraversal;
        properties(arg0: array_t<string_t>): GraphTraversal;
        propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
        propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.property(org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality,java.lang.String,java.lang.Object,java.lang.Object...)
        property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): GraphTraversal;
        property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): GraphTraversal;
        propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<GraphTraversal>;
        propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.property(java.lang.String,java.lang.Object,java.lang.Object...)
        property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): GraphTraversal;
        property(arg0: string_t, arg1: object_t, arg2: object_array_t): GraphTraversal;
        propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<GraphTraversal>;
        propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.util.Map<java.lang.String, B>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.propertyMap(java.lang.String...)
        propertyMap(...arg0: string_t[]): GraphTraversal;
        propertyMap(arg0: array_t<string_t>): GraphTraversal;
        propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
        propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.range(org.apache.tinkerpop.gremlin.process.traversal.Scope,long,long)
        range(arg0: Scope, arg1: long_t, arg2: long_t): GraphTraversal;
        rangeP(arg0: Scope, arg1: long_t, arg2: long_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.range(long,long)
        range(arg0: long_t, arg1: long_t): GraphTraversal;
        rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.repeat(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, A>)
        repeat(arg0: Traversal): GraphTraversal;
        repeatP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A,V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.sack(java.util.function.BinaryOperator<V>,java.lang.String)
        sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
        sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
        // public static <A,V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.sack(java.util.function.BiFunction<V, A, V>)
        sack(arg0: BiFunction): GraphTraversal;
        sackP(arg0: BiFunction): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.sack()
        sack(): GraphTraversal;
        sackP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.sample(org.apache.tinkerpop.gremlin.process.traversal.Scope,int)
        sample(arg0: Scope, arg1: integer_t): GraphTraversal;
        sampleP(arg0: Scope, arg1: integer_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.sample(int)
        sample(arg0: integer_t): GraphTraversal;
        sampleP(arg0: integer_t): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.util.Map<java.lang.String, B>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.select(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String...)
        select(arg0: Scope, ...arg1: string_t[]): GraphTraversal;
        select(arg0: Scope, arg1: array_t<string_t>): GraphTraversal;
        selectP(arg0: Scope, ...arg1: string_t[]): Promise<GraphTraversal>;
        selectP(arg0: Scope, arg1: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.select(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String)
        select(arg0: Scope, arg1: string_t): GraphTraversal;
        selectP(arg0: Scope, arg1: string_t): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.util.Map<java.lang.String, B>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.select(java.lang.String...)
        select(...arg0: string_t[]): GraphTraversal;
        select(arg0: array_t<string_t>): GraphTraversal;
        selectP(...arg0: string_t[]): Promise<GraphTraversal>;
        selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.select(java.lang.String)
        select(arg0: string_t): GraphTraversal;
        selectP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.sideEffect(java.util.function.Consumer<org.apache.tinkerpop.gremlin.process.traversal.Traverser<A>>)
        sideEffect(arg0: Consumer): GraphTraversal;
        sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.simplePath()
        simplePath(): GraphTraversal;
        simplePathP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.start()
        start(): GraphTraversal;
        startP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.store(java.lang.String)
        store(arg0: string_t): GraphTraversal;
        storeP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.subgraph(java.lang.String)
        subgraph(arg0: string_t): GraphTraversal;
        subgraphP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.sum(org.apache.tinkerpop.gremlin.process.traversal.Scope)
        sum(arg0: Scope): GraphTraversal;
        sumP(arg0: Scope): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.sum()
        sum(): GraphTraversal;
        sumP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.tail(org.apache.tinkerpop.gremlin.process.traversal.Scope,long)
        tail(arg0: Scope, arg1: long_t): GraphTraversal;
        tailP(arg0: Scope, arg1: long_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.tail(org.apache.tinkerpop.gremlin.process.traversal.Scope)
        tail(arg0: Scope): GraphTraversal;
        tailP(arg0: Scope): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.tail(long)
        tail(arg0: long_t): GraphTraversal;
        tailP(arg0: long_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.tail()
        tail(): GraphTraversal;
        tailP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.timeLimit(long)
        timeLimit(arg0: long_t): GraphTraversal;
        timeLimitP(arg0: long_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.times(int)
        times(arg0: integer_t): GraphTraversal;
        timesP(arg0: integer_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.to(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
        to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
        to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
        toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
        toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.toE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
        toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
        toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
        toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
        toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.toV(org.apache.tinkerpop.gremlin.structure.Direction)
        toV(arg0: Direction): GraphTraversal;
        toVP(arg0: Direction): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.tree(java.lang.String)
        tree(arg0: string_t): GraphTraversal;
        treeP(arg0: string_t): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.tree()
        tree(): GraphTraversal;
        treeP(): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.unfold()
        unfold(): GraphTraversal;
        unfoldP(): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.union(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, B>...)
        union(...arg0: Traversal[]): GraphTraversal;
        union(arg0: array_t<Traversal>): GraphTraversal;
        unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
        unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.until(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
        until(arg0: Traversal): GraphTraversal;
        untilP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.until(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<A>>)
        until(arg0: Predicate): GraphTraversal;
        untilP(arg0: Predicate): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.value()
        value(): GraphTraversal;
        valueP(): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.util.Map<java.lang.String, B>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.valueMap(boolean,java.lang.String...)
        valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
        valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
        valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
        valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, java.util.Map<java.lang.String, B>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.valueMap(java.lang.String...)
        valueMap(...arg0: string_t[]): GraphTraversal;
        valueMap(arg0: array_t<string_t>): GraphTraversal;
        valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
        valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.values(java.lang.String...)
        values(...arg0: string_t[]): GraphTraversal;
        values(arg0: array_t<string_t>): GraphTraversal;
        valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
        valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
        where(arg0: Scope, arg1: string_t, arg2: P): GraphTraversal;
        whereP(arg0: Scope, arg1: string_t, arg2: P): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
        where(arg0: Scope, arg1: Traversal): GraphTraversal;
        whereP(arg0: Scope, arg1: Traversal): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
        where(arg0: Scope, arg1: P): GraphTraversal;
        whereP(arg0: Scope, arg1: P): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.where(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
        where(arg0: string_t, arg1: P): GraphTraversal;
        whereP(arg0: string_t, arg1: P): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.where(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
        where(arg0: Traversal): GraphTraversal;
        whereP(arg0: Traversal): Promise<GraphTraversal>;
        // public static <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<A, A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.where(org.apache.tinkerpop.gremlin.process.traversal.P<?>)
        where(arg0: P): GraphTraversal;
        whereP(arg0: P): Promise<GraphTraversal>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
    export interface DefaultGraphTraversal extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal,Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin {
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: Vertex, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: Vertex, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: Vertex, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: Vertex, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: Iterator, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: Iterator, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: Iterator, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: Iterator, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addInE(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: Vertex, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addInE(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: Iterator, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: Iterator, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addOutE(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: Vertex, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addOutE(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: Iterator, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: Iterator, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(int,org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      addStep(arg0: integer_t, arg1: Step): Traversal$Admin;
      addStepP(arg0: integer_t, arg1: Step): Promise<Traversal$Admin>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin.addStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, E2>)
      addStep(arg0: Step): GraphTraversal$Admin;
      addStepP(arg0: Step): Promise<GraphTraversal$Admin>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, E2>) throws java.lang.IllegalStateException
      addStep(arg0: Step): Traversal$Admin;
      addStepP(arg0: Step): Promise<Traversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addV(java.lang.Object...)
      addV(...arg0: object_t[]): GraphTraversal;
      addV(arg0: object_array_t): GraphTraversal;
      addVP(...arg0: object_t[]): Promise<GraphTraversal>;
      addVP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.and(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      and(...arg0: Traversal[]): GraphTraversal;
      and(arg0: array_t<Traversal>): GraphTraversal;
      andP(...arg0: Traversal[]): Promise<GraphTraversal>;
      andP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.applyStrategies() throws java.lang.IllegalStateException
      applyStrategies(): void;
      applyStrategiesP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.as(java.lang.String,java.lang.String...)
      as(arg0: string_t, ...arg1: string_t[]): GraphTraversal;
      as(arg0: string_t, arg1: array_t<string_t>): GraphTraversal;
      asP(arg0: string_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      asP(arg0: string_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.asAdmin()
      asAdmin(): GraphTraversal$Admin;
      asAdminP(): Promise<GraphTraversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.barrier()
      barrier(): GraphTraversal;
      barrierP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.branch(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, M>)
      branch(arg0: Traversal): GraphTraversal;
      branchP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.branch(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, M>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>,java.util.Comparator<V>)
      by(arg0: Traversal, arg1: Comparator): GraphTraversal;
      byP(arg0: Traversal, arg1: Comparator): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.Element, V>,java.util.Comparator<V>)
      by(arg0: Function, arg1: Comparator): GraphTraversal;
      byP(arg0: Function, arg1: Comparator): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.lang.String,java.util.Comparator<V>)
      by(arg0: string_t, arg1: Comparator): GraphTraversal;
      byP(arg0: string_t, arg1: Comparator): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      by(arg0: Traversal): GraphTraversal;
      byP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Order)
      by(arg0: Order): GraphTraversal;
      byP(arg0: Order): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.structure.T)
      by(arg0: T): GraphTraversal;
      byP(arg0: T): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.function.Function<V, java.lang.Object>)
      by(arg0: Function): GraphTraversal;
      byP(arg0: Function): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.Comparator<E>)
      by(arg0: Comparator): GraphTraversal;
      byP(arg0: Comparator): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.lang.String)
      by(arg0: string_t): GraphTraversal;
      byP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by()
      by(): GraphTraversal;
      byP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.cap(java.lang.String,java.lang.String...)
      cap(arg0: string_t, ...arg1: string_t[]): GraphTraversal;
      cap(arg0: string_t, arg1: array_t<string_t>): GraphTraversal;
      capP(arg0: string_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      capP(arg0: string_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      choose(arg0: Traversal, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Traversal, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(java.util.function.Predicate<E>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      choose(arg0: Predicate, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Predicate, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, M>)
      choose(arg0: Traversal): GraphTraversal;
      chooseP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(java.util.function.Function<E, M>)
      choose(arg0: Function): GraphTraversal;
      chooseP(arg0: Function): Promise<GraphTraversal>;
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal.clone()
      clone(): DefaultGraphTraversal;
      cloneP(): Promise<DefaultGraphTraversal>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin.clone()
      clone(): GraphTraversal$Admin;
      cloneP(): Promise<GraphTraversal$Admin>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal.clone()
      clone(): DefaultTraversal;
      cloneP(): Promise<DefaultTraversal>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.clone()
      clone(): Traversal$Admin;
      cloneP(): Promise<Traversal$Admin>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.coalesce(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>...)
      coalesce(...arg0: Traversal[]): GraphTraversal;
      coalesce(arg0: array_t<Traversal>): GraphTraversal;
      coalesceP(...arg0: Traversal[]): Promise<GraphTraversal>;
      coalesceP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.count(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      count(arg0: Scope): GraphTraversal;
      countP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.dedup(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      dedup(arg0: Scope): GraphTraversal;
      dedupP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.drop()
      drop(): GraphTraversal;
      dropP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      emit(arg0: Predicate): GraphTraversal;
      emitP(arg0: Predicate): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.equals(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
      equals(arg0: Traversal$Admin): boolean;
      equalsP(arg0: Traversal$Admin): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <C> C org.apache.tinkerpop.gremlin.process.traversal.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.filter(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      filter(arg0: Predicate): GraphTraversal;
      filterP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.flatMap(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.fold(E2,java.util.function.BiFunction<E2, E, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.List<E>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default <E2> void org.apache.tinkerpop.gremlin.process.traversal.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: Class, arg1: Consumer): void;
      forEachRemainingP(arg0: Class, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<?, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEndStep()
      getEndStep(): Step;
      getEndStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEngine()
      getEngine(): TraversalEngine;
      getEngineP(): Promise<TraversalEngine>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.structure.Graph> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getGraph()
      getGraph(): object_t;
      getGraphP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getParent()
      getParent(): object_t;
      getParentP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<S, ?> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStartStep()
      getStartStep(): Step;
      getStartStepP(): Promise<Step>;
      // public abstract java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Step> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSteps()
      getSteps(): List;
      getStepsP(): Promise<List>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStrategies()
      getStrategies(): TraversalStrategies;
      getStrategiesP(): Promise<TraversalStrategies>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserGenerator()
      getTraverserGenerator(): TraverserGenerator;
      getTraverserGeneratorP(): Promise<TraverserGenerator>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserRequirements()
      getTraverserRequirements(): Set;
      getTraverserRequirementsP(): Promise<Set>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default <K,R> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<K, R>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<E2, java.lang.Long>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: string_t, arg1: string_t, arg2: P): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(org.apache.tinkerpop.gremlin.structure.T,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: T, arg1: P): GraphTraversal;
      hasP(arg0: T, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      has(arg0: string_t, arg1: Traversal): GraphTraversal;
      hasP(arg0: string_t, arg1: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: string_t, arg1: P): GraphTraversal;
      hasP(arg0: string_t, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(org.apache.tinkerpop.gremlin.structure.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasId(java.lang.Object...)
      hasId(...arg0: object_t[]): GraphTraversal;
      hasId(arg0: object_array_t): GraphTraversal;
      hasIdP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasIdP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasKey(java.lang.String...)
      hasKey(...arg0: string_t[]): GraphTraversal;
      hasKey(arg0: array_t<string_t>): GraphTraversal;
      hasKeyP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasKeyP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasLabel(java.lang.String...)
      hasLabel(...arg0: string_t[]): GraphTraversal;
      hasLabel(arg0: array_t<string_t>): GraphTraversal;
      hasLabelP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasLabelP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasValue(java.lang.Object...)
      hasValue(...arg0: object_t[]): GraphTraversal;
      hasValue(arg0: object_array_t): GraphTraversal;
      hasValueP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasValueP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.id()
      id(): GraphTraversal;
      idP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inject(E...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.is(org.apache.tinkerpop.gremlin.process.traversal.P<E>)
      is(arg0: P): GraphTraversal;
      isP(arg0: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.is(java.lang.Object)
      is(arg0: object_t): GraphTraversal;
      isP(arg0: object_t): Promise<GraphTraversal>;
      // public abstract boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.isLocked()
      isLocked(): boolean;
      isLockedP(): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.iterate()
      iterate(): GraphTraversal;
      iterateP(): Promise<GraphTraversal>;
      // public default <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.key()
      key(): GraphTraversal;
      keyP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.label()
      label(): GraphTraversal;
      labelP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.limit(org.apache.tinkerpop.gremlin.process.traversal.Scope,long)
      limit(arg0: Scope, arg1: long_t): GraphTraversal;
      limitP(arg0: Scope, arg1: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.local(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.map(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.match(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.max(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      max(arg0: Scope): GraphTraversal;
      maxP(arg0: Scope): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.max()
      max(): GraphTraversal;
      maxP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.mean(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      mean(arg0: Scope): GraphTraversal;
      meanP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.mean()
      mean(): GraphTraversal;
      meanP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.min(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      min(arg0: Scope): GraphTraversal;
      minP(arg0: Scope): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.min()
      min(): GraphTraversal;
      minP(): Promise<GraphTraversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.option(M,org.apache.tinkerpop.gremlin.process.traversal.Traversal<E, E2>)
      option(arg0: object_t, arg1: Traversal): GraphTraversal;
      optionP(arg0: object_t, arg1: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.option(org.apache.tinkerpop.gremlin.process.traversal.Traversal<E, E2>)
      option(arg0: Traversal): GraphTraversal;
      optionP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.or(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      or(...arg0: Traversal[]): GraphTraversal;
      or(arg0: array_t<Traversal>): GraphTraversal;
      orP(...arg0: Traversal[]): Promise<GraphTraversal>;
      orP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.order(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      order(arg0: Scope): GraphTraversal;
      orderP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.process.traversal.Path> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, ? extends org.apache.tinkerpop.gremlin.structure.Property<E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.property(org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality,java.lang.String,java.lang.Object,java.lang.Object...)
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): GraphTraversal;
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): GraphTraversal;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.property(java.lang.String,java.lang.Object,java.lang.Object...)
      property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): GraphTraversal;
      property(arg0: string_t, arg1: object_t, arg2: object_array_t): GraphTraversal;
      propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.range(org.apache.tinkerpop.gremlin.process.traversal.Scope,long,long)
      range(arg0: Scope, arg1: long_t, arg2: long_t): GraphTraversal;
      rangeP(arg0: Scope, arg1: long_t, arg2: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      removeStep(arg0: Step): Traversal$Admin;
      removeStepP(arg0: Step): Promise<Traversal$Admin>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(int) throws java.lang.IllegalStateException
      removeStep(arg0: integer_t): Traversal$Admin;
      removeStepP(arg0: integer_t): Promise<Traversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.repeat(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack(java.util.function.BiFunction<V, E, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sample(org.apache.tinkerpop.gremlin.process.traversal.Scope,int)
      sample(arg0: Scope, arg1: integer_t): GraphTraversal;
      sampleP(arg0: Scope, arg1: integer_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String...)
      select(arg0: Scope, ...arg1: string_t[]): GraphTraversal;
      select(arg0: Scope, arg1: array_t<string_t>): GraphTraversal;
      selectP(arg0: Scope, ...arg1: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: Scope, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String)
      select(arg0: Scope, arg1: string_t): GraphTraversal;
      selectP(arg0: Scope, arg1: string_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setEngine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine)
      setEngine(arg0: TraversalEngine): void;
      setEngineP(arg0: TraversalEngine): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setGraph(org.apache.tinkerpop.gremlin.structure.Graph)
      setGraph(arg0: Graph): void;
      setGraphP(arg0: Graph): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setParent(org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent)
      setParent(arg0: object_t): void;
      setParentP(arg0: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setSideEffects(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setStrategies(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies)
      setStrategies(arg0: TraversalStrategies): void;
      setStrategiesP(arg0: TraversalStrategies): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sideEffect(java.util.function.Consumer<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.subgraph(java.lang.String)
      subgraph(arg0: string_t): GraphTraversal;
      subgraphP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sum(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      sum(arg0: Scope): GraphTraversal;
      sumP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(org.apache.tinkerpop.gremlin.process.traversal.Scope,long)
      tail(arg0: Scope, arg1: long_t): GraphTraversal;
      tailP(arg0: Scope, arg1: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      tail(arg0: Scope): GraphTraversal;
      tailP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(long)
      tail(arg0: long_t): GraphTraversal;
      tailP(arg0: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail()
      tail(): GraphTraversal;
      tailP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.to(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.toE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.toV(org.apache.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default java.util.Optional<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.union(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.until(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.until(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      until(arg0: Predicate): GraphTraversal;
      untilP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: Scope, arg1: string_t, arg2: P): GraphTraversal;
      whereP(arg0: Scope, arg1: string_t, arg2: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      where(arg0: Scope, arg1: Traversal): GraphTraversal;
      whereP(arg0: Scope, arg1: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: Scope, arg1: P): GraphTraversal;
      whereP(arg0: Scope, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: string_t, arg1: P): GraphTraversal;
      whereP(arg0: string_t, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: P): GraphTraversal;
      whereP(arg0: P): Promise<GraphTraversal>;
    }
    export module DefaultGraphTraversal {
      export interface Static {
        new (arg0: Graph): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;
        new (): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
    export interface EmptyGraphTraversal extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal,Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal,Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin {
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: Vertex, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: Vertex, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: Vertex, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: Vertex, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: Iterator, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: Iterator, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: Iterator, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: Iterator, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addInE(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: Vertex, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addInE(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: Iterator, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: Iterator, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addOutE(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: Vertex, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addOutE(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: Iterator, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: Iterator, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(int,org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      addStep(arg0: integer_t, arg1: Step): Traversal$Admin;
      addStepP(arg0: integer_t, arg1: Step): Promise<Traversal$Admin>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin.addStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, E2>)
      addStep(arg0: Step): GraphTraversal$Admin;
      addStepP(arg0: Step): Promise<GraphTraversal$Admin>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, E2>) throws java.lang.IllegalStateException
      addStep(arg0: Step): Traversal$Admin;
      addStepP(arg0: Step): Promise<Traversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addV(java.lang.Object...)
      addV(...arg0: object_t[]): GraphTraversal;
      addV(arg0: object_array_t): GraphTraversal;
      addVP(...arg0: object_t[]): Promise<GraphTraversal>;
      addVP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.and(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      and(...arg0: Traversal[]): GraphTraversal;
      and(arg0: array_t<Traversal>): GraphTraversal;
      andP(...arg0: Traversal[]): Promise<GraphTraversal>;
      andP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.applyStrategies() throws java.lang.IllegalStateException
      applyStrategies(): void;
      applyStrategiesP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.as(java.lang.String,java.lang.String...)
      as(arg0: string_t, ...arg1: string_t[]): GraphTraversal;
      as(arg0: string_t, arg1: array_t<string_t>): GraphTraversal;
      asP(arg0: string_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      asP(arg0: string_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.asAdmin()
      asAdmin(): GraphTraversal$Admin;
      asAdminP(): Promise<GraphTraversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.barrier()
      barrier(): GraphTraversal;
      barrierP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.branch(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, M>)
      branch(arg0: Traversal): GraphTraversal;
      branchP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.branch(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, M>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>,java.util.Comparator<V>)
      by(arg0: Traversal, arg1: Comparator): GraphTraversal;
      byP(arg0: Traversal, arg1: Comparator): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.Element, V>,java.util.Comparator<V>)
      by(arg0: Function, arg1: Comparator): GraphTraversal;
      byP(arg0: Function, arg1: Comparator): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.lang.String,java.util.Comparator<V>)
      by(arg0: string_t, arg1: Comparator): GraphTraversal;
      byP(arg0: string_t, arg1: Comparator): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      by(arg0: Traversal): GraphTraversal;
      byP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Order)
      by(arg0: Order): GraphTraversal;
      byP(arg0: Order): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.structure.T)
      by(arg0: T): GraphTraversal;
      byP(arg0: T): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.function.Function<V, java.lang.Object>)
      by(arg0: Function): GraphTraversal;
      byP(arg0: Function): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.Comparator<E>)
      by(arg0: Comparator): GraphTraversal;
      byP(arg0: Comparator): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.lang.String)
      by(arg0: string_t): GraphTraversal;
      byP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by()
      by(): GraphTraversal;
      byP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.cap(java.lang.String,java.lang.String...)
      cap(arg0: string_t, ...arg1: string_t[]): GraphTraversal;
      cap(arg0: string_t, arg1: array_t<string_t>): GraphTraversal;
      capP(arg0: string_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      capP(arg0: string_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      choose(arg0: Traversal, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Traversal, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(java.util.function.Predicate<E>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      choose(arg0: Predicate, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Predicate, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, M>)
      choose(arg0: Traversal): GraphTraversal;
      chooseP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(java.util.function.Function<E, M>)
      choose(arg0: Function): GraphTraversal;
      chooseP(arg0: Function): Promise<GraphTraversal>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin.clone()
      clone(): GraphTraversal$Admin;
      cloneP(): Promise<GraphTraversal$Admin>;
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal.clone()
      clone(): EmptyGraphTraversal;
      cloneP(): Promise<EmptyGraphTraversal>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal.clone()
      clone(): EmptyTraversal;
      cloneP(): Promise<EmptyTraversal>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.clone()
      clone(): Traversal$Admin;
      cloneP(): Promise<Traversal$Admin>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.coalesce(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>...)
      coalesce(...arg0: Traversal[]): GraphTraversal;
      coalesce(arg0: array_t<Traversal>): GraphTraversal;
      coalesceP(...arg0: Traversal[]): Promise<GraphTraversal>;
      coalesceP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.count(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      count(arg0: Scope): GraphTraversal;
      countP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.dedup(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      dedup(arg0: Scope): GraphTraversal;
      dedupP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.drop()
      drop(): GraphTraversal;
      dropP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      emit(arg0: Predicate): GraphTraversal;
      emitP(arg0: Predicate): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.equals(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
      equals(arg0: Traversal$Admin): boolean;
      equalsP(arg0: Traversal$Admin): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <C> C org.apache.tinkerpop.gremlin.process.traversal.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.filter(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      filter(arg0: Predicate): GraphTraversal;
      filterP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.flatMap(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.fold(E2,java.util.function.BiFunction<E2, E, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.List<E>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default <E2> void org.apache.tinkerpop.gremlin.process.traversal.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: Class, arg1: Consumer): void;
      forEachRemainingP(arg0: Class, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<?, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEndStep()
      getEndStep(): Step;
      getEndStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEngine()
      getEngine(): TraversalEngine;
      getEngineP(): Promise<TraversalEngine>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.structure.Graph> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getGraph()
      getGraph(): object_t;
      getGraphP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getParent()
      getParent(): object_t;
      getParentP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<S, ?> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStartStep()
      getStartStep(): Step;
      getStartStepP(): Promise<Step>;
      // public abstract java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Step> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSteps()
      getSteps(): List;
      getStepsP(): Promise<List>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStrategies()
      getStrategies(): TraversalStrategies;
      getStrategiesP(): Promise<TraversalStrategies>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserGenerator()
      getTraverserGenerator(): TraverserGenerator;
      getTraverserGeneratorP(): Promise<TraverserGenerator>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserRequirements()
      getTraverserRequirements(): Set;
      getTraverserRequirementsP(): Promise<Set>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default <K,R> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<K, R>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<E2, java.lang.Long>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: string_t, arg1: string_t, arg2: P): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(org.apache.tinkerpop.gremlin.structure.T,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: T, arg1: P): GraphTraversal;
      hasP(arg0: T, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      has(arg0: string_t, arg1: Traversal): GraphTraversal;
      hasP(arg0: string_t, arg1: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: string_t, arg1: P): GraphTraversal;
      hasP(arg0: string_t, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(org.apache.tinkerpop.gremlin.structure.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasId(java.lang.Object...)
      hasId(...arg0: object_t[]): GraphTraversal;
      hasId(arg0: object_array_t): GraphTraversal;
      hasIdP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasIdP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasKey(java.lang.String...)
      hasKey(...arg0: string_t[]): GraphTraversal;
      hasKey(arg0: array_t<string_t>): GraphTraversal;
      hasKeyP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasKeyP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasLabel(java.lang.String...)
      hasLabel(...arg0: string_t[]): GraphTraversal;
      hasLabel(arg0: array_t<string_t>): GraphTraversal;
      hasLabelP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasLabelP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasValue(java.lang.Object...)
      hasValue(...arg0: object_t[]): GraphTraversal;
      hasValue(arg0: object_array_t): GraphTraversal;
      hasValueP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasValueP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.id()
      id(): GraphTraversal;
      idP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inject(E...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.is(org.apache.tinkerpop.gremlin.process.traversal.P<E>)
      is(arg0: P): GraphTraversal;
      isP(arg0: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.is(java.lang.Object)
      is(arg0: object_t): GraphTraversal;
      isP(arg0: object_t): Promise<GraphTraversal>;
      // public abstract boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.isLocked()
      isLocked(): boolean;
      isLockedP(): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.iterate()
      iterate(): GraphTraversal;
      iterateP(): Promise<GraphTraversal>;
      // public default <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.key()
      key(): GraphTraversal;
      keyP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.label()
      label(): GraphTraversal;
      labelP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.limit(org.apache.tinkerpop.gremlin.process.traversal.Scope,long)
      limit(arg0: Scope, arg1: long_t): GraphTraversal;
      limitP(arg0: Scope, arg1: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.local(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.map(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.match(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.max(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      max(arg0: Scope): GraphTraversal;
      maxP(arg0: Scope): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.max()
      max(): GraphTraversal;
      maxP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.mean(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      mean(arg0: Scope): GraphTraversal;
      meanP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.mean()
      mean(): GraphTraversal;
      meanP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.min(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      min(arg0: Scope): GraphTraversal;
      minP(arg0: Scope): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.min()
      min(): GraphTraversal;
      minP(): Promise<GraphTraversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.option(M,org.apache.tinkerpop.gremlin.process.traversal.Traversal<E, E2>)
      option(arg0: object_t, arg1: Traversal): GraphTraversal;
      optionP(arg0: object_t, arg1: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.option(org.apache.tinkerpop.gremlin.process.traversal.Traversal<E, E2>)
      option(arg0: Traversal): GraphTraversal;
      optionP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.or(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      or(...arg0: Traversal[]): GraphTraversal;
      or(arg0: array_t<Traversal>): GraphTraversal;
      orP(...arg0: Traversal[]): Promise<GraphTraversal>;
      orP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.order(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      order(arg0: Scope): GraphTraversal;
      orderP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.process.traversal.Path> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, ? extends org.apache.tinkerpop.gremlin.structure.Property<E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.property(org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality,java.lang.String,java.lang.Object,java.lang.Object...)
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): GraphTraversal;
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): GraphTraversal;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.property(java.lang.String,java.lang.Object,java.lang.Object...)
      property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): GraphTraversal;
      property(arg0: string_t, arg1: object_t, arg2: object_array_t): GraphTraversal;
      propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.range(org.apache.tinkerpop.gremlin.process.traversal.Scope,long,long)
      range(arg0: Scope, arg1: long_t, arg2: long_t): GraphTraversal;
      rangeP(arg0: Scope, arg1: long_t, arg2: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      removeStep(arg0: Step): Traversal$Admin;
      removeStepP(arg0: Step): Promise<Traversal$Admin>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(int) throws java.lang.IllegalStateException
      removeStep(arg0: integer_t): Traversal$Admin;
      removeStepP(arg0: integer_t): Promise<Traversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.repeat(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack(java.util.function.BiFunction<V, E, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sample(org.apache.tinkerpop.gremlin.process.traversal.Scope,int)
      sample(arg0: Scope, arg1: integer_t): GraphTraversal;
      sampleP(arg0: Scope, arg1: integer_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String...)
      select(arg0: Scope, ...arg1: string_t[]): GraphTraversal;
      select(arg0: Scope, arg1: array_t<string_t>): GraphTraversal;
      selectP(arg0: Scope, ...arg1: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: Scope, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String)
      select(arg0: Scope, arg1: string_t): GraphTraversal;
      selectP(arg0: Scope, arg1: string_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setEngine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine)
      setEngine(arg0: TraversalEngine): void;
      setEngineP(arg0: TraversalEngine): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setGraph(org.apache.tinkerpop.gremlin.structure.Graph)
      setGraph(arg0: Graph): void;
      setGraphP(arg0: Graph): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setParent(org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent)
      setParent(arg0: object_t): void;
      setParentP(arg0: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setSideEffects(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setStrategies(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies)
      setStrategies(arg0: TraversalStrategies): void;
      setStrategiesP(arg0: TraversalStrategies): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sideEffect(java.util.function.Consumer<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.subgraph(java.lang.String)
      subgraph(arg0: string_t): GraphTraversal;
      subgraphP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sum(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      sum(arg0: Scope): GraphTraversal;
      sumP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(org.apache.tinkerpop.gremlin.process.traversal.Scope,long)
      tail(arg0: Scope, arg1: long_t): GraphTraversal;
      tailP(arg0: Scope, arg1: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      tail(arg0: Scope): GraphTraversal;
      tailP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(long)
      tail(arg0: long_t): GraphTraversal;
      tailP(arg0: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail()
      tail(): GraphTraversal;
      tailP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.to(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.toE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.toV(org.apache.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default java.util.Optional<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.union(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.until(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.until(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      until(arg0: Predicate): GraphTraversal;
      untilP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: Scope, arg1: string_t, arg2: P): GraphTraversal;
      whereP(arg0: Scope, arg1: string_t, arg2: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      where(arg0: Scope, arg1: Traversal): GraphTraversal;
      whereP(arg0: Scope, arg1: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: Scope, arg1: P): GraphTraversal;
      whereP(arg0: Scope, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: string_t, arg1: P): GraphTraversal;
      whereP(arg0: string_t, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: P): GraphTraversal;
      whereP(arg0: P): Promise<GraphTraversal>;
    }
    export module EmptyGraphTraversal {
      export interface Static {
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal.instance()
        instance(): EmptyGraphTraversal;
        instanceP(): Promise<EmptyGraphTraversal>;
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal.instance()
        instance(): EmptyTraversal;
        instanceP(): Promise<EmptyTraversal>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
    export interface GraphTraversal extends Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal {
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: Vertex, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: Vertex, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: Vertex, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: Vertex, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: Iterator, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: Iterator, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: Iterator, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: Iterator, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addInE(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: Vertex, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addInE(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: Iterator, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: Iterator, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addOutE(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: Vertex, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addOutE(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: Iterator, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: Iterator, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addV(java.lang.Object...)
      addV(...arg0: object_t[]): GraphTraversal;
      addV(arg0: object_array_t): GraphTraversal;
      addVP(...arg0: object_t[]): Promise<GraphTraversal>;
      addVP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.and(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      and(...arg0: Traversal[]): GraphTraversal;
      and(arg0: array_t<Traversal>): GraphTraversal;
      andP(...arg0: Traversal[]): Promise<GraphTraversal>;
      andP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.as(java.lang.String,java.lang.String...)
      as(arg0: string_t, ...arg1: string_t[]): GraphTraversal;
      as(arg0: string_t, arg1: array_t<string_t>): GraphTraversal;
      asP(arg0: string_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      asP(arg0: string_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.asAdmin()
      asAdmin(): GraphTraversal$Admin;
      asAdminP(): Promise<GraphTraversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.barrier()
      barrier(): GraphTraversal;
      barrierP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.branch(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, M>)
      branch(arg0: Traversal): GraphTraversal;
      branchP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.branch(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, M>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>,java.util.Comparator<V>)
      by(arg0: Traversal, arg1: Comparator): GraphTraversal;
      byP(arg0: Traversal, arg1: Comparator): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.Element, V>,java.util.Comparator<V>)
      by(arg0: Function, arg1: Comparator): GraphTraversal;
      byP(arg0: Function, arg1: Comparator): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.lang.String,java.util.Comparator<V>)
      by(arg0: string_t, arg1: Comparator): GraphTraversal;
      byP(arg0: string_t, arg1: Comparator): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      by(arg0: Traversal): GraphTraversal;
      byP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Order)
      by(arg0: Order): GraphTraversal;
      byP(arg0: Order): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.structure.T)
      by(arg0: T): GraphTraversal;
      byP(arg0: T): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.function.Function<V, java.lang.Object>)
      by(arg0: Function): GraphTraversal;
      byP(arg0: Function): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.Comparator<E>)
      by(arg0: Comparator): GraphTraversal;
      byP(arg0: Comparator): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.lang.String)
      by(arg0: string_t): GraphTraversal;
      byP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by()
      by(): GraphTraversal;
      byP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.cap(java.lang.String,java.lang.String...)
      cap(arg0: string_t, ...arg1: string_t[]): GraphTraversal;
      cap(arg0: string_t, arg1: array_t<string_t>): GraphTraversal;
      capP(arg0: string_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      capP(arg0: string_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      choose(arg0: Traversal, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Traversal, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(java.util.function.Predicate<E>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      choose(arg0: Predicate, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Predicate, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, M>)
      choose(arg0: Traversal): GraphTraversal;
      chooseP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(java.util.function.Function<E, M>)
      choose(arg0: Function): GraphTraversal;
      chooseP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.coalesce(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>...)
      coalesce(...arg0: Traversal[]): GraphTraversal;
      coalesce(arg0: array_t<Traversal>): GraphTraversal;
      coalesceP(...arg0: Traversal[]): Promise<GraphTraversal>;
      coalesceP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.count(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      count(arg0: Scope): GraphTraversal;
      countP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.dedup(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      dedup(arg0: Scope): GraphTraversal;
      dedupP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.drop()
      drop(): GraphTraversal;
      dropP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      emit(arg0: Predicate): GraphTraversal;
      emitP(arg0: Predicate): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default <C> C org.apache.tinkerpop.gremlin.process.traversal.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.filter(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      filter(arg0: Predicate): GraphTraversal;
      filterP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.flatMap(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.fold(E2,java.util.function.BiFunction<E2, E, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.List<E>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default <E2> void org.apache.tinkerpop.gremlin.process.traversal.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: Class, arg1: Consumer): void;
      forEachRemainingP(arg0: Class, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default <K,R> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<K, R>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<E2, java.lang.Long>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: string_t, arg1: string_t, arg2: P): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(org.apache.tinkerpop.gremlin.structure.T,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: T, arg1: P): GraphTraversal;
      hasP(arg0: T, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      has(arg0: string_t, arg1: Traversal): GraphTraversal;
      hasP(arg0: string_t, arg1: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: string_t, arg1: P): GraphTraversal;
      hasP(arg0: string_t, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(org.apache.tinkerpop.gremlin.structure.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasId(java.lang.Object...)
      hasId(...arg0: object_t[]): GraphTraversal;
      hasId(arg0: object_array_t): GraphTraversal;
      hasIdP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasIdP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasKey(java.lang.String...)
      hasKey(...arg0: string_t[]): GraphTraversal;
      hasKey(arg0: array_t<string_t>): GraphTraversal;
      hasKeyP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasKeyP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasLabel(java.lang.String...)
      hasLabel(...arg0: string_t[]): GraphTraversal;
      hasLabel(arg0: array_t<string_t>): GraphTraversal;
      hasLabelP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasLabelP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasValue(java.lang.Object...)
      hasValue(...arg0: object_t[]): GraphTraversal;
      hasValue(arg0: object_array_t): GraphTraversal;
      hasValueP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasValueP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.id()
      id(): GraphTraversal;
      idP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inject(E...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.is(org.apache.tinkerpop.gremlin.process.traversal.P<E>)
      is(arg0: P): GraphTraversal;
      isP(arg0: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.is(java.lang.Object)
      is(arg0: object_t): GraphTraversal;
      isP(arg0: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.iterate()
      iterate(): GraphTraversal;
      iterateP(): Promise<GraphTraversal>;
      // public default <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.key()
      key(): GraphTraversal;
      keyP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.label()
      label(): GraphTraversal;
      labelP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.limit(org.apache.tinkerpop.gremlin.process.traversal.Scope,long)
      limit(arg0: Scope, arg1: long_t): GraphTraversal;
      limitP(arg0: Scope, arg1: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.local(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.map(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.match(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.max(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      max(arg0: Scope): GraphTraversal;
      maxP(arg0: Scope): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.max()
      max(): GraphTraversal;
      maxP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.mean(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      mean(arg0: Scope): GraphTraversal;
      meanP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.mean()
      mean(): GraphTraversal;
      meanP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.min(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      min(arg0: Scope): GraphTraversal;
      minP(arg0: Scope): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.min()
      min(): GraphTraversal;
      minP(): Promise<GraphTraversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.option(M,org.apache.tinkerpop.gremlin.process.traversal.Traversal<E, E2>)
      option(arg0: object_t, arg1: Traversal): GraphTraversal;
      optionP(arg0: object_t, arg1: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.option(org.apache.tinkerpop.gremlin.process.traversal.Traversal<E, E2>)
      option(arg0: Traversal): GraphTraversal;
      optionP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.or(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      or(...arg0: Traversal[]): GraphTraversal;
      or(arg0: array_t<Traversal>): GraphTraversal;
      orP(...arg0: Traversal[]): Promise<GraphTraversal>;
      orP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.order(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      order(arg0: Scope): GraphTraversal;
      orderP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.process.traversal.Path> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, ? extends org.apache.tinkerpop.gremlin.structure.Property<E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.property(org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality,java.lang.String,java.lang.Object,java.lang.Object...)
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): GraphTraversal;
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): GraphTraversal;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.property(java.lang.String,java.lang.Object,java.lang.Object...)
      property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): GraphTraversal;
      property(arg0: string_t, arg1: object_t, arg2: object_array_t): GraphTraversal;
      propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.range(org.apache.tinkerpop.gremlin.process.traversal.Scope,long,long)
      range(arg0: Scope, arg1: long_t, arg2: long_t): GraphTraversal;
      rangeP(arg0: Scope, arg1: long_t, arg2: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.repeat(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack(java.util.function.BiFunction<V, E, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sample(org.apache.tinkerpop.gremlin.process.traversal.Scope,int)
      sample(arg0: Scope, arg1: integer_t): GraphTraversal;
      sampleP(arg0: Scope, arg1: integer_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String...)
      select(arg0: Scope, ...arg1: string_t[]): GraphTraversal;
      select(arg0: Scope, arg1: array_t<string_t>): GraphTraversal;
      selectP(arg0: Scope, ...arg1: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: Scope, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String)
      select(arg0: Scope, arg1: string_t): GraphTraversal;
      selectP(arg0: Scope, arg1: string_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sideEffect(java.util.function.Consumer<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.subgraph(java.lang.String)
      subgraph(arg0: string_t): GraphTraversal;
      subgraphP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sum(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      sum(arg0: Scope): GraphTraversal;
      sumP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(org.apache.tinkerpop.gremlin.process.traversal.Scope,long)
      tail(arg0: Scope, arg1: long_t): GraphTraversal;
      tailP(arg0: Scope, arg1: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      tail(arg0: Scope): GraphTraversal;
      tailP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(long)
      tail(arg0: long_t): GraphTraversal;
      tailP(arg0: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail()
      tail(): GraphTraversal;
      tailP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.to(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.toE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.toV(org.apache.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default java.util.Optional<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.union(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.until(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.until(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      until(arg0: Predicate): GraphTraversal;
      untilP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: Scope, arg1: string_t, arg2: P): GraphTraversal;
      whereP(arg0: Scope, arg1: string_t, arg2: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      where(arg0: Scope, arg1: Traversal): GraphTraversal;
      whereP(arg0: Scope, arg1: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: Scope, arg1: P): GraphTraversal;
      whereP(arg0: Scope, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: string_t, arg1: P): GraphTraversal;
      whereP(arg0: string_t, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: P): GraphTraversal;
      whereP(arg0: P): Promise<GraphTraversal>;
    }
    export module GraphTraversal {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
    export interface GraphTraversal$Admin extends Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin,Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal {
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: Vertex, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: Vertex, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: Vertex, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: Vertex, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: Iterator, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: Iterator, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: Iterator, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: Iterator, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addInE(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: Vertex, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addInE(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: Iterator, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: Iterator, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addOutE(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: Vertex, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,java.lang.Object...)
      addOutE(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: Iterator, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: Iterator, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: Iterator, arg2: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(int,org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      addStep(arg0: integer_t, arg1: Step): Traversal$Admin;
      addStepP(arg0: integer_t, arg1: Step): Promise<Traversal$Admin>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin.addStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, E2>)
      addStep(arg0: Step): GraphTraversal$Admin;
      addStepP(arg0: Step): Promise<GraphTraversal$Admin>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, E2>) throws java.lang.IllegalStateException
      addStep(arg0: Step): Traversal$Admin;
      addStepP(arg0: Step): Promise<Traversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.addV(java.lang.Object...)
      addV(...arg0: object_t[]): GraphTraversal;
      addV(arg0: object_array_t): GraphTraversal;
      addVP(...arg0: object_t[]): Promise<GraphTraversal>;
      addVP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.and(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      and(...arg0: Traversal[]): GraphTraversal;
      and(arg0: array_t<Traversal>): GraphTraversal;
      andP(...arg0: Traversal[]): Promise<GraphTraversal>;
      andP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.applyStrategies() throws java.lang.IllegalStateException
      applyStrategies(): void;
      applyStrategiesP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.as(java.lang.String,java.lang.String...)
      as(arg0: string_t, ...arg1: string_t[]): GraphTraversal;
      as(arg0: string_t, arg1: array_t<string_t>): GraphTraversal;
      asP(arg0: string_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      asP(arg0: string_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.asAdmin()
      asAdmin(): GraphTraversal$Admin;
      asAdminP(): Promise<GraphTraversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.barrier()
      barrier(): GraphTraversal;
      barrierP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.branch(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, M>)
      branch(arg0: Traversal): GraphTraversal;
      branchP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.branch(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, M>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>,java.util.Comparator<V>)
      by(arg0: Traversal, arg1: Comparator): GraphTraversal;
      byP(arg0: Traversal, arg1: Comparator): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.Element, V>,java.util.Comparator<V>)
      by(arg0: Function, arg1: Comparator): GraphTraversal;
      byP(arg0: Function, arg1: Comparator): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.lang.String,java.util.Comparator<V>)
      by(arg0: string_t, arg1: Comparator): GraphTraversal;
      byP(arg0: string_t, arg1: Comparator): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      by(arg0: Traversal): GraphTraversal;
      byP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.process.traversal.Order)
      by(arg0: Order): GraphTraversal;
      byP(arg0: Order): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(org.apache.tinkerpop.gremlin.structure.T)
      by(arg0: T): GraphTraversal;
      byP(arg0: T): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.function.Function<V, java.lang.Object>)
      by(arg0: Function): GraphTraversal;
      byP(arg0: Function): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.util.Comparator<E>)
      by(arg0: Comparator): GraphTraversal;
      byP(arg0: Comparator): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by(java.lang.String)
      by(arg0: string_t): GraphTraversal;
      byP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.by()
      by(): GraphTraversal;
      byP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.cap(java.lang.String,java.lang.String...)
      cap(arg0: string_t, ...arg1: string_t[]): GraphTraversal;
      cap(arg0: string_t, arg1: array_t<string_t>): GraphTraversal;
      capP(arg0: string_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      capP(arg0: string_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      choose(arg0: Traversal, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Traversal, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(java.util.function.Predicate<E>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      choose(arg0: Predicate, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: Predicate, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, M>)
      choose(arg0: Traversal): GraphTraversal;
      chooseP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.choose(java.util.function.Function<E, M>)
      choose(arg0: Function): GraphTraversal;
      chooseP(arg0: Function): Promise<GraphTraversal>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin.clone()
      clone(): GraphTraversal$Admin;
      cloneP(): Promise<GraphTraversal$Admin>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.clone()
      clone(): Traversal$Admin;
      cloneP(): Promise<Traversal$Admin>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.coalesce(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>...)
      coalesce(...arg0: Traversal[]): GraphTraversal;
      coalesce(arg0: array_t<Traversal>): GraphTraversal;
      coalesceP(...arg0: Traversal[]): Promise<GraphTraversal>;
      coalesceP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.count(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      count(arg0: Scope): GraphTraversal;
      countP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.dedup(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      dedup(arg0: Scope): GraphTraversal;
      dedupP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.drop()
      drop(): GraphTraversal;
      dropP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      emit(arg0: Predicate): GraphTraversal;
      emitP(arg0: Predicate): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.equals(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
      equals(arg0: Traversal$Admin): boolean;
      equalsP(arg0: Traversal$Admin): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <C> C org.apache.tinkerpop.gremlin.process.traversal.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.filter(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      filter(arg0: Predicate): GraphTraversal;
      filterP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.flatMap(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.fold(E2,java.util.function.BiFunction<E2, E, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.List<E>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default <E2> void org.apache.tinkerpop.gremlin.process.traversal.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: Class, arg1: Consumer): void;
      forEachRemainingP(arg0: Class, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<?, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEndStep()
      getEndStep(): Step;
      getEndStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEngine()
      getEngine(): TraversalEngine;
      getEngineP(): Promise<TraversalEngine>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.structure.Graph> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getGraph()
      getGraph(): object_t;
      getGraphP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getParent()
      getParent(): object_t;
      getParentP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<S, ?> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStartStep()
      getStartStep(): Step;
      getStartStepP(): Promise<Step>;
      // public abstract java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Step> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSteps()
      getSteps(): List;
      getStepsP(): Promise<List>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStrategies()
      getStrategies(): TraversalStrategies;
      getStrategiesP(): Promise<TraversalStrategies>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserGenerator()
      getTraverserGenerator(): TraverserGenerator;
      getTraverserGeneratorP(): Promise<TraverserGenerator>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserRequirements()
      getTraverserRequirements(): Set;
      getTraverserRequirementsP(): Promise<Set>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default <K,R> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<K, R>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<E2, java.lang.Long>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: string_t, arg1: string_t, arg2: P): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(org.apache.tinkerpop.gremlin.structure.T,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: T, arg1: P): GraphTraversal;
      hasP(arg0: T, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      has(arg0: string_t, arg1: Traversal): GraphTraversal;
      hasP(arg0: string_t, arg1: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      has(arg0: string_t, arg1: P): GraphTraversal;
      hasP(arg0: string_t, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(org.apache.tinkerpop.gremlin.structure.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasId(java.lang.Object...)
      hasId(...arg0: object_t[]): GraphTraversal;
      hasId(arg0: object_array_t): GraphTraversal;
      hasIdP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasIdP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasKey(java.lang.String...)
      hasKey(...arg0: string_t[]): GraphTraversal;
      hasKey(arg0: array_t<string_t>): GraphTraversal;
      hasKeyP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasKeyP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasLabel(java.lang.String...)
      hasLabel(...arg0: string_t[]): GraphTraversal;
      hasLabel(arg0: array_t<string_t>): GraphTraversal;
      hasLabelP(...arg0: string_t[]): Promise<GraphTraversal>;
      hasLabelP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.hasValue(java.lang.Object...)
      hasValue(...arg0: object_t[]): GraphTraversal;
      hasValue(arg0: object_array_t): GraphTraversal;
      hasValueP(...arg0: object_t[]): Promise<GraphTraversal>;
      hasValueP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.id()
      id(): GraphTraversal;
      idP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inject(E...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.is(org.apache.tinkerpop.gremlin.process.traversal.P<E>)
      is(arg0: P): GraphTraversal;
      isP(arg0: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.is(java.lang.Object)
      is(arg0: object_t): GraphTraversal;
      isP(arg0: object_t): Promise<GraphTraversal>;
      // public abstract boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.isLocked()
      isLocked(): boolean;
      isLockedP(): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.iterate()
      iterate(): GraphTraversal;
      iterateP(): Promise<GraphTraversal>;
      // public default <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.key()
      key(): GraphTraversal;
      keyP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.label()
      label(): GraphTraversal;
      labelP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.limit(org.apache.tinkerpop.gremlin.process.traversal.Scope,long)
      limit(arg0: Scope, arg1: long_t): GraphTraversal;
      limitP(arg0: Scope, arg1: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.local(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.map(java.util.function.Function<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.match(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.max(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      max(arg0: Scope): GraphTraversal;
      maxP(arg0: Scope): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.max()
      max(): GraphTraversal;
      maxP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.mean(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      mean(arg0: Scope): GraphTraversal;
      meanP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.mean()
      mean(): GraphTraversal;
      meanP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.min(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      min(arg0: Scope): GraphTraversal;
      minP(arg0: Scope): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.min()
      min(): GraphTraversal;
      minP(): Promise<GraphTraversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default <M,E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.option(M,org.apache.tinkerpop.gremlin.process.traversal.Traversal<E, E2>)
      option(arg0: object_t, arg1: Traversal): GraphTraversal;
      optionP(arg0: object_t, arg1: Traversal): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.option(org.apache.tinkerpop.gremlin.process.traversal.Traversal<E, E2>)
      option(arg0: Traversal): GraphTraversal;
      optionP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.or(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
      or(...arg0: Traversal[]): GraphTraversal;
      or(arg0: array_t<Traversal>): GraphTraversal;
      orP(...arg0: Traversal[]): Promise<GraphTraversal>;
      orP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.order(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      order(arg0: Scope): GraphTraversal;
      orderP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.process.traversal.Path> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, ? extends org.apache.tinkerpop.gremlin.structure.Property<E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.property(org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality,java.lang.String,java.lang.Object,java.lang.Object...)
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): GraphTraversal;
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): GraphTraversal;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.property(java.lang.String,java.lang.Object,java.lang.Object...)
      property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): GraphTraversal;
      property(arg0: string_t, arg1: object_t, arg2: object_array_t): GraphTraversal;
      propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.range(org.apache.tinkerpop.gremlin.process.traversal.Scope,long,long)
      range(arg0: Scope, arg1: long_t, arg2: long_t): GraphTraversal;
      rangeP(arg0: Scope, arg1: long_t, arg2: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      removeStep(arg0: Step): Traversal$Admin;
      removeStepP(arg0: Step): Promise<Traversal$Admin>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(int) throws java.lang.IllegalStateException
      removeStep(arg0: integer_t): Traversal$Admin;
      removeStepP(arg0: integer_t): Promise<Traversal$Admin>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.repeat(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack(java.util.function.BiFunction<V, E, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sample(org.apache.tinkerpop.gremlin.process.traversal.Scope,int)
      sample(arg0: Scope, arg1: integer_t): GraphTraversal;
      sampleP(arg0: Scope, arg1: integer_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String...)
      select(arg0: Scope, ...arg1: string_t[]): GraphTraversal;
      select(arg0: Scope, arg1: array_t<string_t>): GraphTraversal;
      selectP(arg0: Scope, ...arg1: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: Scope, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String)
      select(arg0: Scope, arg1: string_t): GraphTraversal;
      selectP(arg0: Scope, arg1: string_t): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setEngine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine)
      setEngine(arg0: TraversalEngine): void;
      setEngineP(arg0: TraversalEngine): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setGraph(org.apache.tinkerpop.gremlin.structure.Graph)
      setGraph(arg0: Graph): void;
      setGraphP(arg0: Graph): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setParent(org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent)
      setParent(arg0: object_t): void;
      setParentP(arg0: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setSideEffects(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setStrategies(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies)
      setStrategies(arg0: TraversalStrategies): void;
      setStrategiesP(arg0: TraversalStrategies): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sideEffect(java.util.function.Consumer<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.subgraph(java.lang.String)
      subgraph(arg0: string_t): GraphTraversal;
      subgraphP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sum(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      sum(arg0: Scope): GraphTraversal;
      sumP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.lang.Double> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(org.apache.tinkerpop.gremlin.process.traversal.Scope,long)
      tail(arg0: Scope, arg1: long_t): GraphTraversal;
      tailP(arg0: Scope, arg1: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(org.apache.tinkerpop.gremlin.process.traversal.Scope)
      tail(arg0: Scope): GraphTraversal;
      tailP(arg0: Scope): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail(long)
      tail(arg0: long_t): GraphTraversal;
      tailP(arg0: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tail()
      tail(): GraphTraversal;
      tailP(): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.to(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.toE(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.toV(org.apache.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default java.util.Optional<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.union(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.until(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.until(java.util.function.Predicate<org.apache.tinkerpop.gremlin.process.traversal.Traverser<E>>)
      until(arg0: Predicate): GraphTraversal;
      untilP(arg0: Predicate): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E2> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: Scope, arg1: string_t, arg2: P): GraphTraversal;
      whereP(arg0: Scope, arg1: string_t, arg2: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      where(arg0: Scope, arg1: Traversal): GraphTraversal;
      whereP(arg0: Scope, arg1: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Scope,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: Scope, arg1: P): GraphTraversal;
      whereP(arg0: Scope, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: string_t, arg1: P): GraphTraversal;
      whereP(arg0: string_t, arg1: P): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.where(org.apache.tinkerpop.gremlin.process.traversal.P<?>)
      where(arg0: P): GraphTraversal;
      whereP(arg0: P): Promise<GraphTraversal>;
    }
    export module GraphTraversal$Admin {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
    export interface GraphTraversalSource extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource {
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<org.apache.tinkerpop.gremlin.structure.Vertex, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.addV(java.lang.Object...)
      addV(...arg0: object_t[]): GraphTraversal;
      addV(arg0: object_array_t): GraphTraversal;
      addVP(...arg0: object_t[]): Promise<GraphTraversal>;
      addVP(arg0: object_array_t): Promise<GraphTraversal>;
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.asBuilder()
      asBuilder(): GraphTraversalSource$Builder;
      asBuilderP(): Promise<GraphTraversalSource$Builder>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.asBuilder()
      asBuilder(): TraversalSource$Builder;
      asBuilderP(): Promise<TraversalSource$Builder>;
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<org.apache.tinkerpop.gremlin.structure.Edge, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.E(java.lang.Object...)
      E(...arg0: object_t[]): GraphTraversal;
      E(arg0: object_array_t): GraphTraversal;
      EP(...arg0: object_t[]): Promise<GraphTraversal>;
      EP(arg0: object_array_t): Promise<GraphTraversal>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.structure.Graph> org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.getGraph()
      getGraph(): object_t;
      getGraphP(): Promise<object_t>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.process.computer.GraphComputer> org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.getGraphComputer()
      getGraphComputer(): object_t;
      getGraphComputerP(): Promise<object_t>;
      // public abstract java.util.List<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy> org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.getStrategies()
      getStrategies(): List;
      getStrategiesP(): Promise<List>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.structure.Transaction org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.tx()
      tx(): Transaction;
      txP(): Promise<Transaction>;
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<org.apache.tinkerpop.gremlin.structure.Vertex, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.V(java.lang.Object...)
      V(...arg0: object_t[]): GraphTraversal;
      V(arg0: object_array_t): GraphTraversal;
      VP(...arg0: object_t[]): Promise<GraphTraversal>;
      VP(arg0: object_array_t): Promise<GraphTraversal>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public <S> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.withPath()
      withPath(): GraphTraversalSource$GraphTraversalSourceStub;
      withPathP(): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
      // public <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.withSack(java.util.function.Supplier<A>,java.util.function.UnaryOperator<A>)
      withSack(arg0: Supplier, arg1: UnaryOperator): GraphTraversalSource$GraphTraversalSourceStub;
      withSackP(arg0: Supplier, arg1: UnaryOperator): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
      // public <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.withSack(A,java.util.function.UnaryOperator<A>)
      withSack(arg0: object_t, arg1: UnaryOperator): GraphTraversalSource$GraphTraversalSourceStub;
      withSackP(arg0: object_t, arg1: UnaryOperator): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
      // public <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.withSack(java.util.function.Supplier<A>)
      withSack(arg0: Supplier): GraphTraversalSource$GraphTraversalSourceStub;
      withSackP(arg0: Supplier): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
      // public <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.withSack(A)
      withSack(arg0: object_t): GraphTraversalSource$GraphTraversalSourceStub;
      withSackP(arg0: object_t): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
      // public <S> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: Supplier): GraphTraversalSource$GraphTraversalSourceStub;
      withSideEffectP(arg0: string_t, arg1: Supplier): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
    }
    export module GraphTraversalSource {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.build()
        build(): GraphTraversalSource$Builder;
        buildP(): Promise<GraphTraversalSource$Builder>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.computer(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.computer.GraphComputer>)
        computer(arg0: Class): GraphTraversalSource$Builder;
        computerP(arg0: Class): Promise<GraphTraversalSource$Builder>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.computer()
        computer(): GraphTraversalSource$Builder;
        computerP(): Promise<GraphTraversalSource$Builder>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.standard()
        standard(): GraphTraversalSource$Builder;
        standardP(): Promise<GraphTraversalSource$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
    export interface GraphTraversalSource$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder {
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder.create(org.apache.tinkerpop.gremlin.structure.Graph)
      create(arg0: Graph): GraphTraversalSource;
      createP(arg0: Graph): Promise<GraphTraversalSource>;
      // public abstract C org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.create(org.apache.tinkerpop.gremlin.structure.Graph)
      create(arg0: Graph): TraversalSource;
      createP(arg0: Graph): Promise<TraversalSource>;
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder.engine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder)
      engine(arg0: TraversalEngine$Builder): GraphTraversalSource$Builder;
      engineP(arg0: TraversalEngine$Builder): Promise<GraphTraversalSource$Builder>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.engine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder)
      engine(arg0: TraversalEngine$Builder): TraversalSource$Builder;
      engineP(arg0: TraversalEngine$Builder): Promise<TraversalSource$Builder>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder.with(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy)
      with(arg0: TraversalStrategy): GraphTraversalSource$Builder;
      withP(arg0: TraversalStrategy): Promise<GraphTraversalSource$Builder>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.with(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy)
      with(arg0: TraversalStrategy): TraversalSource$Builder;
      withP(arg0: TraversalStrategy): Promise<TraversalSource$Builder>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.without(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      without(arg0: Class): TraversalSource$Builder;
      withoutP(arg0: Class): Promise<TraversalSource$Builder>;
    }
    export module GraphTraversalSource$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
    export interface GraphTraversalSource$GraphTraversalSourceStub extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<org.apache.tinkerpop.gremlin.structure.Vertex, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.addV(java.lang.Object...)
      addV(...arg0: object_t[]): GraphTraversal;
      addV(arg0: object_array_t): GraphTraversal;
      addVP(...arg0: object_t[]): Promise<GraphTraversal>;
      addVP(arg0: object_array_t): Promise<GraphTraversal>;
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<org.apache.tinkerpop.gremlin.structure.Edge, org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.E(java.lang.Object...)
      E(...arg0: object_t[]): GraphTraversal;
      E(arg0: object_array_t): GraphTraversal;
      EP(...arg0: object_t[]): Promise<GraphTraversal>;
      EP(arg0: object_array_t): Promise<GraphTraversal>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal<org.apache.tinkerpop.gremlin.structure.Vertex, org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.V(java.lang.Object...)
      V(...arg0: object_t[]): GraphTraversal;
      V(arg0: object_array_t): GraphTraversal;
      VP(...arg0: object_t[]): Promise<GraphTraversal>;
      VP(arg0: object_array_t): Promise<GraphTraversal>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.withPath()
      withPath(): GraphTraversalSource$GraphTraversalSourceStub;
      withPathP(): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
      // public <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.withSack(java.util.function.Supplier<A>,java.util.function.UnaryOperator<A>)
      withSack(arg0: Supplier, arg1: UnaryOperator): GraphTraversalSource$GraphTraversalSourceStub;
      withSackP(arg0: Supplier, arg1: UnaryOperator): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
      // public <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.withSack(A,java.util.function.UnaryOperator<A>)
      withSack(arg0: object_t, arg1: UnaryOperator): GraphTraversalSource$GraphTraversalSourceStub;
      withSackP(arg0: object_t, arg1: UnaryOperator): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
      // public <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.withSack(java.util.function.Supplier<A>)
      withSack(arg0: Supplier): GraphTraversalSource$GraphTraversalSourceStub;
      withSackP(arg0: Supplier): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
      // public <A> org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.withSack(A)
      withSack(arg0: object_t): GraphTraversalSource$GraphTraversalSourceStub;
      withSackP(arg0: object_t): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
      // public org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: Supplier): GraphTraversalSource$GraphTraversalSourceStub;
      withSideEffectP(arg0: string_t, arg1: Supplier): Promise<GraphTraversalSource$GraphTraversalSourceStub>;
    }
    export module GraphTraversalSource$GraphTraversalSourceStub {
      export interface Static {
        new (arg0: GraphTraversal$Admin, arg1: boolean_t): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.engine {
    export interface ComputerTraversalEngine extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.process.computer.GraphComputer> org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.getGraphComputer()
      getGraphComputer(): object_t;
      getGraphComputerP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.getType()
      getType(): TraversalEngine$Type;
      getTypeP(): Promise<TraversalEngine$Type>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.isComputer()
      isComputer(): boolean;
      isComputerP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.isStandard()
      isStandard(): boolean;
      isStandardP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ComputerTraversalEngine {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine.build()
        build(): ComputerTraversalEngine$Builder;
        buildP(): Promise<ComputerTraversalEngine$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.engine {
    export interface ComputerTraversalEngine$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder {
      // public org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder.computer(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.computer.GraphComputer>)
      computer(arg0: Class): ComputerTraversalEngine$Builder;
      computerP(arg0: Class): Promise<ComputerTraversalEngine$Builder>;
      // public org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder.create(org.apache.tinkerpop.gremlin.structure.Graph)
      create(arg0: Graph): ComputerTraversalEngine;
      createP(arg0: Graph): Promise<ComputerTraversalEngine>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.create(org.apache.tinkerpop.gremlin.structure.Graph)
      create(arg0: Graph): TraversalEngine;
      createP(arg0: Graph): Promise<TraversalEngine>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.util.List<java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>> org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.getWithoutStrategies()
      getWithoutStrategies(): List;
      getWithoutStrategiesP(): Promise<List>;
      // public default java.util.List<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy> org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.getWithStrategies()
      getWithStrategies(): List;
      getWithStrategiesP(): Promise<List>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ComputerTraversalEngine$Builder {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.engine {
    export interface ComputerTraversalEngine$ComputerResultStrategy extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ComputerTraversalEngine$ComputerResultStrategy {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy.instance()
        instance(): ComputerTraversalEngine$ComputerResultStrategy;
        instanceP(): Promise<ComputerTraversalEngine$ComputerResultStrategy>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.engine {
    export interface StandardTraversalEngine extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.process.computer.GraphComputer> org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.getGraphComputer()
      getGraphComputer(): object_t;
      getGraphComputerP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.getType()
      getType(): TraversalEngine$Type;
      getTypeP(): Promise<TraversalEngine$Type>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.isComputer()
      isComputer(): boolean;
      isComputerP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.isStandard()
      isStandard(): boolean;
      isStandardP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StandardTraversalEngine {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine.build()
        build(): StandardTraversalEngine$Builder;
        buildP(): Promise<StandardTraversalEngine$Builder>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine.instance()
        instance(): StandardTraversalEngine;
        instanceP(): Promise<StandardTraversalEngine>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.engine {
    export interface StandardTraversalEngine$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder {
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.create(org.apache.tinkerpop.gremlin.structure.Graph)
      create(arg0: Graph): TraversalEngine;
      createP(arg0: Graph): Promise<TraversalEngine>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.util.List<java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>> org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.getWithoutStrategies()
      getWithoutStrategies(): List;
      getWithoutStrategiesP(): Promise<List>;
      // public default java.util.List<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy> org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.getWithStrategies()
      getWithStrategies(): List;
      getWithStrategiesP(): Promise<List>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StandardTraversalEngine$Builder {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Operator extends Java.java.lang.Enum,Java.java.util.function_.BinaryOperator {
      // public default <V> java.util.function.BiFunction<T, U, V> java.util.function.BiFunction.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public abstract R java.util.function.BiFunction.apply(T,U)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Operator {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Operator org.apache.tinkerpop.gremlin.process.traversal.Operator.valueOf(java.lang.String)
        valueOf(arg0: string_t): Operator;
        valueOfP(arg0: string_t): Promise<Operator>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Operator[] org.apache.tinkerpop.gremlin.process.traversal.Operator.values()
        values(): Operator[];
        valuesP(): Promise<Operator[]>;
        sum: Operator;
        minus: Operator;
        mult: Operator;
        div: Operator;
        min: Operator;
        max: Operator;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Order extends Java.java.lang.Enum,Java.java.util.Comparator {
      // public abstract int java.util.Comparator.compare(T,T)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Order org.apache.tinkerpop.gremlin.process.traversal.Order.reversed()
      reversed(): Order;
      reversedP(): Promise<Order>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): Comparator;
      reversedP(): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: Comparator): Comparator;
      thenComparingP(arg0: Function, arg1: Comparator): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): Comparator;
      thenComparingP(arg0: Function): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: Comparator): Comparator;
      thenComparingP(arg0: Comparator): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): Comparator;
      thenComparingDoubleP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): Comparator;
      thenComparingIntP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): Comparator;
      thenComparingLongP(arg0: object_t): Promise<Comparator>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Order {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Order org.apache.tinkerpop.gremlin.process.traversal.Order.valueOf(java.lang.String)
        valueOf(arg0: string_t): Order;
        valueOfP(arg0: string_t): Promise<Order>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Order[] org.apache.tinkerpop.gremlin.process.traversal.Order.values()
        values(): Order[];
        valuesP(): Promise<Order[]>;
        incr: Order;
        decr: Order;
        keyIncr: Order;
        valueIncr: Order;
        keyDecr: Order;
        valueDecr: Order;
        shuffle: Order;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface P extends Java.java.lang.Object,Java.java.util.function_.Predicate {
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.and(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      and(arg0: Traversal): P;
      andP(arg0: Traversal): Promise<P>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.and(java.util.function.Predicate<? super V>)
      and(arg0: Predicate): P;
      andP(arg0: Predicate): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.clone()
      clone(): P;
      cloneP(): Promise<P>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.P.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.function.BiPredicate<V, V> org.apache.tinkerpop.gremlin.process.traversal.P.getBiPredicate()
      getBiPredicate(): BiPredicate;
      getBiPredicateP(): Promise<BiPredicate>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public <S,E> java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>> org.apache.tinkerpop.gremlin.process.traversal.P.getTraversals()
      getTraversals(): List;
      getTraversalsP(): Promise<List>;
      // public V org.apache.tinkerpop.gremlin.process.traversal.P.getValue()
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.negate()
      negate(): P;
      negateP(): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.or(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      or(arg0: Traversal): P;
      orP(arg0: Traversal): Promise<P>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.or(java.util.function.Predicate<? super V>)
      or(arg0: Predicate): P;
      orP(arg0: Predicate): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.P.setValue(V)
      setValue(arg0: object_t): void;
      setValueP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module P {
      export interface Static {
        new (arg0: BiPredicate, arg1: object_t): org.apache.tinkerpop.gremlin.process.traversal.P;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.between(V,V)
        between(arg0: object_t, arg1: object_t): P;
        betweenP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.eq(V)
        eq(arg0: object_t): P;
        eqP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.gt(V)
        gt(arg0: object_t): P;
        gtP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.gte(V)
        gte(arg0: object_t): P;
        gteP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.inside(V,V)
        inside(arg0: object_t, arg1: object_t): P;
        insideP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.lt(V)
        lt(arg0: object_t): P;
        ltP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.lte(V)
        lte(arg0: object_t): P;
        lteP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.neq(V)
        neq(arg0: object_t): P;
        neqP(arg0: object_t): Promise<P>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.P<E> org.apache.tinkerpop.gremlin.process.traversal.P.not(org.apache.tinkerpop.gremlin.process.traversal.Traversal<S, E>)
        not(arg0: Traversal): P;
        notP(arg0: Traversal): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.not(org.apache.tinkerpop.gremlin.process.traversal.P<V>)
        not(arg0: P): P;
        notP(arg0: P): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.outside(V,V)
        outside(arg0: object_t, arg1: object_t): P;
        outsideP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.P org.apache.tinkerpop.gremlin.process.traversal.P.test(java.util.function.BiPredicate,java.lang.Object)
        test(arg0: BiPredicate, arg1: object_t): P;
        testP(arg0: BiPredicate, arg1: object_t): Promise<P>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.P<E> org.apache.tinkerpop.gremlin.process.traversal.P.traversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal<S, E>)
        traversal(arg0: Traversal): P;
        traversalP(arg0: Traversal): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.within(java.util.Collection<V>)
        within(arg0: Collection): P;
        withinP(arg0: Collection): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.within(V...)
        within(...arg0: object_t[]): P;
        within(arg0: object_array_t): P;
        withinP(...arg0: object_t[]): Promise<P>;
        withinP(arg0: object_array_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.without(java.util.Collection<V>)
        without(arg0: Collection): P;
        withoutP(arg0: Collection): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.without(V...)
        without(...arg0: object_t[]): P;
        without(arg0: object_array_t): P;
        withoutP(...arg0: object_t[]): Promise<P>;
        withoutP(arg0: object_array_t): Promise<P>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Path extends Java.java.lang.Object {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Path.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.clone()
      clone(): Path;
      cloneP(): Promise<Path>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.extend(java.lang.Object,java.lang.String...)
      extend(arg0: object_t, ...arg1: string_t[]): Path;
      extend(arg0: object_t, arg1: array_t<string_t>): Path;
      extendP(arg0: object_t, ...arg1: string_t[]): Promise<Path>;
      extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Path>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.extend(java.lang.Object,java.util.Set<java.lang.String>)
      extend(arg0: object_t, arg1: Set): Path;
      extendP(arg0: object_t, arg1: Set): Promise<Path>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Path.forEach(java.util.function.BiConsumer<java.lang.Object, java.util.Set<java.lang.String>>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Path.forEach(java.util.function.Consumer<java.lang.Object>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Path.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Path.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Path.hasLabel(java.lang.String)
      hasLabel(arg0: string_t): boolean;
      hasLabelP(arg0: string_t): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Path.isSimple()
      isSimple(): boolean;
      isSimpleP(): Promise<boolean>;
      // public abstract java.util.List<java.util.Set<java.lang.String>> org.apache.tinkerpop.gremlin.process.traversal.Path.labels()
      labels(): List;
      labelsP(): Promise<List>;
      // public abstract java.util.List<java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.Path.objects()
      objects(): List;
      objectsP(): Promise<List>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.Path.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.stream.Stream<org.javatuples.Pair<java.lang.Object, java.util.Set<java.lang.String>>> org.apache.tinkerpop.gremlin.process.traversal.Path.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
    }
    export module Path {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Path$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Path$Exceptions {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions.stepWithProvidedLabelDoesNotExist(java.lang.String)
        stepWithProvidedLabelDoesNotExist(arg0: string_t): object_t;
        stepWithProvidedLabelDoesNotExistP(arg0: string_t): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Scope extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Scope org.apache.tinkerpop.gremlin.process.traversal.Scope.opposite()
      opposite(): Scope;
      oppositeP(): Promise<Scope>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Scope {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Scope org.apache.tinkerpop.gremlin.process.traversal.Scope.valueOf(java.lang.String)
        valueOf(arg0: string_t): Scope;
        valueOfP(arg0: string_t): Promise<Scope>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Scope[] org.apache.tinkerpop.gremlin.process.traversal.Scope.values()
        values(): Scope[];
        valuesP(): Promise<Scope[]>;
        global: Scope;
        local: Scope;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Step extends Java.java.util.Iterator {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<S, E> org.apache.tinkerpop.gremlin.process.traversal.Step.clone()
      clone(): Step;
      cloneP(): Promise<Step>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Step.equals(org.apache.tinkerpop.gremlin.process.traversal.Step,boolean)
      equals(arg0: Step, arg1: boolean_t): boolean;
      equalsP(arg0: Step, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.Step.getLabels()
      getLabels(): Set;
      getLabelsP(): Promise<Set>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?> org.apache.tinkerpop.gremlin.process.traversal.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<?, S> org.apache.tinkerpop.gremlin.process.traversal.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B> org.apache.tinkerpop.gremlin.process.traversal.Step.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setNextStep(org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setPreviousStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      setTraversal(arg0: Traversal$Admin): void;
      setTraversalP(arg0: Traversal$Admin): Promise<void>;
    }
    export module Step {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface AbstractStep extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.Step {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone()
      clone(): AbstractStep;
      cloneP(): Promise<AbstractStep>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<S, E> org.apache.tinkerpop.gremlin.process.traversal.Step.clone()
      clone(): Step;
      cloneP(): Promise<Step>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Step.equals(org.apache.tinkerpop.gremlin.process.traversal.Step,boolean)
      equals(arg0: Step, arg1: boolean_t): boolean;
      equalsP(arg0: Step, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.Step.getLabels()
      getLabels(): Set;
      getLabelsP(): Promise<Set>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?> org.apache.tinkerpop.gremlin.process.traversal.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<?, S> org.apache.tinkerpop.gremlin.process.traversal.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B> org.apache.tinkerpop.gremlin.process.traversal.Step.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.next()
      next(): Traverser;
      nextP(): Promise<Traverser>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setNextStep(org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setPreviousStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      setTraversal(arg0: Traversal$Admin): void;
      setTraversalP(arg0: Traversal$Admin): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractStep {
      export interface Static {
        new (arg0: Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface BulkSet extends Java.java.util.AbstractSet,Java.java.util.Set {
      // public boolean org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet.add(S,long)
      add(arg0: object_t, arg1: long_t): boolean;
      addP(arg0: object_t, arg1: long_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet.forEach(java.util.function.BiConsumer<S, java.lang.Long>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public long org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet.get(S)
      get(arg0: object_t): longValue_t;
      getP(arg0: object_t): Promise<longValue_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public long org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet.longSize()
      longSize(): longValue_t;
      longSizeP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: Predicate): boolean;
      removeIfP(arg0: Predicate): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public int org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet.uniqueSize()
      uniqueSize(): number;
      uniqueSizeP(): Promise<number>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module BulkSet {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface CollectingBarrierStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep.barrierConsumer(org.apache.tinkerpop.gremlin.process.traversal.traverser.util.TraverserSet<S>)
      barrierConsumer(arg0: object_t): void;
      barrierConsumerP(arg0: object_t): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep<S> org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep.clone()
      clone(): CollectingBarrierStep;
      cloneP(): Promise<CollectingBarrierStep>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone()
      clone(): AbstractStep;
      cloneP(): Promise<AbstractStep>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<S, E> org.apache.tinkerpop.gremlin.process.traversal.Step.clone()
      clone(): Step;
      cloneP(): Promise<Step>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Step.equals(org.apache.tinkerpop.gremlin.process.traversal.Step,boolean)
      equals(arg0: Step, arg1: boolean_t): boolean;
      equalsP(arg0: Step, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.Step.getLabels()
      getLabels(): Set;
      getLabelsP(): Promise<Set>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?> org.apache.tinkerpop.gremlin.process.traversal.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<?, S> org.apache.tinkerpop.gremlin.process.traversal.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B> org.apache.tinkerpop.gremlin.process.traversal.Step.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.next()
      next(): Traverser;
      nextP(): Promise<Traverser>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<S> org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep.processNextStart()
      processNextStart(): Traverser;
      processNextStartP(): Promise<Traverser>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setNextStep(org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setPreviousStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      setTraversal(arg0: Traversal$Admin): void;
      setTraversalP(arg0: Traversal$Admin): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module CollectingBarrierStep {
      export interface Static {
        new (arg0: Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface ComputerAwareStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep.clone()
      clone(): ComputerAwareStep;
      cloneP(): Promise<ComputerAwareStep>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone()
      clone(): AbstractStep;
      cloneP(): Promise<AbstractStep>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<S, E> org.apache.tinkerpop.gremlin.process.traversal.Step.clone()
      clone(): Step;
      cloneP(): Promise<Step>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Step.equals(org.apache.tinkerpop.gremlin.process.traversal.Step,boolean)
      equals(arg0: Step, arg1: boolean_t): boolean;
      equalsP(arg0: Step, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.Step.getLabels()
      getLabels(): Set;
      getLabelsP(): Promise<Set>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?> org.apache.tinkerpop.gremlin.process.traversal.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<?, S> org.apache.tinkerpop.gremlin.process.traversal.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B> org.apache.tinkerpop.gremlin.process.traversal.Step.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.next()
      next(): Traverser;
      nextP(): Promise<Traverser>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep.onEngine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine)
      onEngine(arg0: TraversalEngine): void;
      onEngineP(arg0: TraversalEngine): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setNextStep(org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setPreviousStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      setTraversal(arg0: Traversal$Admin): void;
      setTraversalP(arg0: Traversal$Admin): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ComputerAwareStep {
      export interface Static {
        new (arg0: Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface ComputerAwareStep$EndStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone()
      clone(): AbstractStep;
      cloneP(): Promise<AbstractStep>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<S, E> org.apache.tinkerpop.gremlin.process.traversal.Step.clone()
      clone(): Step;
      cloneP(): Promise<Step>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Step.equals(org.apache.tinkerpop.gremlin.process.traversal.Step,boolean)
      equals(arg0: Step, arg1: boolean_t): boolean;
      equalsP(arg0: Step, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.Step.getLabels()
      getLabels(): Set;
      getLabelsP(): Promise<Set>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?> org.apache.tinkerpop.gremlin.process.traversal.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<?, S> org.apache.tinkerpop.gremlin.process.traversal.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B> org.apache.tinkerpop.gremlin.process.traversal.Step.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.next()
      next(): Traverser;
      nextP(): Promise<Traverser>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep.onEngine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine)
      onEngine(arg0: TraversalEngine): void;
      onEngineP(arg0: TraversalEngine): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setNextStep(org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setPreviousStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      setTraversal(arg0: Traversal$Admin): void;
      setTraversalP(arg0: Traversal$Admin): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ComputerAwareStep$EndStep {
      export interface Static {
        new (arg0: ComputerAwareStep, arg1: Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface ElementFunctionComparator extends Java.java.lang.Object,Java.java.util.Comparator {
      // public int org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator.compare(org.apache.tinkerpop.gremlin.structure.Element,org.apache.tinkerpop.gremlin.structure.Element)
      compare(arg0: Element, arg1: Element): number;
      compareP(arg0: Element, arg1: Element): Promise<number>;
      // public abstract int java.util.Comparator.compare(T,T)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.function.Function<org.apache.tinkerpop.gremlin.structure.Element, V> org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator.getElementFunction()
      getElementFunction(): Function;
      getElementFunctionP(): Promise<Function>;
      // public java.util.Comparator<V> org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator.getValueComparator()
      getValueComparator(): Comparator;
      getValueComparatorP(): Promise<Comparator>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): Comparator;
      reversedP(): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: Comparator): Comparator;
      thenComparingP(arg0: Function, arg1: Comparator): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): Comparator;
      thenComparingP(arg0: Function): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: Comparator): Comparator;
      thenComparingP(arg0: Comparator): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): Comparator;
      thenComparingDoubleP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): Comparator;
      thenComparingIntP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): Comparator;
      thenComparingLongP(arg0: object_t): Promise<Comparator>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ElementFunctionComparator {
      export interface Static {
        new (arg0: Function, arg1: Comparator): org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface ElementValueComparator extends Java.java.lang.Object,Java.java.util.Comparator {
      // public int org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator.compare(org.apache.tinkerpop.gremlin.structure.Element,org.apache.tinkerpop.gremlin.structure.Element)
      compare(arg0: Element, arg1: Element): number;
      compareP(arg0: Element, arg1: Element): Promise<number>;
      // public abstract int java.util.Comparator.compare(T,T)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.String org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator.getPropertyKey()
      getPropertyKey(): string;
      getPropertyKeyP(): Promise<string>;
      // public java.util.Comparator<V> org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator.getValueComparator()
      getValueComparator(): Comparator;
      getValueComparatorP(): Promise<Comparator>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): Comparator;
      reversedP(): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: Comparator): Comparator;
      thenComparingP(arg0: Function, arg1: Comparator): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): Comparator;
      thenComparingP(arg0: Function): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: Comparator): Comparator;
      thenComparingP(arg0: Comparator): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): Comparator;
      thenComparingDoubleP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): Comparator;
      thenComparingIntP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): Comparator;
      thenComparingLongP(arg0: object_t): Promise<Comparator>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ElementValueComparator {
      export interface Static {
        new (arg0: string_t, arg1: Comparator): org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface EmptyPath extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.Path {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Path.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath.clone()
      clone(): EmptyPath;
      cloneP(): Promise<EmptyPath>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.clone()
      clone(): Path;
      cloneP(): Promise<Path>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.extend(java.lang.Object,java.lang.String...)
      extend(arg0: object_t, ...arg1: string_t[]): Path;
      extend(arg0: object_t, arg1: array_t<string_t>): Path;
      extendP(arg0: object_t, ...arg1: string_t[]): Promise<Path>;
      extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Path>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.extend(java.lang.Object,java.util.Set<java.lang.String>)
      extend(arg0: object_t, arg1: Set): Path;
      extendP(arg0: object_t, arg1: Set): Promise<Path>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Path.forEach(java.util.function.BiConsumer<java.lang.Object, java.util.Set<java.lang.String>>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Path.forEach(java.util.function.Consumer<java.lang.Object>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Path.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Path.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Path.hasLabel(java.lang.String)
      hasLabel(arg0: string_t): boolean;
      hasLabelP(arg0: string_t): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Path.isSimple()
      isSimple(): boolean;
      isSimpleP(): Promise<boolean>;
      // public abstract java.util.List<java.util.Set<java.lang.String>> org.apache.tinkerpop.gremlin.process.traversal.Path.labels()
      labels(): List;
      labelsP(): Promise<List>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract java.util.List<java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.Path.objects()
      objects(): List;
      objectsP(): Promise<List>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.Path.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.stream.Stream<org.javatuples.Pair<java.lang.Object, java.util.Set<java.lang.String>>> org.apache.tinkerpop.gremlin.process.traversal.Path.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyPath {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath.instance()
        instance(): Path;
        instanceP(): Promise<Path>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface EmptyStep extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.Step {
      // public default void org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent.addGlobalChild(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      addGlobalChild(arg0: Traversal$Admin): void;
      addGlobalChildP(arg0: Traversal$Admin): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent.addLocalChild(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      addLocalChild(arg0: Traversal$Admin): void;
      addLocalChildP(arg0: Traversal$Admin): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?> org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent.asStep()
      asStep(): Step;
      asStepP(): Promise<Step>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep.clone()
      clone(): EmptyStep;
      cloneP(): Promise<EmptyStep>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<S, E> org.apache.tinkerpop.gremlin.process.traversal.Step.clone()
      clone(): Step;
      cloneP(): Promise<Step>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Step.equals(org.apache.tinkerpop.gremlin.process.traversal.Step,boolean)
      equals(arg0: Step, arg1: boolean_t): boolean;
      equalsP(arg0: Step, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default <S,E> java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>> org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent.getGlobalChildren()
      getGlobalChildren(): List;
      getGlobalChildrenP(): Promise<List>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.Step.getLabels()
      getLabels(): Set;
      getLabelsP(): Promise<Set>;
      // public default <S,E> java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>> org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent.getLocalChildren()
      getLocalChildren(): List;
      getLocalChildrenP(): Promise<List>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?> org.apache.tinkerpop.gremlin.process.traversal.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<?, S> org.apache.tinkerpop.gremlin.process.traversal.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent.getSelfAndChildRequirements(org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement...)
      getSelfAndChildRequirements(...arg0: object_t[]): Set;
      getSelfAndChildRequirements(arg0: object_array_t): Set;
      getSelfAndChildRequirementsP(...arg0: object_t[]): Promise<Set>;
      getSelfAndChildRequirementsP(arg0: object_array_t): Promise<Set>;
      // public abstract <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B> org.apache.tinkerpop.gremlin.process.traversal.Step.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default <S,E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent.integrateChild(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      integrateChild(arg0: Traversal$Admin): Traversal$Admin;
      integrateChildP(arg0: Traversal$Admin): Promise<Traversal$Admin>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<E> org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep.next()
      next(): Traverser;
      nextP(): Promise<Traverser>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setNextStep(org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setPreviousStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      setTraversal(arg0: Traversal$Admin): void;
      setTraversalP(arg0: Traversal$Admin): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyStep {
      export interface Static {
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.Step<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep.instance()
        instance(): Step;
        instanceP(): Promise<Step>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface ExpandableStepIterator extends Java.java.lang.Object,Java.java.util.Iterator {
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator.add(org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<S>)
      add(arg0: Traverser$Admin): void;
      addP(arg0: Traverser$Admin): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator.add(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<S>>)
      add(arg0: Iterator): void;
      addP(arg0: Iterator): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<S> org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator.next()
      next(): Traverser$Admin;
      nextP(): Promise<Traverser$Admin>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ExpandableStepIterator {
      export interface Static {
        new (arg0: Step): org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface HasContainer extends Java.java.lang.Object,Java.java.util.function_.Predicate {
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.clone()
      clone(): HasContainer;
      cloneP(): Promise<HasContainer>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.function.BiPredicate<?, ?> org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.getBiPredicate()
      getBiPredicate(): BiPredicate;
      getBiPredicateP(): Promise<BiPredicate>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.String org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.getKey()
      getKey(): string;
      getKeyP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<?> org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.getPredicate()
      getPredicate(): P;
      getPredicateP(): Promise<P>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.getValue()
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.setKey(java.lang.String)
      setKey(arg0: string_t): void;
      setKeyP(arg0: string_t): Promise<void>;
      // public boolean org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.test(org.apache.tinkerpop.gremlin.structure.Element)
      test(arg0: Element): boolean;
      testP(arg0: Element): Promise<boolean>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module HasContainer {
      export interface Static {
        new (arg0: string_t, arg1: P): org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;
        // public static org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer[] org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.makeHasContainers(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.P<?>)
        makeHasContainers(arg0: string_t, arg1: P): HasContainer[];
        makeHasContainersP(arg0: string_t, arg1: P): Promise<HasContainer[]>;
        // public static boolean org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.testAll(org.apache.tinkerpop.gremlin.structure.Element,java.util.List<org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer>)
        testAll(arg0: Element, arg1: List): boolean;
        testAllP(arg0: Element, arg1: List): Promise<boolean>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface ImmutablePath extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.Path {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Path.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath.clone()
      clone(): ImmutablePath;
      cloneP(): Promise<ImmutablePath>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.clone()
      clone(): Path;
      cloneP(): Promise<Path>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.extend(java.lang.Object,java.lang.String...)
      extend(arg0: object_t, ...arg1: string_t[]): Path;
      extend(arg0: object_t, arg1: array_t<string_t>): Path;
      extendP(arg0: object_t, ...arg1: string_t[]): Promise<Path>;
      extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Path>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.extend(java.lang.Object,java.util.Set<java.lang.String>)
      extend(arg0: object_t, arg1: Set): Path;
      extendP(arg0: object_t, arg1: Set): Promise<Path>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Path.forEach(java.util.function.BiConsumer<java.lang.Object, java.util.Set<java.lang.String>>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Path.forEach(java.util.function.Consumer<java.lang.Object>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Path.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Path.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Path.hasLabel(java.lang.String)
      hasLabel(arg0: string_t): boolean;
      hasLabelP(arg0: string_t): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Path.isSimple()
      isSimple(): boolean;
      isSimpleP(): Promise<boolean>;
      // public abstract java.util.List<java.util.Set<java.lang.String>> org.apache.tinkerpop.gremlin.process.traversal.Path.labels()
      labels(): List;
      labelsP(): Promise<List>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract java.util.List<java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.Path.objects()
      objects(): List;
      objectsP(): Promise<List>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.Path.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.stream.Stream<org.javatuples.Pair<java.lang.Object, java.util.Set<java.lang.String>>> org.apache.tinkerpop.gremlin.process.traversal.Path.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ImmutablePath {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath.make()
        make(): Path;
        makeP(): Promise<Path>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface MapHelper extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MapHelper {
      export interface Static {
        // public static <T,U> void org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper.incr(java.util.Map<T, java.util.List<U>>,T,U)
        incr(arg0: Map, arg1: object_t, arg2: object_t): void;
        incrP(arg0: Map, arg1: object_t, arg2: object_t): Promise<void>;
        // public static <T> void org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper.incr(java.util.Map<T, java.lang.Double>,T,java.lang.Double)
        incr(arg0: Map, arg1: object_t, arg2: double_t): void;
        incrP(arg0: Map, arg1: object_t, arg2: double_t): Promise<void>;
        // public static <T> void org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper.incr(java.util.Map<T, java.lang.Long>,T,java.lang.Long)
        incr(arg0: Map, arg1: object_t, arg2: long_t): void;
        incrP(arg0: Map, arg1: object_t, arg2: long_t): Promise<void>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface MutablePath extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.Path {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Path.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath.clone()
      clone(): MutablePath;
      cloneP(): Promise<MutablePath>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.clone()
      clone(): Path;
      cloneP(): Promise<Path>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.extend(java.lang.Object,java.lang.String...)
      extend(arg0: object_t, ...arg1: string_t[]): Path;
      extend(arg0: object_t, arg1: array_t<string_t>): Path;
      extendP(arg0: object_t, ...arg1: string_t[]): Promise<Path>;
      extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Path>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.extend(java.lang.Object,java.util.Set<java.lang.String>)
      extend(arg0: object_t, arg1: Set): Path;
      extendP(arg0: object_t, arg1: Set): Promise<Path>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Path.forEach(java.util.function.BiConsumer<java.lang.Object, java.util.Set<java.lang.String>>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Path.forEach(java.util.function.Consumer<java.lang.Object>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Path.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Path.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Path.hasLabel(java.lang.String)
      hasLabel(arg0: string_t): boolean;
      hasLabelP(arg0: string_t): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Path.isSimple()
      isSimple(): boolean;
      isSimpleP(): Promise<boolean>;
      // public abstract java.util.List<java.util.Set<java.lang.String>> org.apache.tinkerpop.gremlin.process.traversal.Path.labels()
      labels(): List;
      labelsP(): Promise<List>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract java.util.List<java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.Path.objects()
      objects(): List;
      objectsP(): Promise<List>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.Path.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.stream.Stream<org.javatuples.Pair<java.lang.Object, java.util.Set<java.lang.String>>> org.apache.tinkerpop.gremlin.process.traversal.Path.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MutablePath {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath.make()
        make(): Path;
        makeP(): Promise<Path>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface NoOpBarrierStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep.barrierConsumer(org.apache.tinkerpop.gremlin.process.traversal.traverser.util.TraverserSet<S>)
      barrierConsumer(arg0: object_t): void;
      barrierConsumerP(arg0: object_t): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep<S> org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep.clone()
      clone(): CollectingBarrierStep;
      cloneP(): Promise<CollectingBarrierStep>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone()
      clone(): AbstractStep;
      cloneP(): Promise<AbstractStep>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<S, E> org.apache.tinkerpop.gremlin.process.traversal.Step.clone()
      clone(): Step;
      cloneP(): Promise<Step>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Step.equals(org.apache.tinkerpop.gremlin.process.traversal.Step,boolean)
      equals(arg0: Step, arg1: boolean_t): boolean;
      equalsP(arg0: Step, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.Step.getLabels()
      getLabels(): Set;
      getLabelsP(): Promise<Set>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?> org.apache.tinkerpop.gremlin.process.traversal.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<?, S> org.apache.tinkerpop.gremlin.process.traversal.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B> org.apache.tinkerpop.gremlin.process.traversal.Step.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.next()
      next(): Traverser;
      nextP(): Promise<Traverser>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<S> org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep.processNextStart()
      processNextStart(): Traverser;
      processNextStartP(): Promise<Traverser>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setNextStep(org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setPreviousStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      setTraversal(arg0: Traversal$Admin): void;
      setTraversalP(arg0: Traversal$Admin): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module NoOpBarrierStep {
      export interface Static {
        new (arg0: Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface PathIdentityStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone()
      clone(): AbstractStep;
      cloneP(): Promise<AbstractStep>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<S, E> org.apache.tinkerpop.gremlin.process.traversal.Step.clone()
      clone(): Step;
      cloneP(): Promise<Step>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Step.equals(org.apache.tinkerpop.gremlin.process.traversal.Step,boolean)
      equals(arg0: Step, arg1: boolean_t): boolean;
      equalsP(arg0: Step, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.Step.getLabels()
      getLabels(): Set;
      getLabelsP(): Promise<Set>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?> org.apache.tinkerpop.gremlin.process.traversal.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<?, S> org.apache.tinkerpop.gremlin.process.traversal.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B> org.apache.tinkerpop.gremlin.process.traversal.Step.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.next()
      next(): Traverser;
      nextP(): Promise<Traverser>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setNextStep(org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setPreviousStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      setTraversal(arg0: Traversal$Admin): void;
      setTraversalP(arg0: Traversal$Admin): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module PathIdentityStep {
      export interface Static {
        new (arg0: Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface ReducingBarrierStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep.clone()
      clone(): ReducingBarrierStep;
      cloneP(): Promise<ReducingBarrierStep>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone()
      clone(): AbstractStep;
      cloneP(): Promise<AbstractStep>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<S, E> org.apache.tinkerpop.gremlin.process.traversal.Step.clone()
      clone(): Step;
      cloneP(): Promise<Step>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Step.equals(org.apache.tinkerpop.gremlin.process.traversal.Step,boolean)
      equals(arg0: Step, arg1: boolean_t): boolean;
      equalsP(arg0: Step, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.Step.getLabels()
      getLabels(): Set;
      getLabelsP(): Promise<Set>;
      // public org.apache.tinkerpop.gremlin.process.computer.MapReduce org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep.getMapReduce()
      getMapReduce(): MapReduce;
      getMapReduceP(): Promise<MapReduce>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?> org.apache.tinkerpop.gremlin.process.traversal.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<?, S> org.apache.tinkerpop.gremlin.process.traversal.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B> org.apache.tinkerpop.gremlin.process.traversal.Step.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.next()
      next(): Traverser;
      nextP(): Promise<Traverser>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep.onEngine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine)
      onEngine(arg0: TraversalEngine): void;
      onEngineP(arg0: TraversalEngine): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<E> org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep.processNextStart()
      processNextStart(): Traverser;
      processNextStartP(): Promise<Traverser>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep.setBiFunction(java.util.function.BiFunction<E, org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>, E>)
      setBiFunction(arg0: BiFunction): void;
      setBiFunctionP(arg0: BiFunction): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setNextStep(org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setPreviousStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep.setSeedSupplier(java.util.function.Supplier<E>)
      setSeedSupplier(arg0: Supplier): void;
      setSeedSupplierP(arg0: Supplier): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      setTraversal(arg0: Traversal$Admin): void;
      setTraversalP(arg0: Traversal$Admin): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ReducingBarrierStep {
      export interface Static {
        new (arg0: Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep;
        REDUCING: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface ReducingBarrierStep$DefaultMapReduce extends Java.java.lang.Object {
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.addResultToMemory(org.apache.tinkerpop.gremlin.process.computer.Memory$Admin,java.util.Iterator<org.apache.tinkerpop.gremlin.process.computer.KeyValue<RK, RV>>)
      addResultToMemory(arg0: Memory$Admin, arg1: Iterator): void;
      addResultToMemoryP(arg0: Memory$Admin, arg1: Iterator): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.computer.MapReduce<MK, MV, RK, RV, R> org.apache.tinkerpop.gremlin.process.computer.util.StaticMapReduce.clone()
      clone(): MapReduce;
      cloneP(): Promise<MapReduce>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.computer.util.StaticMapReduce.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.combine(MK,java.util.Iterator<MV>,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<RK, RV>)
      combine(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      combineP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public boolean org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.doStage(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      doStage(arg0: MapReduce$Stage): boolean;
      doStageP(arg0: MapReduce$Stage): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.generateFinalResult(java.util.Iterator)
      generateFinalResult(arg0: Iterator): object_t;
      generateFinalResultP(arg0: Iterator): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.util.Optional<java.util.Comparator<MK>> org.apache.tinkerpop.gremlin.process.computer.MapReduce.getMapKeySort()
      getMapKeySort(): object_t;
      getMapKeySortP(): Promise<object_t>;
      // public java.lang.String org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.getMemoryKey()
      getMemoryKey(): string;
      getMemoryKeyP(): Promise<string>;
      // public default java.util.Optional<java.util.Comparator<RK>> org.apache.tinkerpop.gremlin.process.computer.MapReduce.getReduceKeySort()
      getReduceKeySort(): object_t;
      getReduceKeySortP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.loadState(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.commons.configuration.Configuration)
      loadState(arg0: Graph, arg1: object_t): void;
      loadStateP(arg0: Graph, arg1: object_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.map(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter<org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject, java.lang.Object>)
      map(arg0: Vertex, arg1: MapReduce$MapEmitter): void;
      mapP(arg0: Vertex, arg1: MapReduce$MapEmitter): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.reduce(org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject,java.util.Iterator<java.lang.Object>,org.apache.tinkerpop.gremlin.process.computer.MapReduce.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter<org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject, java.lang.Object>)
      reduce(arg0: MapReduce$NullObject, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      reduceP(arg0: MapReduce$NullObject, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.reduce(java.lang.Object,java.util.Iterator,org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter)
      reduce(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): void;
      reduceP(arg0: object_t, arg1: Iterator, arg2: MapReduce$ReduceEmitter): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.storeState(org.apache.commons.configuration.Configuration)
      storeState(arg0: object_t): void;
      storeStateP(arg0: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.workerEnd(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      workerEnd(arg0: MapReduce$Stage): void;
      workerEndP(arg0: MapReduce$Stage): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce.workerStart(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      workerStart(arg0: MapReduce$Stage): void;
      workerStartP(arg0: MapReduce$Stage): Promise<void>;
    }
    export module ReducingBarrierStep$DefaultMapReduce {
      export interface Static {
        new (arg0: Supplier, arg1: BiFunction): org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce;
        MAP_REDUCE: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface ReducingBarrierStep$FinalGet extends Java.java.lang.Object {
      // public abstract A org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet.getFinal()
      getFinal(): object_t;
      getFinalP(): Promise<object_t>;
    }
    export module ReducingBarrierStep$FinalGet {
      export interface Static {
        // public static <A> A org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet.tryFinalGet(java.lang.Object)
        tryFinalGet(arg0: object_t): object_t;
        tryFinalGetP(arg0: object_t): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface SupplyingBarrierStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep.clone()
      clone(): SupplyingBarrierStep;
      cloneP(): Promise<SupplyingBarrierStep>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone()
      clone(): AbstractStep;
      cloneP(): Promise<AbstractStep>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<S, E> org.apache.tinkerpop.gremlin.process.traversal.Step.clone()
      clone(): Step;
      cloneP(): Promise<Step>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Step.equals(org.apache.tinkerpop.gremlin.process.traversal.Step,boolean)
      equals(arg0: Step, arg1: boolean_t): boolean;
      equalsP(arg0: Step, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.Step.getLabels()
      getLabels(): Set;
      getLabelsP(): Promise<Set>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?> org.apache.tinkerpop.gremlin.process.traversal.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Step<?, S> org.apache.tinkerpop.gremlin.process.traversal.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B> org.apache.tinkerpop.gremlin.process.traversal.Step.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<E> org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.next()
      next(): Traverser;
      nextP(): Promise<Traverser>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traverser<E> org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep.processNextStart()
      processNextStart(): Traverser;
      processNextStartP(): Promise<Traverser>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setNextStep(org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setPreviousStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Step.setTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      setTraversal(arg0: Traversal$Admin): void;
      setTraversalP(arg0: Traversal$Admin): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module SupplyingBarrierStep {
      export interface Static {
        new (arg0: Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface TraversalComparator extends Java.java.lang.Object,Java.java.util.Comparator {
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator.clone() throws java.lang.CloneNotSupportedException
      clone(): TraversalComparator;
      cloneP(): Promise<TraversalComparator>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract int java.util.Comparator.compare(T,T)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): Comparator;
      reversedP(): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: Comparator): Comparator;
      thenComparingP(arg0: Function, arg1: Comparator): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): Comparator;
      thenComparingP(arg0: Function): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: Comparator): Comparator;
      thenComparingP(arg0: Comparator): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): Comparator;
      thenComparingDoubleP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): Comparator;
      thenComparingIntP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): Comparator;
      thenComparingLongP(arg0: object_t): Promise<Comparator>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalComparator {
      export interface Static {
        new (arg0: Traversal$Admin, arg1: Comparator): org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.step.util {
    export interface Tree extends Java.java.util.HashMap {
      // public void org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree.addTree(org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree<T>)
      addTree(arg0: Tree): void;
      addTreeP(arg0: Tree): Promise<void>;
      // public abstract void java.util.Map.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.HashMap.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      compute(arg0: object_t, arg1: BiFunction): object_t;
      computeP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsent(arg0: object_t, arg1: Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresent(arg0: object_t, arg1: BiFunction): object_t;
      computeIfPresentP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySet(): Set;
      entrySetP(): Promise<Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.List<T> org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree.getLeafObjects()
      getLeafObjects(): List;
      getLeafObjectsP(): Promise<List>;
      // public java.util.List<org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree<T>> org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree.getLeafTrees()
      getLeafTrees(): List;
      getLeafTreesP(): Promise<List>;
      // public java.util.List<T> org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree.getObjectsAtDepth(int)
      getObjectsAtDepth(arg0: integer_t): List;
      getObjectsAtDepthP(arg0: integer_t): Promise<List>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public java.util.List<org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree<T>> org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree.getTreesAtDepth(int)
      getTreesAtDepth(arg0: integer_t): List;
      getTreesAtDepthP(arg0: integer_t): Promise<List>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public boolean org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree.isLeaf()
      isLeaf(): boolean;
      isLeafP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySet(): Set;
      keySetP(): Promise<Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      merge(arg0: object_t, arg1: object_t, arg2: BiFunction): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: BiFunction): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map.put(K,V)
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAll(arg0: Map): void;
      putAllP(arg0: Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAll(arg0: BiFunction): void;
      replaceAllP(arg0: BiFunction): Promise<void>;
      // public abstract int java.util.Map.size()
      size(): number;
      sizeP(): Promise<number>;
      // public java.util.List<org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree<T>> org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree.splitParents()
      splitParents(): List;
      splitParentsP(): Promise<List>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      values(): Collection;
      valuesP(): Promise<Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Tree {
      export interface Static {
        new (...arg0: Map$Entry[]): org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree;
        new (...arg0: object_t[]): org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree;
        new (): org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
    export interface ConjunctionStrategy extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ConjunctionStrategy {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy.instance()
        instance(): ConjunctionStrategy;
        instanceP(): Promise<ConjunctionStrategy>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
    export interface ElementIdStrategy extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.function.Supplier<java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy.getIdMaker()
      getIdMaker(): Supplier;
      getIdMakerP(): Promise<Supplier>;
      // public java.lang.String org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy.getIdPropertyKey()
      getIdPropertyKey(): string;
      getIdPropertyKeyP(): Promise<string>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ElementIdStrategy {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy.build()
        build(): ElementIdStrategy$Builder;
        buildP(): Promise<ElementIdStrategy$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
    export interface ElementIdStrategy$Builder extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder.create()
      create(): ElementIdStrategy;
      createP(): Promise<ElementIdStrategy>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder.idMaker(java.util.function.Supplier<java.lang.Object>)
      idMaker(arg0: Supplier): ElementIdStrategy$Builder;
      idMakerP(arg0: Supplier): Promise<ElementIdStrategy$Builder>;
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder.idPropertyKey(java.lang.String)
      idPropertyKey(arg0: string_t): ElementIdStrategy$Builder;
      idPropertyKeyP(arg0: string_t): Promise<ElementIdStrategy$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ElementIdStrategy$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
    export interface EventStrategy extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EventStrategy {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy.build()
        build(): EventStrategy$Builder;
        buildP(): Promise<EventStrategy$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
    export interface EventStrategy$Builder extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder.addListener(org.apache.tinkerpop.gremlin.process.traversal.step.util.event.MutationListener)
      addListener(arg0: object_t): EventStrategy$Builder;
      addListenerP(arg0: object_t): Promise<EventStrategy$Builder>;
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder.create()
      create(): EventStrategy;
      createP(): Promise<EventStrategy>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EventStrategy$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
    export interface EventStrategy$EventStrategyCallback extends Java.java.lang.Object,Java.java.util.function_.Consumer {
      // public void org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback.accept(org.apache.tinkerpop.gremlin.process.traversal.step.util.event.Event)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EventStrategy$EventStrategyCallback {
      export interface Static {
        new (arg0: EventStrategy, arg1: object_t): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
    export interface PartitionStrategy extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.String org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy.getPartitionKey()
      getPartitionKey(): string;
      getPartitionKeyP(): Promise<string>;
      // public java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy.getReadPartitions()
      getReadPartitions(): Set;
      getReadPartitionsP(): Promise<Set>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
      // public java.lang.String org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy.getWritePartition()
      getWritePartition(): string;
      getWritePartitionP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module PartitionStrategy {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy.build()
        build(): PartitionStrategy$Builder;
        buildP(): Promise<PartitionStrategy$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
    export interface PartitionStrategy$Builder extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder.addReadPartition(java.lang.String)
      addReadPartition(arg0: string_t): PartitionStrategy$Builder;
      addReadPartitionP(arg0: string_t): Promise<PartitionStrategy$Builder>;
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder.create()
      create(): PartitionStrategy;
      createP(): Promise<PartitionStrategy>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder.partitionKey(java.lang.String)
      partitionKey(arg0: string_t): PartitionStrategy$Builder;
      partitionKeyP(arg0: string_t): Promise<PartitionStrategy$Builder>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder.writePartition(java.lang.String)
      writePartition(arg0: string_t): PartitionStrategy$Builder;
      writePartitionP(arg0: string_t): Promise<PartitionStrategy$Builder>;
    }
    export module PartitionStrategy$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
    export interface SubgraphStrategy extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traversal<org.apache.tinkerpop.gremlin.structure.Edge, ?> org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy.getEdgeCriterion()
      getEdgeCriterion(): Traversal;
      getEdgeCriterionP(): Promise<Traversal>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traversal<org.apache.tinkerpop.gremlin.structure.Vertex, ?> org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy.getVertexCriterion()
      getVertexCriterion(): Traversal;
      getVertexCriterionP(): Promise<Traversal>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module SubgraphStrategy {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy.build()
        build(): SubgraphStrategy$Builder;
        buildP(): Promise<SubgraphStrategy$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
    export interface SubgraphStrategy$Builder extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder.create()
      create(): SubgraphStrategy;
      createP(): Promise<SubgraphStrategy>;
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder.edgeCriterion(org.apache.tinkerpop.gremlin.process.traversal.Traversal<org.apache.tinkerpop.gremlin.structure.Edge, ?>)
      edgeCriterion(arg0: Traversal): SubgraphStrategy$Builder;
      edgeCriterionP(arg0: Traversal): Promise<SubgraphStrategy$Builder>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder.vertexCriterion(org.apache.tinkerpop.gremlin.process.traversal.Traversal<org.apache.tinkerpop.gremlin.structure.Vertex, ?>)
      vertexCriterion(arg0: Traversal): SubgraphStrategy$Builder;
      vertexCriterionP(arg0: Traversal): Promise<SubgraphStrategy$Builder>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module SubgraphStrategy$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.verification {
    export interface ComputerVerificationException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traversal org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException.getTraversal()
      getTraversal(): Traversal;
      getTraversalP(): Promise<Traversal>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ComputerVerificationException {
      export interface Static {
        new (arg0: string_t, arg1: Traversal): org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.verification {
    export interface ComputerVerificationStrategy extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ComputerVerificationStrategy {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy.instance()
        instance(): ComputerVerificationStrategy;
        instanceP(): Promise<ComputerVerificationStrategy>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.verification {
    export interface LambdaRestrictionStrategy extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module LambdaRestrictionStrategy {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy.instance()
        instance(): LambdaRestrictionStrategy;
        instanceP(): Promise<LambdaRestrictionStrategy>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.strategy.verification {
    export interface ReadOnlyStrategy extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ReadOnlyStrategy {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy.instance()
        instance(): ReadOnlyStrategy;
        instanceP(): Promise<ReadOnlyStrategy>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Traversal extends Java.java.util.Iterator {
      // public default org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public default <C> C org.apache.tinkerpop.gremlin.process.traversal.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void org.apache.tinkerpop.gremlin.process.traversal.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: Class, arg1: Consumer): void;
      forEachRemainingP(arg0: Class, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public default java.util.Optional<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
    }
    export module Traversal {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Traversal$Admin extends Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal {
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(int,org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      addStep(arg0: integer_t, arg1: Step): Traversal$Admin;
      addStepP(arg0: integer_t, arg1: Step): Promise<Traversal$Admin>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, E2>) throws java.lang.IllegalStateException
      addStep(arg0: Step): Traversal$Admin;
      addStepP(arg0: Step): Promise<Traversal$Admin>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.applyStrategies() throws java.lang.IllegalStateException
      applyStrategies(): void;
      applyStrategiesP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.clone()
      clone(): Traversal$Admin;
      cloneP(): Promise<Traversal$Admin>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.equals(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
      equals(arg0: Traversal$Admin): boolean;
      equalsP(arg0: Traversal$Admin): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <C> C org.apache.tinkerpop.gremlin.process.traversal.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void org.apache.tinkerpop.gremlin.process.traversal.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: Class, arg1: Consumer): void;
      forEachRemainingP(arg0: Class, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<?, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEndStep()
      getEndStep(): Step;
      getEndStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEngine()
      getEngine(): TraversalEngine;
      getEngineP(): Promise<TraversalEngine>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.structure.Graph> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getGraph()
      getGraph(): object_t;
      getGraphP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getParent()
      getParent(): object_t;
      getParentP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<S, ?> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStartStep()
      getStartStep(): Step;
      getStartStepP(): Promise<Step>;
      // public abstract java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Step> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSteps()
      getSteps(): List;
      getStepsP(): Promise<List>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStrategies()
      getStrategies(): TraversalStrategies;
      getStrategiesP(): Promise<TraversalStrategies>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserGenerator()
      getTraverserGenerator(): TraverserGenerator;
      getTraverserGeneratorP(): Promise<TraverserGenerator>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserRequirements()
      getTraverserRequirements(): Set;
      getTraverserRequirementsP(): Promise<Set>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.isLocked()
      isLocked(): boolean;
      isLockedP(): Promise<boolean>;
      // public default <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      removeStep(arg0: Step): Traversal$Admin;
      removeStepP(arg0: Step): Promise<Traversal$Admin>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(int) throws java.lang.IllegalStateException
      removeStep(arg0: integer_t): Traversal$Admin;
      removeStepP(arg0: integer_t): Promise<Traversal$Admin>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setEngine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine)
      setEngine(arg0: TraversalEngine): void;
      setEngineP(arg0: TraversalEngine): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setGraph(org.apache.tinkerpop.gremlin.structure.Graph)
      setGraph(arg0: Graph): void;
      setGraphP(arg0: Graph): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setParent(org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent)
      setParent(arg0: object_t): void;
      setParentP(arg0: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setSideEffects(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setStrategies(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies)
      setStrategies(arg0: TraversalStrategies): void;
      setStrategiesP(arg0: TraversalStrategies): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public default java.util.Optional<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
    }
    export module Traversal$Admin {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Traversal$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Traversal$Exceptions {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions.traversalIsLocked()
        traversalIsLocked(): object_t;
        traversalIsLockedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions.traversalIsNotReversible()
        traversalIsNotReversible(): object_t;
        traversalIsNotReversibleP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalEngine extends Java.java.lang.Object {
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.process.computer.GraphComputer> org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.getGraphComputer()
      getGraphComputer(): object_t;
      getGraphComputerP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.getType()
      getType(): TraversalEngine$Type;
      getTypeP(): Promise<TraversalEngine$Type>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.isComputer()
      isComputer(): boolean;
      isComputerP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.isStandard()
      isStandard(): boolean;
      isStandardP(): Promise<boolean>;
    }
    export module TraversalEngine {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalEngine$Builder extends Java.java.lang.Object {
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.create(org.apache.tinkerpop.gremlin.structure.Graph)
      create(arg0: Graph): TraversalEngine;
      createP(arg0: Graph): Promise<TraversalEngine>;
      // public default java.util.List<java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>> org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.getWithoutStrategies()
      getWithoutStrategies(): List;
      getWithoutStrategiesP(): Promise<List>;
      // public default java.util.List<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy> org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.getWithStrategies()
      getWithStrategies(): List;
      getWithStrategiesP(): Promise<List>;
    }
    export module TraversalEngine$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalEngine$Type extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalEngine$Type {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type.valueOf(java.lang.String)
        valueOf(arg0: string_t): TraversalEngine$Type;
        valueOfP(arg0: string_t): Promise<TraversalEngine$Type>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type[] org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type.values()
        values(): TraversalEngine$Type[];
        valuesP(): Promise<TraversalEngine$Type[]>;
        STANDARD: TraversalEngine$Type;
        COMPUTER: TraversalEngine$Type;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalSideEffects extends Java.java.lang.Object {
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.clone()
      clone(): TraversalSideEffects;
      cloneP(): Promise<TraversalSideEffects>;
      // public default <V> void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.forEach(java.util.function.BiConsumer<java.lang.String, V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract <V> java.util.Optional<V> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <V> V org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getOrCreate(java.lang.String,java.util.function.Supplier<V>)
      getOrCreate(arg0: string_t, arg1: Supplier): object_t;
      getOrCreateP(arg0: string_t, arg1: Supplier): Promise<object_t>;
      // public abstract <V> java.util.Optional<java.util.function.Supplier<V>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getRegisteredSupplier(java.lang.String)
      getRegisteredSupplier(arg0: string_t): object_t;
      getRegisteredSupplierP(arg0: string_t): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.Supplier<S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getSackInitialValue()
      getSackInitialValue(): object_t;
      getSackInitialValueP(): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.UnaryOperator<S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getSackSplitOperator()
      getSackSplitOperator(): object_t;
      getSackSplitOperatorP(): Promise<object_t>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.mergeInto(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
      mergeInto(arg0: TraversalSideEffects): void;
      mergeIntoP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.registerSupplier(java.lang.String,java.util.function.Supplier)
      registerSupplier(arg0: string_t, arg1: Supplier): void;
      registerSupplierP(arg0: string_t, arg1: Supplier): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.registerSupplierIfAbsent(java.lang.String,java.util.function.Supplier)
      registerSupplierIfAbsent(arg0: string_t, arg1: Supplier): void;
      registerSupplierIfAbsentP(arg0: string_t, arg1: Supplier): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.remove(java.lang.String)
      remove(arg0: string_t): void;
      removeP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.setLocalVertex(org.apache.tinkerpop.gremlin.structure.Vertex)
      setLocalVertex(arg0: Vertex): void;
      setLocalVertexP(arg0: Vertex): Promise<void>;
      // public abstract <S> void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.setSack(java.util.function.Supplier<S>,java.util.Optional<java.util.function.UnaryOperator<S>>)
      setSack(arg0: Supplier, arg1: object_t): void;
      setSackP(arg0: Supplier, arg1: object_t): Promise<void>;
    }
    export module TraversalSideEffects {
      export interface Static {
        SIDE_EFFECTS: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalSideEffects$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalSideEffects$Exceptions {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions.dataTypeOfSideEffectValueNotSupported(java.lang.Object)
        dataTypeOfSideEffectValueNotSupported(arg0: object_t): object_t;
        dataTypeOfSideEffectValueNotSupportedP(arg0: object_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions.sideEffectKeyCanNotBeEmpty()
        sideEffectKeyCanNotBeEmpty(): object_t;
        sideEffectKeyCanNotBeEmptyP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions.sideEffectKeyCanNotBeNull()
        sideEffectKeyCanNotBeNull(): object_t;
        sideEffectKeyCanNotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions.sideEffectValueCanNotBeNull()
        sideEffectValueCanNotBeNull(): object_t;
        sideEffectValueCanNotBeNullP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalSource extends Java.java.lang.Object {
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.asBuilder()
      asBuilder(): TraversalSource$Builder;
      asBuilderP(): Promise<TraversalSource$Builder>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.structure.Graph> org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.getGraph()
      getGraph(): object_t;
      getGraphP(): Promise<object_t>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.process.computer.GraphComputer> org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.getGraphComputer()
      getGraphComputer(): object_t;
      getGraphComputerP(): Promise<object_t>;
      // public abstract java.util.List<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy> org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.getStrategies()
      getStrategies(): List;
      getStrategiesP(): Promise<List>;
    }
    export module TraversalSource {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalSource$Builder extends Java.java.lang.Object {
      // public abstract C org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.create(org.apache.tinkerpop.gremlin.structure.Graph)
      create(arg0: Graph): TraversalSource;
      createP(arg0: Graph): Promise<TraversalSource>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.engine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder)
      engine(arg0: TraversalEngine$Builder): TraversalSource$Builder;
      engineP(arg0: TraversalEngine$Builder): Promise<TraversalSource$Builder>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.with(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy)
      with(arg0: TraversalStrategy): TraversalSource$Builder;
      withP(arg0: TraversalStrategy): Promise<TraversalSource$Builder>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.without(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      without(arg0: Class): TraversalSource$Builder;
      withoutP(arg0: Class): Promise<TraversalSource$Builder>;
    }
    export module TraversalSource$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalStrategies extends Java.java.lang.Object {
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.addStrategies(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy<?>...)
      addStrategies(...arg0: TraversalStrategy[]): TraversalStrategies;
      addStrategies(arg0: array_t<TraversalStrategy>): TraversalStrategies;
      addStrategiesP(...arg0: TraversalStrategy[]): Promise<TraversalStrategies>;
      addStrategiesP(arg0: array_t<TraversalStrategy>): Promise<TraversalStrategies>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.applyStrategies(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      applyStrategies(arg0: Traversal$Admin): void;
      applyStrategiesP(arg0: Traversal$Admin): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.clone()
      clone(): TraversalStrategies;
      cloneP(): Promise<TraversalStrategies>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserGeneratorFactory org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.getTraverserGeneratorFactory()
      getTraverserGeneratorFactory(): object_t;
      getTraverserGeneratorFactoryP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.removeStrategies(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>...)
      removeStrategies(...arg0: Class[]): TraversalStrategies;
      removeStrategies(arg0: array_t<Class>): TraversalStrategies;
      removeStrategiesP(...arg0: Class[]): Promise<TraversalStrategies>;
      removeStrategiesP(arg0: array_t<Class>): Promise<TraversalStrategies>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.setTraverserGeneratorFactory(org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserGeneratorFactory)
      setTraverserGeneratorFactory(arg0: object_t): void;
      setTraverserGeneratorFactoryP(arg0: object_t): Promise<void>;
      // public abstract java.util.List<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy<?>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.toList()
      toList(): List;
      toListP(): Promise<List>;
    }
    export module TraversalStrategies {
      export interface Static {
        // public static java.util.List<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy<?>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.sortStrategies(java.util.List<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy<?>>)
        sortStrategies(arg0: List): List;
        sortStrategiesP(arg0: List): Promise<List>;
        // public static void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.visit(java.util.Map<java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>, java.util.Set<java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>>>,java.util.List<java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>>,java.util.Set<java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>>,java.util.List<java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>>,java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
        visit(arg0: Map, arg1: List, arg2: Set, arg3: List, arg4: Class): void;
        visitP(arg0: Map, arg1: List, arg2: Set, arg3: List, arg4: Class): Promise<void>;
        STRATEGY_CATEGORIES: List;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalStrategies$GlobalCache extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalStrategies$GlobalCache {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache;
        // public static org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache.getStrategies(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.Graph>)
        getStrategies(arg0: Class): TraversalStrategies;
        getStrategiesP(arg0: Class): Promise<TraversalStrategies>;
        // public static void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache.registerStrategies(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.Graph>,org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies)
        registerStrategies(arg0: Class, arg1: TraversalStrategies): void;
        registerStrategiesP(arg0: Class, arg1: TraversalStrategies): Promise<void>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalStrategy extends Java.java.lang.Object {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
    }
    export module TraversalStrategy {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalStrategy$DecorationStrategy extends Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
    }
    export module TraversalStrategy$DecorationStrategy {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalStrategy$FinalizationStrategy extends Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
    }
    export module TraversalStrategy$FinalizationStrategy {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalStrategy$OptimizationStrategy extends Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
    }
    export module TraversalStrategy$OptimizationStrategy {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalStrategy$VendorOptimizationStrategy extends Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
    }
    export module TraversalStrategy$VendorOptimizationStrategy {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraversalStrategy$VerificationStrategy extends Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.apply(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      apply(arg0: Traversal$Admin): void;
      applyP(arg0: Traversal$Admin): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.compareTo(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>)
      compareTo(arg0: Class): number;
      compareToP(arg0: Class): Promise<number>;
      // public default java.lang.Class<S> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.getTraversalCategory()
      getTraversalCategory(): Class;
      getTraversalCategoryP(): Promise<Class>;
    }
    export module TraversalStrategy$VerificationStrategy {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Traverser extends Java.java.lang.Object {
      // public default org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<T> org.apache.tinkerpop.gremlin.process.traversal.Traverser.asAdmin()
      asAdmin(): Traverser$Admin;
      asAdminP(): Promise<Traverser$Admin>;
      // public abstract long org.apache.tinkerpop.gremlin.process.traversal.Traverser.bulk()
      bulk(): longValue_t;
      bulkP(): Promise<longValue_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Traverser<T> org.apache.tinkerpop.gremlin.process.traversal.Traverser.clone()
      clone(): Traverser;
      cloneP(): Promise<Traverser>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.Traverser.compareTo(org.apache.tinkerpop.gremlin.process.traversal.Traverser<T>) throws java.lang.ClassCastException
      compareTo(arg0: Traverser): number;
      compareToP(arg0: Traverser): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.Traverser.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public abstract T org.apache.tinkerpop.gremlin.process.traversal.Traverser.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public abstract int org.apache.tinkerpop.gremlin.process.traversal.Traverser.loops()
      loops(): number;
      loopsP(): Promise<number>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Traverser.path(java.lang.String)
      path(arg0: string_t): object_t;
      pathP(arg0: string_t): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Traverser.path()
      path(): Path;
      pathP(): Promise<Path>;
      // public abstract <S> void org.apache.tinkerpop.gremlin.process.traversal.Traverser.sack(S)
      sack(arg0: object_t): void;
      sackP(arg0: object_t): Promise<void>;
      // public abstract <S> S org.apache.tinkerpop.gremlin.process.traversal.Traverser.sack()
      sack(): object_t;
      sackP(): Promise<object_t>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traverser.sideEffects(java.lang.String,java.lang.Object)
      sideEffects(arg0: string_t, arg1: object_t): void;
      sideEffectsP(arg0: string_t, arg1: object_t): Promise<void>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Traverser.sideEffects(java.lang.String)
      sideEffects(arg0: string_t): object_t;
      sideEffectsP(arg0: string_t): Promise<object_t>;
    }
    export module Traverser {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface Traverser$Admin extends Java.org.apache.tinkerpop.gremlin.process.traversal.Traverser,Java.org.apache.tinkerpop.gremlin.structure.util.Attachable {
      // public default org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<T> org.apache.tinkerpop.gremlin.process.traversal.Traverser.asAdmin()
      asAdmin(): Traverser$Admin;
      asAdminP(): Promise<Traverser$Admin>;
      // public default V org.apache.tinkerpop.gremlin.structure.util.Attachable.attach(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<V>, V>) throws java.lang.IllegalStateException
      attach(arg0: Function): object_t;
      attachP(arg0: Function): Promise<object_t>;
      // public abstract long org.apache.tinkerpop.gremlin.process.traversal.Traverser.bulk()
      bulk(): longValue_t;
      bulkP(): Promise<longValue_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Traverser<T> org.apache.tinkerpop.gremlin.process.traversal.Traverser.clone()
      clone(): Traverser;
      cloneP(): Promise<Traverser>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.Traverser.compareTo(org.apache.tinkerpop.gremlin.process.traversal.Traverser<T>) throws java.lang.ClassCastException
      compareTo(arg0: Traverser): number;
      compareToP(arg0: Traverser): Promise<number>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.Traverser.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<T> org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.detach()
      detach(): Traverser$Admin;
      detachP(): Promise<Traverser$Admin>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.util.Attachable.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.getStepId()
      getStepId(): string;
      getStepIdP(): Promise<string>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.incrLoops(java.lang.String)
      incrLoops(arg0: string_t): void;
      incrLoopsP(arg0: string_t): Promise<void>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.isHalted()
      isHalted(): boolean;
      isHaltedP(): Promise<boolean>;
      // public abstract int org.apache.tinkerpop.gremlin.process.traversal.Traverser.loops()
      loops(): number;
      loopsP(): Promise<number>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.merge(org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<?>)
      merge(arg0: Traverser$Admin): void;
      mergeP(arg0: Traverser$Admin): Promise<void>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Traverser.path(java.lang.String)
      path(arg0: string_t): object_t;
      pathP(arg0: string_t): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Traverser.path()
      path(): Path;
      pathP(): Promise<Path>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.resetLoops()
      resetLoops(): void;
      resetLoopsP(): Promise<void>;
      // public abstract <S> void org.apache.tinkerpop.gremlin.process.traversal.Traverser.sack(S)
      sack(arg0: object_t): void;
      sackP(arg0: object_t): Promise<void>;
      // public abstract <S> S org.apache.tinkerpop.gremlin.process.traversal.Traverser.sack()
      sack(): object_t;
      sackP(): Promise<object_t>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.set(T)
      set(arg0: object_t): void;
      setP(arg0: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.setBulk(long)
      setBulk(arg0: long_t): void;
      setBulkP(arg0: long_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.setSideEffects(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.setStepId(java.lang.String)
      setStepId(arg0: string_t): void;
      setStepIdP(arg0: string_t): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traverser.sideEffects(java.lang.String,java.lang.Object)
      sideEffects(arg0: string_t, arg1: object_t): void;
      sideEffectsP(arg0: string_t, arg1: object_t): Promise<void>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Traverser.sideEffects(java.lang.String)
      sideEffects(arg0: string_t): object_t;
      sideEffectsP(arg0: string_t): Promise<object_t>;
      // public abstract <R> org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<R> org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.split(R,org.apache.tinkerpop.gremlin.process.traversal.Step<T, R>)
      split(arg0: object_t, arg1: Step): Traverser$Admin;
      splitP(arg0: object_t, arg1: Step): Promise<Traverser$Admin>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<T> org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.split()
      split(): Traverser$Admin;
      splitP(): Promise<Traverser$Admin>;
    }
    export module Traverser$Admin {
      export interface Static {
        HALT: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal {
    export interface TraverserGenerator extends Java.java.lang.Object {
      // public abstract <S> org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<S> org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator.generate(S,org.apache.tinkerpop.gremlin.process.traversal.Step<S, ?>,long)
      generate(arg0: object_t, arg1: Step, arg2: long_t): Traverser$Admin;
      generateP(arg0: object_t, arg1: Step, arg2: long_t): Promise<Traverser$Admin>;
      // public default <S> java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<S>> org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator.generateIterator(java.util.Iterator<S>,org.apache.tinkerpop.gremlin.process.traversal.Step<S, ?>,long)
      generateIterator(arg0: Iterator, arg1: Step, arg2: long_t): Iterator;
      generateIteratorP(arg0: Iterator, arg1: Step, arg2: long_t): Promise<Iterator>;
      // public abstract java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator.getProvidedRequirements()
      getProvidedRequirements(): Set;
      getProvidedRequirementsP(): Promise<Set>;
    }
    export module TraverserGenerator {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface AndP extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP {
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.and(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      and(arg0: Traversal): P;
      andP(arg0: Traversal): Promise<P>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.and(java.util.function.Predicate<? super V>)
      and(arg0: Predicate): P;
      andP(arg0: Predicate): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP<V> org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP.clone()
      clone(): ConjunctionP;
      cloneP(): Promise<ConjunctionP>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.AndP<V> org.apache.tinkerpop.gremlin.process.traversal.util.AndP.clone()
      clone(): AndP;
      cloneP(): Promise<AndP>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.clone()
      clone(): P;
      cloneP(): Promise<P>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.P.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.function.BiPredicate<V, V> org.apache.tinkerpop.gremlin.process.traversal.P.getBiPredicate()
      getBiPredicate(): BiPredicate;
      getBiPredicateP(): Promise<BiPredicate>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.List<org.apache.tinkerpop.gremlin.process.traversal.P<V>> org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP.getPredicates()
      getPredicates(): List;
      getPredicatesP(): Promise<List>;
      // public <S,E> java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>> org.apache.tinkerpop.gremlin.process.traversal.P.getTraversals()
      getTraversals(): List;
      getTraversalsP(): Promise<List>;
      // public V org.apache.tinkerpop.gremlin.process.traversal.P.getValue()
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.negate()
      negate(): P;
      negateP(): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.or(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      or(arg0: Traversal): P;
      orP(arg0: Traversal): Promise<P>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.or(java.util.function.Predicate<? super V>)
      or(arg0: Predicate): P;
      orP(arg0: Predicate): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.P.setValue(V)
      setValue(arg0: object_t): void;
      setValueP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AndP {
      export interface Static {
        new (arg0: P, ...arg1: P[]): org.apache.tinkerpop.gremlin.process.traversal.util.AndP;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.between(V,V)
        between(arg0: object_t, arg1: object_t): P;
        betweenP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.eq(V)
        eq(arg0: object_t): P;
        eqP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.gt(V)
        gt(arg0: object_t): P;
        gtP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.gte(V)
        gte(arg0: object_t): P;
        gteP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.inside(V,V)
        inside(arg0: object_t, arg1: object_t): P;
        insideP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.lt(V)
        lt(arg0: object_t): P;
        ltP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.lte(V)
        lte(arg0: object_t): P;
        lteP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.neq(V)
        neq(arg0: object_t): P;
        neqP(arg0: object_t): Promise<P>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.P<E> org.apache.tinkerpop.gremlin.process.traversal.P.not(org.apache.tinkerpop.gremlin.process.traversal.Traversal<S, E>)
        not(arg0: Traversal): P;
        notP(arg0: Traversal): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.not(org.apache.tinkerpop.gremlin.process.traversal.P<V>)
        not(arg0: P): P;
        notP(arg0: P): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.outside(V,V)
        outside(arg0: object_t, arg1: object_t): P;
        outsideP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.P org.apache.tinkerpop.gremlin.process.traversal.P.test(java.util.function.BiPredicate,java.lang.Object)
        test(arg0: BiPredicate, arg1: object_t): P;
        testP(arg0: BiPredicate, arg1: object_t): Promise<P>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.P<E> org.apache.tinkerpop.gremlin.process.traversal.P.traversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal<S, E>)
        traversal(arg0: Traversal): P;
        traversalP(arg0: Traversal): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.within(java.util.Collection<V>)
        within(arg0: Collection): P;
        withinP(arg0: Collection): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.within(V...)
        within(...arg0: object_t[]): P;
        within(arg0: object_array_t): P;
        withinP(...arg0: object_t[]): Promise<P>;
        withinP(arg0: object_array_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.without(java.util.Collection<V>)
        without(arg0: Collection): P;
        withoutP(arg0: Collection): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.without(V...)
        without(...arg0: object_t[]): P;
        without(arg0: object_array_t): P;
        withoutP(...arg0: object_t[]): Promise<P>;
        withoutP(arg0: object_array_t): Promise<P>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface ConjunctionP extends Java.org.apache.tinkerpop.gremlin.process.traversal.P {
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.and(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      and(arg0: Traversal): P;
      andP(arg0: Traversal): Promise<P>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.and(java.util.function.Predicate<? super V>)
      and(arg0: Predicate): P;
      andP(arg0: Predicate): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP<V> org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP.clone()
      clone(): ConjunctionP;
      cloneP(): Promise<ConjunctionP>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.clone()
      clone(): P;
      cloneP(): Promise<P>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.P.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.function.BiPredicate<V, V> org.apache.tinkerpop.gremlin.process.traversal.P.getBiPredicate()
      getBiPredicate(): BiPredicate;
      getBiPredicateP(): Promise<BiPredicate>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.List<org.apache.tinkerpop.gremlin.process.traversal.P<V>> org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP.getPredicates()
      getPredicates(): List;
      getPredicatesP(): Promise<List>;
      // public <S,E> java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>> org.apache.tinkerpop.gremlin.process.traversal.P.getTraversals()
      getTraversals(): List;
      getTraversalsP(): Promise<List>;
      // public V org.apache.tinkerpop.gremlin.process.traversal.P.getValue()
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.negate()
      negate(): P;
      negateP(): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.or(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      or(arg0: Traversal): P;
      orP(arg0: Traversal): Promise<P>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.or(java.util.function.Predicate<? super V>)
      or(arg0: Predicate): P;
      orP(arg0: Predicate): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.P.setValue(V)
      setValue(arg0: object_t): void;
      setValueP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ConjunctionP {
      export interface Static {
        new (arg0: P, ...arg1: P[]): org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.between(V,V)
        between(arg0: object_t, arg1: object_t): P;
        betweenP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.eq(V)
        eq(arg0: object_t): P;
        eqP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.gt(V)
        gt(arg0: object_t): P;
        gtP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.gte(V)
        gte(arg0: object_t): P;
        gteP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.inside(V,V)
        inside(arg0: object_t, arg1: object_t): P;
        insideP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.lt(V)
        lt(arg0: object_t): P;
        ltP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.lte(V)
        lte(arg0: object_t): P;
        lteP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.neq(V)
        neq(arg0: object_t): P;
        neqP(arg0: object_t): Promise<P>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.P<E> org.apache.tinkerpop.gremlin.process.traversal.P.not(org.apache.tinkerpop.gremlin.process.traversal.Traversal<S, E>)
        not(arg0: Traversal): P;
        notP(arg0: Traversal): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.not(org.apache.tinkerpop.gremlin.process.traversal.P<V>)
        not(arg0: P): P;
        notP(arg0: P): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.outside(V,V)
        outside(arg0: object_t, arg1: object_t): P;
        outsideP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.P org.apache.tinkerpop.gremlin.process.traversal.P.test(java.util.function.BiPredicate,java.lang.Object)
        test(arg0: BiPredicate, arg1: object_t): P;
        testP(arg0: BiPredicate, arg1: object_t): Promise<P>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.P<E> org.apache.tinkerpop.gremlin.process.traversal.P.traversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal<S, E>)
        traversal(arg0: Traversal): P;
        traversalP(arg0: Traversal): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.within(java.util.Collection<V>)
        within(arg0: Collection): P;
        withinP(arg0: Collection): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.within(V...)
        within(...arg0: object_t[]): P;
        within(arg0: object_array_t): P;
        withinP(...arg0: object_t[]): Promise<P>;
        withinP(arg0: object_array_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.without(java.util.Collection<V>)
        without(arg0: Collection): P;
        withoutP(arg0: Collection): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.without(V...)
        without(...arg0: object_t[]): P;
        without(arg0: object_array_t): P;
        withoutP(...arg0: object_t[]): Promise<P>;
        withoutP(arg0: object_array_t): Promise<P>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface DefaultTraversal extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin {
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(int,org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      addStep(arg0: integer_t, arg1: Step): Traversal$Admin;
      addStepP(arg0: integer_t, arg1: Step): Promise<Traversal$Admin>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, E2>) throws java.lang.IllegalStateException
      addStep(arg0: Step): Traversal$Admin;
      addStepP(arg0: Step): Promise<Traversal$Admin>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.applyStrategies() throws java.lang.IllegalStateException
      applyStrategies(): void;
      applyStrategiesP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal.clone()
      clone(): DefaultTraversal;
      cloneP(): Promise<DefaultTraversal>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.clone()
      clone(): Traversal$Admin;
      cloneP(): Promise<Traversal$Admin>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.equals(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
      equals(arg0: Traversal$Admin): boolean;
      equalsP(arg0: Traversal$Admin): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <C> C org.apache.tinkerpop.gremlin.process.traversal.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void org.apache.tinkerpop.gremlin.process.traversal.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: Class, arg1: Consumer): void;
      forEachRemainingP(arg0: Class, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<?, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEndStep()
      getEndStep(): Step;
      getEndStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEngine()
      getEngine(): TraversalEngine;
      getEngineP(): Promise<TraversalEngine>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.structure.Graph> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getGraph()
      getGraph(): object_t;
      getGraphP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getParent()
      getParent(): object_t;
      getParentP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<S, ?> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStartStep()
      getStartStep(): Step;
      getStartStepP(): Promise<Step>;
      // public abstract java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Step> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSteps()
      getSteps(): List;
      getStepsP(): Promise<List>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStrategies()
      getStrategies(): TraversalStrategies;
      getStrategiesP(): Promise<TraversalStrategies>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserGenerator()
      getTraverserGenerator(): TraverserGenerator;
      getTraverserGeneratorP(): Promise<TraverserGenerator>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserRequirements()
      getTraverserRequirements(): Set;
      getTraverserRequirementsP(): Promise<Set>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.isLocked()
      isLocked(): boolean;
      isLockedP(): Promise<boolean>;
      // public default <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      removeStep(arg0: Step): Traversal$Admin;
      removeStepP(arg0: Step): Promise<Traversal$Admin>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(int) throws java.lang.IllegalStateException
      removeStep(arg0: integer_t): Traversal$Admin;
      removeStepP(arg0: integer_t): Promise<Traversal$Admin>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setEngine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine)
      setEngine(arg0: TraversalEngine): void;
      setEngineP(arg0: TraversalEngine): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setGraph(org.apache.tinkerpop.gremlin.structure.Graph)
      setGraph(arg0: Graph): void;
      setGraphP(arg0: Graph): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setParent(org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent)
      setParent(arg0: object_t): void;
      setParentP(arg0: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setSideEffects(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setStrategies(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies)
      setStrategies(arg0: TraversalStrategies): void;
      setStrategiesP(arg0: TraversalStrategies): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default java.util.Optional<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DefaultTraversal {
      export interface Static {
        new (arg0: Graph): org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal;
        new (): org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface DefaultTraversalSideEffects extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects {
      // public org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects.clone()
      clone(): DefaultTraversalSideEffects;
      cloneP(): Promise<DefaultTraversalSideEffects>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.clone()
      clone(): TraversalSideEffects;
      cloneP(): Promise<TraversalSideEffects>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <V> void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.forEach(java.util.function.BiConsumer<java.lang.String, V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract <V> java.util.Optional<V> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default <V> V org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getOrCreate(java.lang.String,java.util.function.Supplier<V>)
      getOrCreate(arg0: string_t, arg1: Supplier): object_t;
      getOrCreateP(arg0: string_t, arg1: Supplier): Promise<object_t>;
      // public abstract <V> java.util.Optional<java.util.function.Supplier<V>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getRegisteredSupplier(java.lang.String)
      getRegisteredSupplier(arg0: string_t): object_t;
      getRegisteredSupplierP(arg0: string_t): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.Supplier<S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getSackInitialValue()
      getSackInitialValue(): object_t;
      getSackInitialValueP(): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.UnaryOperator<S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getSackSplitOperator()
      getSackSplitOperator(): object_t;
      getSackSplitOperatorP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.mergeInto(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
      mergeInto(arg0: TraversalSideEffects): void;
      mergeIntoP(arg0: TraversalSideEffects): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.registerSupplier(java.lang.String,java.util.function.Supplier)
      registerSupplier(arg0: string_t, arg1: Supplier): void;
      registerSupplierP(arg0: string_t, arg1: Supplier): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.registerSupplierIfAbsent(java.lang.String,java.util.function.Supplier)
      registerSupplierIfAbsent(arg0: string_t, arg1: Supplier): void;
      registerSupplierIfAbsentP(arg0: string_t, arg1: Supplier): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.remove(java.lang.String)
      remove(arg0: string_t): void;
      removeP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.setLocalVertex(org.apache.tinkerpop.gremlin.structure.Vertex)
      setLocalVertex(arg0: Vertex): void;
      setLocalVertexP(arg0: Vertex): Promise<void>;
      // public abstract <S> void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.setSack(java.util.function.Supplier<S>,java.util.Optional<java.util.function.UnaryOperator<S>>)
      setSack(arg0: Supplier, arg1: object_t): void;
      setSackP(arg0: Supplier, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DefaultTraversalSideEffects {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects;
        SIDE_EFFECTS: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface DefaultTraversalStrategies extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies {
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.addStrategies(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy<?>...)
      addStrategies(...arg0: TraversalStrategy[]): TraversalStrategies;
      addStrategies(arg0: array_t<TraversalStrategy>): TraversalStrategies;
      addStrategiesP(...arg0: TraversalStrategy[]): Promise<TraversalStrategies>;
      addStrategiesP(arg0: array_t<TraversalStrategy>): Promise<TraversalStrategies>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.applyStrategies(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      applyStrategies(arg0: Traversal$Admin): void;
      applyStrategiesP(arg0: Traversal$Admin): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies.clone()
      clone(): DefaultTraversalStrategies;
      cloneP(): Promise<DefaultTraversalStrategies>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.clone()
      clone(): TraversalStrategies;
      cloneP(): Promise<TraversalStrategies>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserGeneratorFactory org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.getTraverserGeneratorFactory()
      getTraverserGeneratorFactory(): object_t;
      getTraverserGeneratorFactoryP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.removeStrategies(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>...)
      removeStrategies(...arg0: Class[]): TraversalStrategies;
      removeStrategies(arg0: array_t<Class>): TraversalStrategies;
      removeStrategiesP(...arg0: Class[]): Promise<TraversalStrategies>;
      removeStrategiesP(arg0: array_t<Class>): Promise<TraversalStrategies>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.setTraverserGeneratorFactory(org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserGeneratorFactory)
      setTraverserGeneratorFactory(arg0: object_t): void;
      setTraverserGeneratorFactoryP(arg0: object_t): Promise<void>;
      // public abstract java.util.List<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy<?>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DefaultTraversalStrategies {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies;
        STRATEGY_CATEGORIES: List;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface DependantMutableMetrics extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics {
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.addNested(org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics)
      addNested(arg0: MutableMetrics): void;
      addNestedP(arg0: MutableMetrics): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.aggregate(org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics)
      aggregate(arg0: MutableMetrics): void;
      aggregateP(arg0: MutableMetrics): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.clone()
      clone(): MutableMetrics;
      cloneP(): Promise<MutableMetrics>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public long org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics.getAndResetIncrementalDur()
      getAndResetIncrementalDur(): longValue_t;
      getAndResetIncrementalDurP(): Promise<longValue_t>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getAnnotation(java.lang.String)
      getAnnotation(arg0: string_t): object_t;
      getAnnotationP(arg0: string_t): Promise<object_t>;
      // public abstract java.util.Map<java.lang.String, java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getAnnotations()
      getAnnotations(): Map;
      getAnnotationsP(): Promise<Map>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.lang.Long org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getCount(java.lang.String)
      getCount(arg0: string_t): longValue_t;
      getCountP(arg0: string_t): Promise<longValue_t>;
      // public abstract java.util.Map<java.lang.String, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getCounts()
      getCounts(): Map;
      getCountsP(): Promise<Map>;
      // public abstract long org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getDuration(java.util.concurrent.TimeUnit)
      getDuration(arg0: object_t): longValue_t;
      getDurationP(arg0: object_t): Promise<longValue_t>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.getImmutableClone()
      getImmutableClone(): ImmutableMetrics;
      getImmutableCloneP(): Promise<ImmutableMetrics>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics.getNested(java.lang.String)
      getNested(arg0: string_t): ImmutableMetrics;
      getNestedP(arg0: string_t): Promise<ImmutableMetrics>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.getNested(java.lang.String)
      getNested(arg0: string_t): MutableMetrics;
      getNestedP(arg0: string_t): Promise<MutableMetrics>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.util.Metrics org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getNested(java.lang.String)
      getNested(arg0: string_t): Metrics;
      getNestedP(arg0: string_t): Promise<Metrics>;
      // public abstract java.util.Collection<? extends org.apache.tinkerpop.gremlin.process.traversal.util.Metrics> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getNested()
      getNested(): Collection;
      getNestedP(): Promise<Collection>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.incrementCount(java.lang.String,long)
      incrementCount(arg0: string_t, arg1: long_t): void;
      incrementCountP(arg0: string_t, arg1: long_t): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.setAnnotation(java.lang.String,java.lang.Object)
      setAnnotation(arg0: string_t, arg1: object_t): void;
      setAnnotationP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.start()
      start(): void;
      startP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.stop()
      stop(): void;
      stopP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DependantMutableMetrics {
      export interface Static {
        new (arg0: string_t, arg1: string_t, arg2: DependantMutableMetrics): org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface EmptyTraversal extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin {
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStart(org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStarts(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(int,org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      addStep(arg0: integer_t, arg1: Step): Traversal$Admin;
      addStepP(arg0: integer_t, arg1: Step): Promise<Traversal$Admin>;
      // public default <E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.addStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, E2>) throws java.lang.IllegalStateException
      addStep(arg0: Step): Traversal$Admin;
      addStepP(arg0: Step): Promise<Traversal$Admin>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.applyStrategies() throws java.lang.IllegalStateException
      applyStrategies(): void;
      applyStrategiesP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal.clone()
      clone(): EmptyTraversal;
      cloneP(): Promise<EmptyTraversal>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.clone()
      clone(): Traversal$Admin;
      cloneP(): Promise<Traversal$Admin>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.equals(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
      equals(arg0: Traversal$Admin): boolean;
      equalsP(arg0: Traversal$Admin): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <C> C org.apache.tinkerpop.gremlin.process.traversal.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void org.apache.tinkerpop.gremlin.process.traversal.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: Class, arg1: Consumer): void;
      forEachRemainingP(arg0: Class, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<?, E> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEndStep()
      getEndStep(): Step;
      getEndStepP(): Promise<Step>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getEngine()
      getEngine(): TraversalEngine;
      getEngineP(): Promise<TraversalEngine>;
      // public abstract java.util.Optional<org.apache.tinkerpop.gremlin.structure.Graph> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getGraph()
      getGraph(): object_t;
      getGraphP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getParent()
      getParent(): object_t;
      getParentP(): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Step<S, ?> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStartStep()
      getStartStep(): Step;
      getStartStepP(): Promise<Step>;
      // public abstract java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Step> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getSteps()
      getSteps(): List;
      getStepsP(): Promise<List>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getStrategies()
      getStrategies(): TraversalStrategies;
      getStrategiesP(): Promise<TraversalStrategies>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserGenerator()
      getTraverserGenerator(): TraverserGenerator;
      getTraverserGeneratorP(): Promise<TraverserGenerator>;
      // public default java.util.Set<org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserRequirement> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.getTraverserRequirements()
      getTraverserRequirements(): Set;
      getTraverserRequirementsP(): Promise<Set>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract boolean org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.isLocked()
      isLocked(): boolean;
      isLockedP(): Promise<boolean>;
      // public default <A,B> org.apache.tinkerpop.gremlin.process.traversal.Traversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>) throws java.lang.IllegalStateException
      removeStep(arg0: Step): Traversal$Admin;
      removeStepP(arg0: Step): Promise<Traversal$Admin>;
      // public abstract <S2,E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S2, E2> org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.removeStep(int) throws java.lang.IllegalStateException
      removeStep(arg0: integer_t): Traversal$Admin;
      removeStepP(arg0: integer_t): Promise<Traversal$Admin>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setEngine(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine)
      setEngine(arg0: TraversalEngine): void;
      setEngineP(arg0: TraversalEngine): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setGraph(org.apache.tinkerpop.gremlin.structure.Graph)
      setGraph(arg0: Graph): void;
      setGraphP(arg0: Graph): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setParent(org.apache.tinkerpop.gremlin.process.traversal.step.TraversalParent)
      setParent(arg0: object_t): void;
      setParentP(arg0: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setSideEffects(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.setStrategies(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies)
      setStrategies(arg0: TraversalStrategies): void;
      setStrategiesP(arg0: TraversalStrategies): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default java.util.Optional<E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyTraversal {
      export interface Static {
        // public static <A,B> org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal<A, B> org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal.instance()
        instance(): EmptyTraversal;
        instanceP(): Promise<EmptyTraversal>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface EmptyTraversalSideEffects extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects {
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.clone()
      clone(): TraversalSideEffects;
      cloneP(): Promise<TraversalSideEffects>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <V> void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.forEach(java.util.function.BiConsumer<java.lang.String, V>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public abstract <V> java.util.Optional<V> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default <V> V org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getOrCreate(java.lang.String,java.util.function.Supplier<V>)
      getOrCreate(arg0: string_t, arg1: Supplier): object_t;
      getOrCreateP(arg0: string_t, arg1: Supplier): Promise<object_t>;
      // public abstract <V> java.util.Optional<java.util.function.Supplier<V>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getRegisteredSupplier(java.lang.String)
      getRegisteredSupplier(arg0: string_t): object_t;
      getRegisteredSupplierP(arg0: string_t): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.Supplier<S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getSackInitialValue()
      getSackInitialValue(): object_t;
      getSackInitialValueP(): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.UnaryOperator<S>> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.getSackSplitOperator()
      getSackSplitOperator(): object_t;
      getSackSplitOperatorP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.mergeInto(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
      mergeInto(arg0: TraversalSideEffects): void;
      mergeIntoP(arg0: TraversalSideEffects): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.registerSupplier(java.lang.String,java.util.function.Supplier)
      registerSupplier(arg0: string_t, arg1: Supplier): void;
      registerSupplierP(arg0: string_t, arg1: Supplier): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.registerSupplierIfAbsent(java.lang.String,java.util.function.Supplier)
      registerSupplierIfAbsent(arg0: string_t, arg1: Supplier): void;
      registerSupplierIfAbsentP(arg0: string_t, arg1: Supplier): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.remove(java.lang.String)
      remove(arg0: string_t): void;
      removeP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.setLocalVertex(org.apache.tinkerpop.gremlin.structure.Vertex)
      setLocalVertex(arg0: Vertex): void;
      setLocalVertexP(arg0: Vertex): Promise<void>;
      // public abstract <S> void org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.setSack(java.util.function.Supplier<S>,java.util.Optional<java.util.function.UnaryOperator<S>>)
      setSack(arg0: Supplier, arg1: object_t): void;
      setSackP(arg0: Supplier, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyTraversalSideEffects {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects.instance()
        instance(): EmptyTraversalSideEffects;
        instanceP(): Promise<EmptyTraversalSideEffects>;
        SIDE_EFFECTS: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface EmptyTraversalStrategies extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies {
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.addStrategies(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy<?>...)
      addStrategies(...arg0: TraversalStrategy[]): TraversalStrategies;
      addStrategies(arg0: array_t<TraversalStrategy>): TraversalStrategies;
      addStrategiesP(...arg0: TraversalStrategy[]): Promise<TraversalStrategies>;
      addStrategiesP(arg0: array_t<TraversalStrategy>): Promise<TraversalStrategies>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.applyStrategies(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
      applyStrategies(arg0: Traversal$Admin): void;
      applyStrategiesP(arg0: Traversal$Admin): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.clone()
      clone(): TraversalStrategies;
      cloneP(): Promise<TraversalStrategies>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserGeneratorFactory org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.getTraverserGeneratorFactory()
      getTraverserGeneratorFactory(): object_t;
      getTraverserGeneratorFactoryP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.removeStrategies(java.lang.Class<? extends org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>...)
      removeStrategies(...arg0: Class[]): TraversalStrategies;
      removeStrategies(arg0: array_t<Class>): TraversalStrategies;
      removeStrategiesP(...arg0: Class[]): Promise<TraversalStrategies>;
      removeStrategiesP(arg0: array_t<Class>): Promise<TraversalStrategies>;
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.setTraverserGeneratorFactory(org.apache.tinkerpop.gremlin.process.traversal.traverser.TraverserGeneratorFactory)
      setTraverserGeneratorFactory(arg0: object_t): void;
      setTraverserGeneratorFactoryP(arg0: object_t): Promise<void>;
      // public abstract java.util.List<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy<?>> org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyTraversalStrategies {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies.instance()
        instance(): EmptyTraversalStrategies;
        instanceP(): Promise<EmptyTraversalStrategies>;
        STRATEGY_CATEGORIES: List;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface FastNoSuchElementException extends Java.java.util.NoSuchElementException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module FastNoSuchElementException {
      export interface Static {
        // public static java.util.NoSuchElementException org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException.instance()
        instance(): NoSuchElementException;
        instanceP(): Promise<NoSuchElementException>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface ImmutableMetrics extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.util.Metrics {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getAnnotation(java.lang.String)
      getAnnotation(arg0: string_t): object_t;
      getAnnotationP(arg0: string_t): Promise<object_t>;
      // public abstract java.util.Map<java.lang.String, java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getAnnotations()
      getAnnotations(): Map;
      getAnnotationsP(): Promise<Map>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.lang.Long org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getCount(java.lang.String)
      getCount(arg0: string_t): longValue_t;
      getCountP(arg0: string_t): Promise<longValue_t>;
      // public abstract java.util.Map<java.lang.String, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getCounts()
      getCounts(): Map;
      getCountsP(): Promise<Map>;
      // public abstract long org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getDuration(java.util.concurrent.TimeUnit)
      getDuration(arg0: object_t): longValue_t;
      getDurationP(arg0: object_t): Promise<longValue_t>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics.getNested(java.lang.String)
      getNested(arg0: string_t): ImmutableMetrics;
      getNestedP(arg0: string_t): Promise<ImmutableMetrics>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.util.Metrics org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getNested(java.lang.String)
      getNested(arg0: string_t): Metrics;
      getNestedP(arg0: string_t): Promise<Metrics>;
      // public abstract java.util.Collection<? extends org.apache.tinkerpop.gremlin.process.traversal.util.Metrics> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getNested()
      getNested(): Collection;
      getNestedP(): Promise<Collection>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ImmutableMetrics {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface Metrics extends Java.java.lang.Object {
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getAnnotation(java.lang.String)
      getAnnotation(arg0: string_t): object_t;
      getAnnotationP(arg0: string_t): Promise<object_t>;
      // public abstract java.util.Map<java.lang.String, java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getAnnotations()
      getAnnotations(): Map;
      getAnnotationsP(): Promise<Map>;
      // public abstract java.lang.Long org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getCount(java.lang.String)
      getCount(arg0: string_t): longValue_t;
      getCountP(arg0: string_t): Promise<longValue_t>;
      // public abstract java.util.Map<java.lang.String, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getCounts()
      getCounts(): Map;
      getCountsP(): Promise<Map>;
      // public abstract long org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getDuration(java.util.concurrent.TimeUnit)
      getDuration(arg0: object_t): longValue_t;
      getDurationP(arg0: object_t): Promise<longValue_t>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.util.Metrics org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getNested(java.lang.String)
      getNested(arg0: string_t): Metrics;
      getNestedP(arg0: string_t): Promise<Metrics>;
      // public abstract java.util.Collection<? extends org.apache.tinkerpop.gremlin.process.traversal.util.Metrics> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getNested()
      getNested(): Collection;
      getNestedP(): Promise<Collection>;
    }
    export module Metrics {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface MutableMetrics extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics {
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.addNested(org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics)
      addNested(arg0: MutableMetrics): void;
      addNestedP(arg0: MutableMetrics): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.aggregate(org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics)
      aggregate(arg0: MutableMetrics): void;
      aggregateP(arg0: MutableMetrics): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.clone()
      clone(): MutableMetrics;
      cloneP(): Promise<MutableMetrics>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getAnnotation(java.lang.String)
      getAnnotation(arg0: string_t): object_t;
      getAnnotationP(arg0: string_t): Promise<object_t>;
      // public abstract java.util.Map<java.lang.String, java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getAnnotations()
      getAnnotations(): Map;
      getAnnotationsP(): Promise<Map>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract java.lang.Long org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getCount(java.lang.String)
      getCount(arg0: string_t): longValue_t;
      getCountP(arg0: string_t): Promise<longValue_t>;
      // public abstract java.util.Map<java.lang.String, java.lang.Long> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getCounts()
      getCounts(): Map;
      getCountsP(): Promise<Map>;
      // public abstract long org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getDuration(java.util.concurrent.TimeUnit)
      getDuration(arg0: object_t): longValue_t;
      getDurationP(arg0: object_t): Promise<longValue_t>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.getImmutableClone()
      getImmutableClone(): ImmutableMetrics;
      getImmutableCloneP(): Promise<ImmutableMetrics>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics.getNested(java.lang.String)
      getNested(arg0: string_t): ImmutableMetrics;
      getNestedP(arg0: string_t): Promise<ImmutableMetrics>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.getNested(java.lang.String)
      getNested(arg0: string_t): MutableMetrics;
      getNestedP(arg0: string_t): Promise<MutableMetrics>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.util.Metrics org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getNested(java.lang.String)
      getNested(arg0: string_t): Metrics;
      getNestedP(arg0: string_t): Promise<Metrics>;
      // public abstract java.util.Collection<? extends org.apache.tinkerpop.gremlin.process.traversal.util.Metrics> org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.getNested()
      getNested(): Collection;
      getNestedP(): Promise<Collection>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.incrementCount(java.lang.String,long)
      incrementCount(arg0: string_t, arg1: long_t): void;
      incrementCountP(arg0: string_t, arg1: long_t): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.setAnnotation(java.lang.String,java.lang.Object)
      setAnnotation(arg0: string_t, arg1: object_t): void;
      setAnnotationP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.start()
      start(): void;
      startP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.stop()
      stop(): void;
      stopP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MutableMetrics {
      export interface Static {
        new (arg0: string_t, arg1: string_t): org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface OrP extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP {
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.and(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      and(arg0: Traversal): P;
      andP(arg0: Traversal): Promise<P>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.and(java.util.function.Predicate<? super V>)
      and(arg0: Predicate): P;
      andP(arg0: Predicate): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP<V> org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP.clone()
      clone(): ConjunctionP;
      cloneP(): Promise<ConjunctionP>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.OrP<V> org.apache.tinkerpop.gremlin.process.traversal.util.OrP.clone()
      clone(): OrP;
      cloneP(): Promise<OrP>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.clone()
      clone(): P;
      cloneP(): Promise<P>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.P.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.function.BiPredicate<V, V> org.apache.tinkerpop.gremlin.process.traversal.P.getBiPredicate()
      getBiPredicate(): BiPredicate;
      getBiPredicateP(): Promise<BiPredicate>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.List<org.apache.tinkerpop.gremlin.process.traversal.P<V>> org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP.getPredicates()
      getPredicates(): List;
      getPredicatesP(): Promise<List>;
      // public <S,E> java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>> org.apache.tinkerpop.gremlin.process.traversal.P.getTraversals()
      getTraversals(): List;
      getTraversalsP(): Promise<List>;
      // public V org.apache.tinkerpop.gremlin.process.traversal.P.getValue()
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.negate()
      negate(): P;
      negateP(): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.or(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      or(arg0: Traversal): P;
      orP(arg0: Traversal): Promise<P>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.or(java.util.function.Predicate<? super V>)
      or(arg0: Predicate): P;
      orP(arg0: Predicate): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.P.setValue(V)
      setValue(arg0: object_t): void;
      setValueP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module OrP {
      export interface Static {
        new (arg0: P, ...arg1: P[]): org.apache.tinkerpop.gremlin.process.traversal.util.OrP;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.between(V,V)
        between(arg0: object_t, arg1: object_t): P;
        betweenP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.eq(V)
        eq(arg0: object_t): P;
        eqP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.gt(V)
        gt(arg0: object_t): P;
        gtP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.gte(V)
        gte(arg0: object_t): P;
        gteP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.inside(V,V)
        inside(arg0: object_t, arg1: object_t): P;
        insideP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.lt(V)
        lt(arg0: object_t): P;
        ltP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.lte(V)
        lte(arg0: object_t): P;
        lteP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.neq(V)
        neq(arg0: object_t): P;
        neqP(arg0: object_t): Promise<P>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.P<E> org.apache.tinkerpop.gremlin.process.traversal.P.not(org.apache.tinkerpop.gremlin.process.traversal.Traversal<S, E>)
        not(arg0: Traversal): P;
        notP(arg0: Traversal): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.not(org.apache.tinkerpop.gremlin.process.traversal.P<V>)
        not(arg0: P): P;
        notP(arg0: P): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.outside(V,V)
        outside(arg0: object_t, arg1: object_t): P;
        outsideP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.P org.apache.tinkerpop.gremlin.process.traversal.P.test(java.util.function.BiPredicate,java.lang.Object)
        test(arg0: BiPredicate, arg1: object_t): P;
        testP(arg0: BiPredicate, arg1: object_t): Promise<P>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.P<E> org.apache.tinkerpop.gremlin.process.traversal.P.traversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal<S, E>)
        traversal(arg0: Traversal): P;
        traversalP(arg0: Traversal): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.within(java.util.Collection<V>)
        within(arg0: Collection): P;
        withinP(arg0: Collection): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.within(V...)
        within(...arg0: object_t[]): P;
        within(arg0: object_array_t): P;
        withinP(...arg0: object_t[]): Promise<P>;
        withinP(arg0: object_array_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.without(java.util.Collection<V>)
        without(arg0: Collection): P;
        withoutP(arg0: Collection): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.without(V...)
        without(...arg0: object_t[]): P;
        without(arg0: object_array_t): P;
        withoutP(...arg0: object_t[]): Promise<P>;
        withoutP(arg0: object_array_t): Promise<P>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface SideEffectHelper extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module SideEffectHelper {
      export interface Static {
        // public static void org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper.validateSideEffect(java.lang.String,java.lang.Object) throws java.lang.IllegalArgumentException
        validateSideEffect(arg0: string_t, arg1: object_t): void;
        validateSideEffectP(arg0: string_t, arg1: object_t): Promise<void>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface StandardTraversalMetrics extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics {
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics.addMetrics(org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics,java.lang.String,int,boolean,java.lang.String)
      addMetrics(arg0: MutableMetrics, arg1: string_t, arg2: integer_t, arg3: boolean_t, arg4: string_t): void;
      addMetricsP(arg0: MutableMetrics, arg1: string_t, arg2: integer_t, arg3: boolean_t, arg4: string_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics.finish(java.lang.String,long)
      finish(arg0: string_t, arg1: long_t): void;
      finishP(arg0: string_t, arg1: long_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract long org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.getDuration(java.util.concurrent.TimeUnit)
      getDuration(arg0: object_t): longValue_t;
      getDurationP(arg0: object_t): Promise<longValue_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.util.Metrics org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.getMetrics(java.lang.String)
      getMetrics(arg0: string_t): Metrics;
      getMetricsP(arg0: string_t): Promise<Metrics>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.util.Metrics org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.getMetrics(int)
      getMetrics(arg0: integer_t): Metrics;
      getMetricsP(arg0: integer_t): Promise<Metrics>;
      // public abstract java.util.Collection<? extends org.apache.tinkerpop.gremlin.process.traversal.util.Metrics> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.getMetrics()
      getMetrics(): Collection;
      getMetricsP(): Promise<Collection>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics.start(java.lang.String)
      start(arg0: string_t): void;
      startP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics.stop(java.lang.String)
      stop(arg0: string_t): void;
      stopP(arg0: string_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StandardTraversalMetrics {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics;
        // public static org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics.merge(java.util.Iterator<org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics>)
        merge(arg0: Iterator): StandardTraversalMetrics;
        mergeP(arg0: Iterator): Promise<StandardTraversalMetrics>;
        METRICS_KEY: string;
        ELEMENT_COUNT_ID: string;
        TRAVERSER_COUNT_ID: string;
        PERCENT_DURATION_KEY: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface StepPosition extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.String org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition.nextXId()
      nextXId(): string;
      nextXIdP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      x: number;
      y: number;
      z: number;
      parentId: string;
    }
    export module StepPosition {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface TraversalClassFunction extends Java.java.lang.Object,Java.java.util.function_.Function {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction.apply(org.apache.tinkerpop.gremlin.structure.Graph)
      apply(arg0: Graph): Traversal$Admin;
      applyP(arg0: Graph): Promise<Traversal$Admin>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalClassFunction {
      export interface Static {
        new (arg0: Class): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface TraversalHelper extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalHelper {
      export interface Static {
        // public static <S> void org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.addToCollection(java.util.Collection<S>,S,long)
        addToCollection(arg0: Collection, arg1: object_t, arg2: long_t): void;
        addToCollectionP(arg0: Collection, arg1: object_t, arg2: long_t): Promise<void>;
        // public static <S> void org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.addToCollectionUnrollIterator(java.util.Collection<S>,S,long)
        addToCollectionUnrollIterator(arg0: Collection, arg1: object_t, arg2: long_t): void;
        addToCollectionUnrollIteratorP(arg0: Collection, arg1: object_t, arg2: long_t): Promise<void>;
        // public static <S> java.util.Optional<S> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.getLastStepOfAssignableClass(java.lang.Class<S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        getLastStepOfAssignableClass(arg0: Class, arg1: Traversal$Admin): object_t;
        getLastStepOfAssignableClassP(arg0: Class, arg1: Traversal$Admin): Promise<object_t>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.getRootTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        getRootTraversal(arg0: Traversal$Admin): Traversal$Admin;
        getRootTraversalP(arg0: Traversal$Admin): Promise<Traversal$Admin>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.getShortName(org.apache.tinkerpop.gremlin.process.traversal.Step,int)
        getShortName(arg0: Step, arg1: integer_t): string;
        getShortNameP(arg0: Step, arg1: integer_t): Promise<string>;
        // public static <S> java.util.List<S> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.getStepsOfAssignableClass(java.lang.Class<S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        getStepsOfAssignableClass(arg0: Class, arg1: Traversal$Admin): List;
        getStepsOfAssignableClassP(arg0: Class, arg1: Traversal$Admin): Promise<List>;
        // public static <S> java.util.List<S> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.getStepsOfAssignableClassRecursively(java.lang.Class<S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        getStepsOfAssignableClassRecursively(arg0: Class, arg1: Traversal$Admin): List;
        getStepsOfAssignableClassRecursivelyP(arg0: Class, arg1: Traversal$Admin): Promise<List>;
        // public static <S> java.util.List<S> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.getStepsOfClass(java.lang.Class<S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        getStepsOfClass(arg0: Class, arg1: Traversal$Admin): List;
        getStepsOfClassP(arg0: Class, arg1: Traversal$Admin): Promise<List>;
        // public static boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.hasStepOfAssignableClass(java.lang.Class,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        hasStepOfAssignableClass(arg0: Class, arg1: Traversal$Admin): boolean;
        hasStepOfAssignableClassP(arg0: Class, arg1: Traversal$Admin): Promise<boolean>;
        // public static boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.hasStepOfAssignableClassRecursively(java.util.Collection<java.lang.Class>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        hasStepOfAssignableClassRecursively(arg0: Collection, arg1: Traversal$Admin): boolean;
        hasStepOfAssignableClassRecursivelyP(arg0: Collection, arg1: Traversal$Admin): Promise<boolean>;
        // public static boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.hasStepOfAssignableClassRecursively(java.lang.Class,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        hasStepOfAssignableClassRecursively(arg0: Class, arg1: Traversal$Admin): boolean;
        hasStepOfAssignableClassRecursivelyP(arg0: Class, arg1: Traversal$Admin): Promise<boolean>;
        // public static boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.hasStepOfClass(java.lang.Class,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        hasStepOfClass(arg0: Class, arg1: Traversal$Admin): boolean;
        hasStepOfClassP(arg0: Class, arg1: Traversal$Admin): Promise<boolean>;
        // public static <S,E> void org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.insertAfterStep(org.apache.tinkerpop.gremlin.process.traversal.Step<S, E>,org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        insertAfterStep(arg0: Step, arg1: Step, arg2: Traversal$Admin): void;
        insertAfterStepP(arg0: Step, arg1: Step, arg2: Traversal$Admin): Promise<void>;
        // public static <S,E> void org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.insertBeforeStep(org.apache.tinkerpop.gremlin.process.traversal.Step<S, E>,org.apache.tinkerpop.gremlin.process.traversal.Step<E, ?>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        insertBeforeStep(arg0: Step, arg1: Step, arg2: Traversal$Admin): void;
        insertBeforeStepP(arg0: Step, arg1: Step, arg2: Traversal$Admin): Promise<void>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.Step<?, E> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.insertTraversal(org.apache.tinkerpop.gremlin.process.traversal.Step<?, S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        insertTraversal(arg0: Step, arg1: Traversal$Admin, arg2: Traversal$Admin): Step;
        insertTraversalP(arg0: Step, arg1: Traversal$Admin, arg2: Traversal$Admin): Promise<Step>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.Step<?, E> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.insertTraversal(int,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        insertTraversal(arg0: integer_t, arg1: Traversal$Admin, arg2: Traversal$Admin): Step;
        insertTraversalP(arg0: integer_t, arg1: Traversal$Admin, arg2: Traversal$Admin): Promise<Step>;
        // public static boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.isLocalStarGraph(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        isLocalStarGraph(arg0: Traversal$Admin): boolean;
        isLocalStarGraphP(arg0: Traversal$Admin): Promise<boolean>;
        // public static void org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.reIdSteps(org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        reIdSteps(arg0: StepPosition, arg1: Traversal$Admin): void;
        reIdStepsP(arg0: StepPosition, arg1: Traversal$Admin): Promise<void>;
        // public static <S,E> void org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.replaceStep(org.apache.tinkerpop.gremlin.process.traversal.Step<S, E>,org.apache.tinkerpop.gremlin.process.traversal.Step<S, E>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        replaceStep(arg0: Step, arg1: Step, arg2: Traversal$Admin): void;
        replaceStepP(arg0: Step, arg1: Step, arg2: Traversal$Admin): Promise<void>;
        // public static <S,E> int org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.stepIndex(org.apache.tinkerpop.gremlin.process.traversal.Step<S, E>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        stepIndex(arg0: Step, arg1: Traversal$Admin): number;
        stepIndexP(arg0: Step, arg1: Traversal$Admin): Promise<number>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface TraversalMatrix extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public <A,B,C> C org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix.getStepById(java.lang.String)
      getStepById(arg0: string_t): Step;
      getStepByIdP(arg0: string_t): Promise<Step>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix.getTraversal()
      getTraversal(): Traversal$Admin;
      getTraversalP(): Promise<Traversal$Admin>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalMatrix {
      export interface Static {
        new (arg0: Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface TraversalMetrics extends Java.java.lang.Object {
      // public abstract long org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.getDuration(java.util.concurrent.TimeUnit)
      getDuration(arg0: object_t): longValue_t;
      getDurationP(arg0: object_t): Promise<longValue_t>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.util.Metrics org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.getMetrics(java.lang.String)
      getMetrics(arg0: string_t): Metrics;
      getMetricsP(arg0: string_t): Promise<Metrics>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.util.Metrics org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.getMetrics(int)
      getMetrics(arg0: integer_t): Metrics;
      getMetricsP(arg0: integer_t): Promise<Metrics>;
      // public abstract java.util.Collection<? extends org.apache.tinkerpop.gremlin.process.traversal.util.Metrics> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.getMetrics()
      getMetrics(): Collection;
      getMetricsP(): Promise<Collection>;
    }
    export module TraversalMetrics {
      export interface Static {
        METRICS_KEY: string;
        ELEMENT_COUNT_ID: string;
        TRAVERSER_COUNT_ID: string;
        PERCENT_DURATION_KEY: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface TraversalObjectFunction extends Java.java.lang.Object,Java.java.util.function_.Function {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction.apply(org.apache.tinkerpop.gremlin.structure.Graph)
      apply(arg0: Graph): Traversal$Admin;
      applyP(arg0: Graph): Promise<Traversal$Admin>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalObjectFunction {
      export interface Static {
        new (arg0: Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface TraversalP extends Java.org.apache.tinkerpop.gremlin.process.traversal.P {
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.and(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      and(arg0: Traversal): P;
      andP(arg0: Traversal): Promise<P>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.and(java.util.function.Predicate<? super V>)
      and(arg0: Predicate): P;
      andP(arg0: Predicate): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP.clone()
      clone(): TraversalP;
      cloneP(): Promise<TraversalP>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.clone()
      clone(): P;
      cloneP(): Promise<P>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.P.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.function.BiPredicate<V, V> org.apache.tinkerpop.gremlin.process.traversal.P.getBiPredicate()
      getBiPredicate(): BiPredicate;
      getBiPredicateP(): Promise<BiPredicate>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public <S,E> java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>> org.apache.tinkerpop.gremlin.process.traversal.P.getTraversals()
      getTraversals(): List;
      getTraversalsP(): Promise<List>;
      // public V org.apache.tinkerpop.gremlin.process.traversal.P.getValue()
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP.negate()
      negate(): TraversalP;
      negateP(): Promise<TraversalP>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.negate()
      negate(): P;
      negateP(): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.or(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>)
      or(arg0: Traversal): P;
      orP(arg0: Traversal): Promise<P>;
      // public org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.or(java.util.function.Predicate<? super V>)
      or(arg0: Predicate): P;
      orP(arg0: Predicate): Promise<P>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.P.setValue(V)
      setValue(arg0: object_t): void;
      setValueP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalP {
      export interface Static {
        new (arg0: Traversal$Admin, arg1: object_t, arg2: boolean_t): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP;
        new (arg0: Traversal$Admin, arg1: boolean_t): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP;
        // public static org.apache.tinkerpop.gremlin.process.traversal.P<?> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP.andTraversals(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
        andTraversals(...arg0: Traversal[]): P;
        andTraversals(arg0: array_t<Traversal>): P;
        andTraversalsP(...arg0: Traversal[]): Promise<P>;
        andTraversalsP(arg0: array_t<Traversal>): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.between(V,V)
        between(arg0: object_t, arg1: object_t): P;
        betweenP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.eq(V)
        eq(arg0: object_t): P;
        eqP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.gt(V)
        gt(arg0: object_t): P;
        gtP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.gte(V)
        gte(arg0: object_t): P;
        gteP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.inside(V,V)
        inside(arg0: object_t, arg1: object_t): P;
        insideP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.lt(V)
        lt(arg0: object_t): P;
        ltP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.lte(V)
        lte(arg0: object_t): P;
        lteP(arg0: object_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.neq(V)
        neq(arg0: object_t): P;
        neqP(arg0: object_t): Promise<P>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.P<E> org.apache.tinkerpop.gremlin.process.traversal.P.not(org.apache.tinkerpop.gremlin.process.traversal.Traversal<S, E>)
        not(arg0: Traversal): P;
        notP(arg0: Traversal): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.not(org.apache.tinkerpop.gremlin.process.traversal.P<V>)
        not(arg0: P): P;
        notP(arg0: P): Promise<P>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.P<?> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP.orTraversals(org.apache.tinkerpop.gremlin.process.traversal.Traversal<?, ?>...)
        orTraversals(...arg0: Traversal[]): P;
        orTraversals(arg0: array_t<Traversal>): P;
        orTraversalsP(...arg0: Traversal[]): Promise<P>;
        orTraversalsP(arg0: array_t<Traversal>): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.outside(V,V)
        outside(arg0: object_t, arg1: object_t): P;
        outsideP(arg0: object_t, arg1: object_t): Promise<P>;
        // public static org.apache.tinkerpop.gremlin.process.traversal.P org.apache.tinkerpop.gremlin.process.traversal.P.test(java.util.function.BiPredicate,java.lang.Object)
        test(arg0: BiPredicate, arg1: object_t): P;
        testP(arg0: BiPredicate, arg1: object_t): Promise<P>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.P<E> org.apache.tinkerpop.gremlin.process.traversal.P.traversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal<S, E>)
        traversal(arg0: Traversal): P;
        traversalP(arg0: Traversal): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.within(java.util.Collection<V>)
        within(arg0: Collection): P;
        withinP(arg0: Collection): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.within(V...)
        within(...arg0: object_t[]): P;
        within(arg0: object_array_t): P;
        withinP(...arg0: object_t[]): Promise<P>;
        withinP(arg0: object_array_t): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.without(java.util.Collection<V>)
        without(arg0: Collection): P;
        withoutP(arg0: Collection): Promise<P>;
        // public static <V> org.apache.tinkerpop.gremlin.process.traversal.P<V> org.apache.tinkerpop.gremlin.process.traversal.P.without(V...)
        without(...arg0: object_t[]): P;
        without(arg0: object_array_t): P;
        withoutP(...arg0: object_t[]): Promise<P>;
        withoutP(arg0: object_array_t): Promise<P>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface TraversalRing extends Java.java.lang.Object {
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.addTraversal(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B>)
      addTraversal(arg0: Traversal$Admin): void;
      addTraversalP(arg0: Traversal$Admin): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing<A, B> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.clone()
      clone(): TraversalRing;
      cloneP(): Promise<TraversalRing>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.List<org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B>> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.getTraversals()
      getTraversals(): List;
      getTraversalsP(): Promise<List>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<A, B> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.next()
      next(): Traversal$Admin;
      nextP(): Promise<Traversal$Admin>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public int org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.size()
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalRing {
      export interface Static {
        new (...arg0: Traversal$Admin[]): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface TraversalScriptFunction extends Java.java.lang.Object,Java.java.util.function_.Function {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction.apply(org.apache.tinkerpop.gremlin.structure.Graph)
      apply(arg0: Graph): Traversal$Admin;
      applyP(arg0: Graph): Promise<Traversal$Admin>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalScriptFunction {
      export interface Static {
        new (arg0: TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface TraversalScriptHelper extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalScriptHelper {
      export interface Static {
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper.compute(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder,java.lang.String,java.lang.String,java.lang.Object...)
        compute(arg0: Graph, arg1: TraversalSource$Builder, arg2: string_t, arg3: string_t, ...arg4: object_t[]): Traversal$Admin;
        compute(arg0: Graph, arg1: TraversalSource$Builder, arg2: string_t, arg3: string_t, arg4: object_array_t): Traversal$Admin;
        computeP(arg0: Graph, arg1: TraversalSource$Builder, arg2: string_t, arg3: string_t, ...arg4: object_t[]): Promise<Traversal$Admin>;
        computeP(arg0: Graph, arg1: TraversalSource$Builder, arg2: string_t, arg3: string_t, arg4: object_array_t): Promise<Traversal$Admin>;
        // public static <S,E> org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E> org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper.compute(java.lang.String,org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource,java.lang.Object...)
        compute(arg0: string_t, arg1: GraphTraversalSource, ...arg2: object_t[]): Traversal$Admin;
        compute(arg0: string_t, arg1: GraphTraversalSource, arg2: object_array_t): Traversal$Admin;
        computeP(arg0: string_t, arg1: GraphTraversalSource, ...arg2: object_t[]): Promise<Traversal$Admin>;
        computeP(arg0: string_t, arg1: GraphTraversalSource, arg2: object_array_t): Promise<Traversal$Admin>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface TraversalUtil extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalUtil {
      export interface Static {
        // public static final <S,E> E org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.apply(org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
        apply(arg0: Traverser$Admin, arg1: Traversal$Admin): object_t;
        applyP(arg0: Traverser$Admin, arg1: Traversal$Admin): Promise<object_t>;
        // public static final <S,E> E org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.apply(S,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
        apply(arg0: object_t, arg1: Traversal$Admin): object_t;
        applyP(arg0: object_t, arg1: Traversal$Admin): Promise<object_t>;
        // public static final <S,E> E org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.applyNullable(org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
        applyNullable(arg0: Traverser$Admin, arg1: Traversal$Admin): object_t;
        applyNullableP(arg0: Traverser$Admin, arg1: Traversal$Admin): Promise<object_t>;
        // public static final <S,E> E org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.applyNullable(S,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
        applyNullable(arg0: object_t, arg1: Traversal$Admin): object_t;
        applyNullableP(arg0: object_t, arg1: Traversal$Admin): Promise<object_t>;
        // public static final <S,E> boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.test(org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple<S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>,org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple<E>)
        test(arg0: TraversalUtil$Multiple, arg1: Traversal$Admin, arg2: TraversalUtil$Multiple): boolean;
        testP(arg0: TraversalUtil$Multiple, arg1: Traversal$Admin, arg2: TraversalUtil$Multiple): Promise<boolean>;
        // public static final <S,E> boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.test(org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>,E)
        test(arg0: Traverser$Admin, arg1: Traversal$Admin, arg2: object_t): boolean;
        testP(arg0: Traverser$Admin, arg1: Traversal$Admin, arg2: object_t): Promise<boolean>;
        // public static final <S,E> boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.test(S,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>,E)
        test(arg0: object_t, arg1: Traversal$Admin, arg2: object_t): boolean;
        testP(arg0: object_t, arg1: Traversal$Admin, arg2: object_t): Promise<boolean>;
        // public static final <S,E> boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.test(org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple<S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
        test(arg0: TraversalUtil$Multiple, arg1: Traversal$Admin): boolean;
        testP(arg0: TraversalUtil$Multiple, arg1: Traversal$Admin): Promise<boolean>;
        // public static final <S,E> boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.test(org.apache.tinkerpop.gremlin.process.traversal.Traverser.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin<S>,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
        test(arg0: Traverser$Admin, arg1: Traversal$Admin): boolean;
        testP(arg0: Traverser$Admin, arg1: Traversal$Admin): Promise<boolean>;
        // public static final <S,E> boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.test(S,org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<S, E>)
        test(arg0: object_t, arg1: Traversal$Admin): boolean;
        testP(arg0: object_t, arg1: Traversal$Admin): Promise<boolean>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.process.traversal.util {
    export interface TraversalUtil$Multiple extends Java.java.lang.Object,Java.java.lang.Iterable {
      // public boolean org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple.contains(S)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalUtil$Multiple {
      export interface Static {
        new (arg0: Collection): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Direction extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.structure.Direction org.apache.tinkerpop.gremlin.structure.Direction.opposite()
      opposite(): Direction;
      oppositeP(): Promise<Direction>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Direction {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.structure.Direction org.apache.tinkerpop.gremlin.structure.Direction.valueOf(java.lang.String)
        valueOf(arg0: string_t): Direction;
        valueOfP(arg0: string_t): Promise<Direction>;
        // public static org.apache.tinkerpop.gremlin.structure.Direction[] org.apache.tinkerpop.gremlin.structure.Direction.values()
        values(): Direction[];
        valuesP(): Promise<Direction[]>;
        OUT: Direction;
        IN: Direction;
        BOTH: Direction;
        proper: Direction[];
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Edge extends Java.org.apache.tinkerpop.gremlin.structure.Element {
      // public default java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.Edge.bothVertices()
      bothVertices(): Iterator;
      bothVerticesP(): Promise<Iterator>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.Edge.inVertex()
      inVertex(): Vertex;
      inVertexP(): Promise<Vertex>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public default org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.Edge.outVertex()
      outVertex(): Vertex;
      outVertexP(): Promise<Vertex>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.Edge.vertices(org.apache.tinkerpop.gremlin.structure.Direction)
      vertices(arg0: Direction): Iterator;
      verticesP(arg0: Direction): Promise<Iterator>;
    }
    export module Edge {
      export interface Static {
        DEFAULT_LABEL: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Edge$Exceptions extends Java.org.apache.tinkerpop.gremlin.structure.Element$Exceptions {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Edge$Exceptions {
      export interface Static {
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Edge$Exceptions.edgeRemovalNotSupported()
        edgeRemovalNotSupported(): object_t;
        edgeRemovalNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.elementAlreadyRemoved(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.Element>,java.lang.Object)
        elementAlreadyRemoved(arg0: Class, arg1: object_t): object_t;
        elementAlreadyRemovedP(arg0: Class, arg1: object_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeAHiddenKey(java.lang.String)
        labelCanNotBeAHiddenKey(arg0: string_t): object_t;
        labelCanNotBeAHiddenKeyP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeEmpty()
        labelCanNotBeEmpty(): object_t;
        labelCanNotBeEmptyP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeNull()
        labelCanNotBeNull(): object_t;
        labelCanNotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.propertyAdditionNotSupported()
        propertyAdditionNotSupported(): object_t;
        propertyAdditionNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.providedKeyValuesMustBeAMultipleOfTwo()
        providedKeyValuesMustBeAMultipleOfTwo(): object_t;
        providedKeyValuesMustBeAMultipleOfTwoP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.providedKeyValuesMustHaveALegalKeyOnEvenIndices()
        providedKeyValuesMustHaveALegalKeyOnEvenIndices(): object_t;
        providedKeyValuesMustHaveALegalKeyOnEvenIndicesP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.Edge$Exceptions.userSuppliedIdsNotSupported()
        userSuppliedIdsNotSupported(): object_t;
        userSuppliedIdsNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.Edge$Exceptions.userSuppliedIdsOfThisTypeNotSupported()
        userSuppliedIdsOfThisTypeNotSupported(): object_t;
        userSuppliedIdsOfThisTypeNotSupportedP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Element extends Java.java.lang.Object {
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
    }
    export module Element {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Element$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Element$Exceptions {
      export interface Static {
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.elementAlreadyRemoved(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.Element>,java.lang.Object)
        elementAlreadyRemoved(arg0: Class, arg1: object_t): object_t;
        elementAlreadyRemovedP(arg0: Class, arg1: object_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeAHiddenKey(java.lang.String)
        labelCanNotBeAHiddenKey(arg0: string_t): object_t;
        labelCanNotBeAHiddenKeyP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeEmpty()
        labelCanNotBeEmpty(): object_t;
        labelCanNotBeEmptyP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeNull()
        labelCanNotBeNull(): object_t;
        labelCanNotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.propertyAdditionNotSupported()
        propertyAdditionNotSupported(): object_t;
        propertyAdditionNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.providedKeyValuesMustBeAMultipleOfTwo()
        providedKeyValuesMustBeAMultipleOfTwo(): object_t;
        providedKeyValuesMustBeAMultipleOfTwoP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Element$Exceptions.providedKeyValuesMustHaveALegalKeyOnEvenIndices()
        providedKeyValuesMustHaveALegalKeyOnEvenIndices(): object_t;
        providedKeyValuesMustHaveALegalKeyOnEvenIndicesP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph extends Java.org.apache.tinkerpop.gremlin.structure.util.Host {
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.Object...)
      addVertex(...arg0: object_t[]): Vertex;
      addVertex(arg0: object_array_t): Vertex;
      addVertexP(...arg0: object_t[]): Promise<Vertex>;
      addVertexP(arg0: object_array_t): Promise<Vertex>;
      // public default org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.String)
      addVertex(arg0: string_t): Vertex;
      addVertexP(arg0: string_t): Promise<Vertex>;
      // public abstract void java.lang.AutoCloseable.close() throws java.lang.Exception
      close(): void;
      closeP(): Promise<void>;
      // public abstract <C> C org.apache.tinkerpop.gremlin.structure.Graph.compute(java.lang.Class<C>) throws java.lang.IllegalArgumentException
      compute(arg0: Class): GraphComputer;
      computeP(arg0: Class): Promise<GraphComputer>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer org.apache.tinkerpop.gremlin.structure.Graph.compute() throws java.lang.IllegalArgumentException
      compute(): GraphComputer;
      computeP(): Promise<GraphComputer>;
      // public abstract org.apache.commons.configuration.Configuration org.apache.tinkerpop.gremlin.structure.Graph.configuration()
      configuration(): object_t;
      configurationP(): Promise<object_t>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.structure.Graph.edges(java.lang.Object...)
      edges(...arg0: object_t[]): Iterator;
      edges(arg0: object_array_t): Iterator;
      edgesP(...arg0: object_t[]): Promise<Iterator>;
      edgesP(arg0: object_array_t): Promise<Iterator>;
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features org.apache.tinkerpop.gremlin.structure.Graph.features()
      features(): Graph$Features;
      featuresP(): Promise<Graph$Features>;
      // public default <I> I org.apache.tinkerpop.gremlin.structure.Graph.io(org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<I>)
      io(arg0: Io$Builder): Io;
      ioP(arg0: Io$Builder): Promise<Io>;
      // public default <C> C org.apache.tinkerpop.gremlin.structure.Graph.traversal(org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder<C>)
      traversal(arg0: TraversalSource$Builder): TraversalSource;
      traversalP(arg0: TraversalSource$Builder): Promise<TraversalSource>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource org.apache.tinkerpop.gremlin.structure.Graph.traversal()
      traversal(): GraphTraversalSource;
      traversalP(): Promise<GraphTraversalSource>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Transaction org.apache.tinkerpop.gremlin.structure.Graph.tx()
      tx(): Transaction;
      txP(): Promise<Transaction>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph$Variables org.apache.tinkerpop.gremlin.structure.Graph.variables()
      variables(): Graph$Variables;
      variablesP(): Promise<Graph$Variables>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.Graph.vertices(java.lang.Object...)
      vertices(...arg0: object_t[]): Iterator;
      vertices(arg0: object_array_t): Iterator;
      verticesP(...arg0: object_t[]): Promise<Iterator>;
      verticesP(arg0: object_array_t): Promise<Iterator>;
    }
    export module Graph {
      export interface Static {
        GRAPH: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Graph$Exceptions {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.Graph$Exceptions;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.argumentCanNotBeNull(java.lang.String)
        argumentCanNotBeNull(arg0: string_t): object_t;
        argumentCanNotBeNullP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.edgeWithIdAlreadyExists(java.lang.Object)
        edgeWithIdAlreadyExists(arg0: object_t): object_t;
        edgeWithIdAlreadyExistsP(arg0: object_t): Promise<object_t>;
        // public static java.util.NoSuchElementException org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.elementNotFound(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.Element>,java.lang.Object)
        elementNotFound(arg0: Class, arg1: object_t): NoSuchElementException;
        elementNotFoundP(arg0: Class, arg1: object_t): Promise<NoSuchElementException>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.graphComputerNotSupported()
        graphComputerNotSupported(): object_t;
        graphComputerNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.graphDoesNotSupportProvidedGraphComputer(java.lang.Class)
        graphDoesNotSupportProvidedGraphComputer(arg0: Class): object_t;
        graphDoesNotSupportProvidedGraphComputerP(arg0: Class): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.idArgsMustBeEitherIdOrElement()
        idArgsMustBeEitherIdOrElement(): object_t;
        idArgsMustBeEitherIdOrElementP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.transactionsNotSupported()
        transactionsNotSupported(): object_t;
        transactionsNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.traversalEngineNotSupported(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine)
        traversalEngineNotSupported(arg0: TraversalEngine): object_t;
        traversalEngineNotSupportedP(arg0: TraversalEngine): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.variablesNotSupported()
        variablesNotSupported(): object_t;
        variablesNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.vertexAdditionsNotSupported()
        vertexAdditionsNotSupported(): object_t;
        vertexAdditionsNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.vertexWithIdAlreadyExists(java.lang.Object)
        vertexWithIdAlreadyExists(arg0: object_t): object_t;
        vertexWithIdAlreadyExistsP(arg0: object_t): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Features extends Java.java.lang.Object {
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features.edge()
      edge(): Graph$Features$EdgeFeatures;
      edgeP(): Promise<Graph$Features$EdgeFeatures>;
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features.graph()
      graph(): Graph$Features$GraphFeatures;
      graphP(): Promise<Graph$Features$GraphFeatures>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features.supports(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet>,java.lang.String) throws java.lang.NoSuchMethodException,java.lang.IllegalAccessException,java.lang.reflect.InvocationTargetException
      supports(arg0: Class, arg1: string_t): boolean;
      supportsP(arg0: Class, arg1: string_t): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features.vertex()
      vertex(): Graph$Features$VertexFeatures;
      vertexP(): Promise<Graph$Features$VertexFeatures>;
    }
    export module Graph$Features {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Features$DataTypeFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet {
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanArrayValues()
      supportsBooleanArrayValues(): boolean;
      supportsBooleanArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanValues()
      supportsBooleanValues(): boolean;
      supportsBooleanValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteArrayValues()
      supportsByteArrayValues(): boolean;
      supportsByteArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteValues()
      supportsByteValues(): boolean;
      supportsByteValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleArrayValues()
      supportsDoubleArrayValues(): boolean;
      supportsDoubleArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleValues()
      supportsDoubleValues(): boolean;
      supportsDoubleValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatArrayValues()
      supportsFloatArrayValues(): boolean;
      supportsFloatArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatValues()
      supportsFloatValues(): boolean;
      supportsFloatValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerArrayValues()
      supportsIntegerArrayValues(): boolean;
      supportsIntegerArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerValues()
      supportsIntegerValues(): boolean;
      supportsIntegerValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongArrayValues()
      supportsLongArrayValues(): boolean;
      supportsLongArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongValues()
      supportsLongValues(): boolean;
      supportsLongValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMapValues()
      supportsMapValues(): boolean;
      supportsMapValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMixedListValues()
      supportsMixedListValues(): boolean;
      supportsMixedListValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsSerializableValues()
      supportsSerializableValues(): boolean;
      supportsSerializableValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringArrayValues()
      supportsStringArrayValues(): boolean;
      supportsStringArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringValues()
      supportsStringValues(): boolean;
      supportsStringValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsUniformListValues()
      supportsUniformListValues(): boolean;
      supportsUniformListValuesP(): Promise<boolean>;
    }
    export module Graph$Features$DataTypeFeatures {
      export interface Static {
        FEATURE_BOOLEAN_VALUES: string;
        FEATURE_BYTE_VALUES: string;
        FEATURE_DOUBLE_VALUES: string;
        FEATURE_FLOAT_VALUES: string;
        FEATURE_INTEGER_VALUES: string;
        FEATURE_LONG_VALUES: string;
        FEATURE_MAP_VALUES: string;
        FEATURE_MIXED_LIST_VALUES: string;
        FEATURE_BOOLEAN_ARRAY_VALUES: string;
        FEATURE_BYTE_ARRAY_VALUES: string;
        FEATURE_DOUBLE_ARRAY_VALUES: string;
        FEATURE_FLOAT_ARRAY_VALUES: string;
        FEATURE_INTEGER_ARRAY_VALUES: string;
        FEATURE_LONG_ARRAY_VALUES: string;
        FEATURE_SERIALIZABLE_VALUES: string;
        FEATURE_STRING_ARRAY_VALUES: string;
        FEATURE_STRING_VALUES: string;
        FEATURE_UNIFORM_LIST_VALUES: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Features$EdgeFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures {
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.properties()
      properties(): Graph$Features$EdgePropertyFeatures;
      propertiesP(): Promise<Graph$Features$EdgePropertyFeatures>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.supportsAddEdges()
      supportsAddEdges(): boolean;
      supportsAddEdgesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.supportsRemoveEdges()
      supportsRemoveEdges(): boolean;
      supportsRemoveEdgesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
    }
    export module Graph$Features$EdgeFeatures {
      export interface Static {
        FEATURE_ADD_EDGES: string;
        FEATURE_REMOVE_EDGES: string;
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Features$EdgePropertyFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures {
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanArrayValues()
      supportsBooleanArrayValues(): boolean;
      supportsBooleanArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanValues()
      supportsBooleanValues(): boolean;
      supportsBooleanValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteArrayValues()
      supportsByteArrayValues(): boolean;
      supportsByteArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteValues()
      supportsByteValues(): boolean;
      supportsByteValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleArrayValues()
      supportsDoubleArrayValues(): boolean;
      supportsDoubleArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleValues()
      supportsDoubleValues(): boolean;
      supportsDoubleValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatArrayValues()
      supportsFloatArrayValues(): boolean;
      supportsFloatArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatValues()
      supportsFloatValues(): boolean;
      supportsFloatValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerArrayValues()
      supportsIntegerArrayValues(): boolean;
      supportsIntegerArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerValues()
      supportsIntegerValues(): boolean;
      supportsIntegerValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongArrayValues()
      supportsLongArrayValues(): boolean;
      supportsLongArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongValues()
      supportsLongValues(): boolean;
      supportsLongValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMapValues()
      supportsMapValues(): boolean;
      supportsMapValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMixedListValues()
      supportsMixedListValues(): boolean;
      supportsMixedListValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.supportsProperties()
      supportsProperties(): boolean;
      supportsPropertiesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsSerializableValues()
      supportsSerializableValues(): boolean;
      supportsSerializableValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringArrayValues()
      supportsStringArrayValues(): boolean;
      supportsStringArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringValues()
      supportsStringValues(): boolean;
      supportsStringValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsUniformListValues()
      supportsUniformListValues(): boolean;
      supportsUniformListValuesP(): Promise<boolean>;
    }
    export module Graph$Features$EdgePropertyFeatures {
      export interface Static {
        FEATURE_PROPERTIES: string;
        FEATURE_BOOLEAN_VALUES: string;
        FEATURE_BYTE_VALUES: string;
        FEATURE_DOUBLE_VALUES: string;
        FEATURE_FLOAT_VALUES: string;
        FEATURE_INTEGER_VALUES: string;
        FEATURE_LONG_VALUES: string;
        FEATURE_MAP_VALUES: string;
        FEATURE_MIXED_LIST_VALUES: string;
        FEATURE_BOOLEAN_ARRAY_VALUES: string;
        FEATURE_BYTE_ARRAY_VALUES: string;
        FEATURE_DOUBLE_ARRAY_VALUES: string;
        FEATURE_FLOAT_ARRAY_VALUES: string;
        FEATURE_INTEGER_ARRAY_VALUES: string;
        FEATURE_LONG_ARRAY_VALUES: string;
        FEATURE_SERIALIZABLE_VALUES: string;
        FEATURE_STRING_ARRAY_VALUES: string;
        FEATURE_STRING_VALUES: string;
        FEATURE_UNIFORM_LIST_VALUES: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Features$ElementFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet {
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
    }
    export module Graph$Features$ElementFeatures {
      export interface Static {
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Features$FeatureSet extends Java.java.lang.Object {
    }
    export module Graph$Features$FeatureSet {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Features$GraphFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet {
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsComputer()
      supportsComputer(): boolean;
      supportsComputerP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsPersistence()
      supportsPersistence(): boolean;
      supportsPersistenceP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsThreadedTransactions()
      supportsThreadedTransactions(): boolean;
      supportsThreadedTransactionsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsTransactions()
      supportsTransactions(): boolean;
      supportsTransactionsP(): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.variables()
      variables(): Graph$Features$VariableFeatures;
      variablesP(): Promise<Graph$Features$VariableFeatures>;
    }
    export module Graph$Features$GraphFeatures {
      export interface Static {
        FEATURE_COMPUTER: string;
        FEATURE_TRANSACTIONS: string;
        FEATURE_PERSISTENCE: string;
        FEATURE_THREADED_TRANSACTIONS: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Features$PropertyFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures {
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanArrayValues()
      supportsBooleanArrayValues(): boolean;
      supportsBooleanArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanValues()
      supportsBooleanValues(): boolean;
      supportsBooleanValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteArrayValues()
      supportsByteArrayValues(): boolean;
      supportsByteArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteValues()
      supportsByteValues(): boolean;
      supportsByteValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleArrayValues()
      supportsDoubleArrayValues(): boolean;
      supportsDoubleArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleValues()
      supportsDoubleValues(): boolean;
      supportsDoubleValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatArrayValues()
      supportsFloatArrayValues(): boolean;
      supportsFloatArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatValues()
      supportsFloatValues(): boolean;
      supportsFloatValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerArrayValues()
      supportsIntegerArrayValues(): boolean;
      supportsIntegerArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerValues()
      supportsIntegerValues(): boolean;
      supportsIntegerValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongArrayValues()
      supportsLongArrayValues(): boolean;
      supportsLongArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongValues()
      supportsLongValues(): boolean;
      supportsLongValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMapValues()
      supportsMapValues(): boolean;
      supportsMapValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMixedListValues()
      supportsMixedListValues(): boolean;
      supportsMixedListValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.supportsProperties()
      supportsProperties(): boolean;
      supportsPropertiesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsSerializableValues()
      supportsSerializableValues(): boolean;
      supportsSerializableValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringArrayValues()
      supportsStringArrayValues(): boolean;
      supportsStringArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringValues()
      supportsStringValues(): boolean;
      supportsStringValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsUniformListValues()
      supportsUniformListValues(): boolean;
      supportsUniformListValuesP(): Promise<boolean>;
    }
    export module Graph$Features$PropertyFeatures {
      export interface Static {
        FEATURE_PROPERTIES: string;
        FEATURE_BOOLEAN_VALUES: string;
        FEATURE_BYTE_VALUES: string;
        FEATURE_DOUBLE_VALUES: string;
        FEATURE_FLOAT_VALUES: string;
        FEATURE_INTEGER_VALUES: string;
        FEATURE_LONG_VALUES: string;
        FEATURE_MAP_VALUES: string;
        FEATURE_MIXED_LIST_VALUES: string;
        FEATURE_BOOLEAN_ARRAY_VALUES: string;
        FEATURE_BYTE_ARRAY_VALUES: string;
        FEATURE_DOUBLE_ARRAY_VALUES: string;
        FEATURE_FLOAT_ARRAY_VALUES: string;
        FEATURE_INTEGER_ARRAY_VALUES: string;
        FEATURE_LONG_ARRAY_VALUES: string;
        FEATURE_SERIALIZABLE_VALUES: string;
        FEATURE_STRING_ARRAY_VALUES: string;
        FEATURE_STRING_VALUES: string;
        FEATURE_UNIFORM_LIST_VALUES: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Features$VariableFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures {
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanArrayValues()
      supportsBooleanArrayValues(): boolean;
      supportsBooleanArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanValues()
      supportsBooleanValues(): boolean;
      supportsBooleanValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteArrayValues()
      supportsByteArrayValues(): boolean;
      supportsByteArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteValues()
      supportsByteValues(): boolean;
      supportsByteValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleArrayValues()
      supportsDoubleArrayValues(): boolean;
      supportsDoubleArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleValues()
      supportsDoubleValues(): boolean;
      supportsDoubleValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatArrayValues()
      supportsFloatArrayValues(): boolean;
      supportsFloatArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatValues()
      supportsFloatValues(): boolean;
      supportsFloatValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerArrayValues()
      supportsIntegerArrayValues(): boolean;
      supportsIntegerArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerValues()
      supportsIntegerValues(): boolean;
      supportsIntegerValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongArrayValues()
      supportsLongArrayValues(): boolean;
      supportsLongArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongValues()
      supportsLongValues(): boolean;
      supportsLongValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMapValues()
      supportsMapValues(): boolean;
      supportsMapValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMixedListValues()
      supportsMixedListValues(): boolean;
      supportsMixedListValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsSerializableValues()
      supportsSerializableValues(): boolean;
      supportsSerializableValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringArrayValues()
      supportsStringArrayValues(): boolean;
      supportsStringArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringValues()
      supportsStringValues(): boolean;
      supportsStringValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsUniformListValues()
      supportsUniformListValues(): boolean;
      supportsUniformListValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures.supportsVariables()
      supportsVariables(): boolean;
      supportsVariablesP(): Promise<boolean>;
    }
    export module Graph$Features$VariableFeatures {
      export interface Static {
        FEATURE_VARIABLES: string;
        FEATURE_BOOLEAN_VALUES: string;
        FEATURE_BYTE_VALUES: string;
        FEATURE_DOUBLE_VALUES: string;
        FEATURE_FLOAT_VALUES: string;
        FEATURE_INTEGER_VALUES: string;
        FEATURE_LONG_VALUES: string;
        FEATURE_MAP_VALUES: string;
        FEATURE_MIXED_LIST_VALUES: string;
        FEATURE_BOOLEAN_ARRAY_VALUES: string;
        FEATURE_BYTE_ARRAY_VALUES: string;
        FEATURE_DOUBLE_ARRAY_VALUES: string;
        FEATURE_FLOAT_ARRAY_VALUES: string;
        FEATURE_INTEGER_ARRAY_VALUES: string;
        FEATURE_LONG_ARRAY_VALUES: string;
        FEATURE_SERIALIZABLE_VALUES: string;
        FEATURE_STRING_ARRAY_VALUES: string;
        FEATURE_STRING_VALUES: string;
        FEATURE_UNIFORM_LIST_VALUES: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Features$VertexFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures {
      // public default org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.getCardinality(java.lang.String)
      getCardinality(arg0: string_t): VertexProperty$Cardinality;
      getCardinalityP(arg0: string_t): Promise<VertexProperty$Cardinality>;
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.properties()
      properties(): Graph$Features$VertexPropertyFeatures;
      propertiesP(): Promise<Graph$Features$VertexPropertyFeatures>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsAddVertices()
      supportsAddVertices(): boolean;
      supportsAddVerticesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsMetaProperties()
      supportsMetaProperties(): boolean;
      supportsMetaPropertiesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsMultiProperties()
      supportsMultiProperties(): boolean;
      supportsMultiPropertiesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsRemoveVertices()
      supportsRemoveVertices(): boolean;
      supportsRemoveVerticesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
    }
    export module Graph$Features$VertexFeatures {
      export interface Static {
        FEATURE_ADD_VERTICES: string;
        FEATURE_MULTI_PROPERTIES: string;
        FEATURE_META_PROPERTIES: string;
        FEATURE_REMOVE_VERTICES: string;
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Features$VertexPropertyFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures {
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanArrayValues()
      supportsBooleanArrayValues(): boolean;
      supportsBooleanArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanValues()
      supportsBooleanValues(): boolean;
      supportsBooleanValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteArrayValues()
      supportsByteArrayValues(): boolean;
      supportsByteArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteValues()
      supportsByteValues(): boolean;
      supportsByteValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleArrayValues()
      supportsDoubleArrayValues(): boolean;
      supportsDoubleArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleValues()
      supportsDoubleValues(): boolean;
      supportsDoubleValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatArrayValues()
      supportsFloatArrayValues(): boolean;
      supportsFloatArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatValues()
      supportsFloatValues(): boolean;
      supportsFloatValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerArrayValues()
      supportsIntegerArrayValues(): boolean;
      supportsIntegerArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerValues()
      supportsIntegerValues(): boolean;
      supportsIntegerValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongArrayValues()
      supportsLongArrayValues(): boolean;
      supportsLongArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongValues()
      supportsLongValues(): boolean;
      supportsLongValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMapValues()
      supportsMapValues(): boolean;
      supportsMapValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMixedListValues()
      supportsMixedListValues(): boolean;
      supportsMixedListValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.supportsProperties()
      supportsProperties(): boolean;
      supportsPropertiesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsSerializableValues()
      supportsSerializableValues(): boolean;
      supportsSerializableValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringArrayValues()
      supportsStringArrayValues(): boolean;
      supportsStringArrayValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringValues()
      supportsStringValues(): boolean;
      supportsStringValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsUniformListValues()
      supportsUniformListValues(): boolean;
      supportsUniformListValuesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
    }
    export module Graph$Features$VertexPropertyFeatures {
      export interface Static {
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_PROPERTIES: string;
        FEATURE_BOOLEAN_VALUES: string;
        FEATURE_BYTE_VALUES: string;
        FEATURE_DOUBLE_VALUES: string;
        FEATURE_FLOAT_VALUES: string;
        FEATURE_INTEGER_VALUES: string;
        FEATURE_LONG_VALUES: string;
        FEATURE_MAP_VALUES: string;
        FEATURE_MIXED_LIST_VALUES: string;
        FEATURE_BOOLEAN_ARRAY_VALUES: string;
        FEATURE_BYTE_ARRAY_VALUES: string;
        FEATURE_DOUBLE_ARRAY_VALUES: string;
        FEATURE_FLOAT_ARRAY_VALUES: string;
        FEATURE_INTEGER_ARRAY_VALUES: string;
        FEATURE_LONG_ARRAY_VALUES: string;
        FEATURE_SERIALIZABLE_VALUES: string;
        FEATURE_STRING_ARRAY_VALUES: string;
        FEATURE_STRING_VALUES: string;
        FEATURE_UNIFORM_LIST_VALUES: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Hidden extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Graph$Hidden {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.Graph$Hidden;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.Graph$Hidden.hide(java.lang.String)
        hide(arg0: string_t): string;
        hideP(arg0: string_t): Promise<string>;
        // public static boolean org.apache.tinkerpop.gremlin.structure.Graph$Hidden.isHidden(java.lang.String)
        isHidden(arg0: string_t): boolean;
        isHiddenP(arg0: string_t): Promise<boolean>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.Graph$Hidden.unHide(java.lang.String)
        unHide(arg0: string_t): string;
        unHideP(arg0: string_t): Promise<string>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$OptIn extends Java.java.lang.Object {
      // public abstract java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.annotation.Annotation.annotationType()
      annotationType(): Class;
      annotationTypeP(): Promise<Class>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Graph$OptIn.value()
      value(): string;
      valueP(): Promise<string>;
    }
    export module Graph$OptIn {
      export interface Static {
        SUITE_STRUCTURE_STANDARD: string;
        SUITE_STRUCTURE_INTEGRATE: string;
        SUITE_STRUCTURE_PERFORMANCE: string;
        SUITE_PROCESS_COMPUTER: string;
        SUITE_PROCESS_STANDARD: string;
        SUITE_PROCESS_PERFORMANCE: string;
        SUITE_GROOVY_PROCESS_STANDARD: string;
        SUITE_GROOVY_PROCESS_COMPUTER: string;
        SUITE_GROOVY_ENVIRONMENT: string;
        SUITE_GROOVY_ENVIRONMENT_INTEGRATE: string;
        SUITE_GROOVY_ENVIRONMENT_PERFORMANCE: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$OptIns extends Java.java.lang.Object {
      // public abstract java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.annotation.Annotation.annotationType()
      annotationType(): Class;
      annotationTypeP(): Promise<Class>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph$OptIn[] org.apache.tinkerpop.gremlin.structure.Graph$OptIns.value()
      value(): Graph$OptIn[];
      valueP(): Promise<Graph$OptIn[]>;
    }
    export module Graph$OptIns {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$OptOut extends Java.java.lang.Object {
      // public abstract java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.annotation.Annotation.annotationType()
      annotationType(): Class;
      annotationTypeP(): Promise<Class>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Graph$OptOut.method()
      method(): string;
      methodP(): Promise<string>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Graph$OptOut.reason()
      reason(): string;
      reasonP(): Promise<string>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Graph$OptOut.specific()
      specific(): string;
      specificP(): Promise<string>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Graph$OptOut.test()
      test(): string;
      testP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
    }
    export module Graph$OptOut {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$OptOuts extends Java.java.lang.Object {
      // public abstract java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.annotation.Annotation.annotationType()
      annotationType(): Class;
      annotationTypeP(): Promise<Class>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph$OptOut[] org.apache.tinkerpop.gremlin.structure.Graph$OptOuts.value()
      value(): Graph$OptOut[];
      valueP(): Promise<Graph$OptOut[]>;
    }
    export module Graph$OptOuts {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Variables extends Java.java.lang.Object {
      // public default java.util.Map<java.lang.String, java.lang.Object> org.apache.tinkerpop.gremlin.structure.Graph$Variables.asMap()
      asMap(): Map;
      asMapP(): Promise<Map>;
      // public abstract <R> java.util.Optional<R> org.apache.tinkerpop.gremlin.structure.Graph$Variables.get(java.lang.String)
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Graph$Variables.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Graph$Variables.remove(java.lang.String)
      remove(arg0: string_t): void;
      removeP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Graph$Variables.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
    }
    export module Graph$Variables {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Graph$Variables$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Graph$Variables$Exceptions {
      export interface Static {
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.dataTypeOfVariableValueNotSupported(java.lang.Object)
        dataTypeOfVariableValueNotSupported(arg0: object_t): object_t;
        dataTypeOfVariableValueNotSupportedP(arg0: object_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.variableKeyCanNotBeEmpty()
        variableKeyCanNotBeEmpty(): object_t;
        variableKeyCanNotBeEmptyP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.variableKeyCanNotBeNull()
        variableKeyCanNotBeNull(): object_t;
        variableKeyCanNotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.variableValueCanNotBeNull()
        variableValueCanNotBeNull(): object_t;
        variableValueCanNotBeNullP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface AbstractIoRegistry extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.IoRegistry {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract <S> java.util.List<org.javatuples.Pair<java.lang.Class, S>> org.apache.tinkerpop.gremlin.structure.io.IoRegistry.find(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.io.Io>,java.lang.Class<S>)
      find(arg0: Class, arg1: Class): List;
      findP(arg0: Class, arg1: Class): Promise<List>;
      // public abstract java.util.List<org.javatuples.Pair<java.lang.Class, java.lang.Object>> org.apache.tinkerpop.gremlin.structure.io.IoRegistry.find(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.io.Io>)
      find(arg0: Class): List;
      findP(arg0: Class): Promise<List>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractIoRegistry {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface GraphMigrator extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphMigrator {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.io.GraphMigrator;
        // public static void org.apache.tinkerpop.gremlin.structure.io.GraphMigrator.migrateGraph(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.tinkerpop.gremlin.structure.Graph,org.apache.tinkerpop.gremlin.structure.io.GraphReader,org.apache.tinkerpop.gremlin.structure.io.GraphWriter) throws java.io.IOException
        migrateGraph(arg0: Graph, arg1: Graph, arg2: GraphReader, arg3: GraphWriter): void;
        migrateGraphP(arg0: Graph, arg1: Graph, arg2: GraphReader, arg3: GraphWriter): Promise<void>;
        // public static void org.apache.tinkerpop.gremlin.structure.io.GraphMigrator.migrateGraph(org.apache.tinkerpop.gremlin.structure.Graph,org.apache.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
        migrateGraph(arg0: Graph, arg1: Graph): void;
        migrateGraphP(arg0: Graph, arg1: Graph): Promise<void>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphml {
    export interface GraphMLIo extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Io {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo.mapper()
      mapper(): GraphMLMapper$Builder;
      mapperP(): Promise<GraphMLMapper$Builder>;
      // public abstract M org.apache.tinkerpop.gremlin.structure.io.Io.mapper()
      mapper(): Mapper$Builder;
      mapperP(): Promise<Mapper$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo.reader()
      reader(): GraphMLReader$Builder;
      readerP(): Promise<GraphMLReader$Builder>;
      // public abstract R org.apache.tinkerpop.gremlin.structure.io.Io.reader()
      reader(): GraphReader$ReaderBuilder;
      readerP(): Promise<GraphReader$ReaderBuilder>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.Io.readGraph(java.lang.String) throws java.io.IOException
      readGraph(arg0: string_t): void;
      readGraphP(arg0: string_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.Io.writeGraph(java.lang.String) throws java.io.IOException
      writeGraph(arg0: string_t): void;
      writeGraphP(arg0: string_t): Promise<void>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo.writer()
      writer(): GraphMLWriter$Builder;
      writerP(): Promise<GraphMLWriter$Builder>;
      // public abstract W org.apache.tinkerpop.gremlin.structure.io.Io.writer()
      writer(): GraphWriter$WriterBuilder;
      writerP(): Promise<GraphWriter$WriterBuilder>;
    }
    export module GraphMLIo {
      export interface Static {
        new (arg0: Graph): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo;
        // public static org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo> org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo.build()
        build(): Io$Builder;
        buildP(): Promise<Io$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphml {
    export interface GraphMLIo$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Io$Builder {
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder.create()
      create(): GraphMLIo;
      createP(): Promise<GraphMLIo>;
      // public abstract I org.apache.tinkerpop.gremlin.structure.io.Io$Builder.create()
      create(): Io;
      createP(): Promise<Io>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<? extends org.apache.tinkerpop.gremlin.structure.io.Io> org.apache.tinkerpop.gremlin.structure.io.Io$Builder.graph(org.apache.tinkerpop.gremlin.structure.Graph)
      graph(arg0: Graph): Io$Builder;
      graphP(arg0: Graph): Promise<Io$Builder>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<? extends org.apache.tinkerpop.gremlin.structure.io.Io> org.apache.tinkerpop.gremlin.structure.io.Io$Builder.registry(org.apache.tinkerpop.gremlin.structure.io.IoRegistry)
      registry(arg0: IoRegistry): Io$Builder;
      registryP(arg0: IoRegistry): Promise<Io$Builder>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphMLIo$Builder {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphml {
    export interface GraphMLMapper extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Mapper {
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.Mapper.createMapper()
      createMapper(): object_t;
      createMapperP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphMLMapper {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper;
        // public static org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper.build()
        build(): GraphMLMapper$Builder;
        buildP(): Promise<GraphMLMapper$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphml {
    export interface GraphMLMapper$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder {
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder.addRegistry(org.apache.tinkerpop.gremlin.structure.io.IoRegistry)
      addRegistry(arg0: IoRegistry): GraphMLMapper$Builder;
      addRegistryP(arg0: IoRegistry): Promise<GraphMLMapper$Builder>;
      // public abstract B org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder.addRegistry(org.apache.tinkerpop.gremlin.structure.io.IoRegistry)
      addRegistry(arg0: IoRegistry): Mapper$Builder;
      addRegistryP(arg0: IoRegistry): Promise<Mapper$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder.create()
      create(): GraphMLMapper;
      createP(): Promise<GraphMLMapper>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphMLMapper$Builder {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphml {
    export interface GraphMLReader extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Edge org.apache.tinkerpop.gremlin.structure.io.GraphReader.readEdge(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>) throws java.io.IOException
      readEdge(arg0: InputStream, arg1: Function): Edge;
      readEdgeP(arg0: InputStream, arg1: Function): Promise<Edge>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphReader.readGraph(java.io.InputStream,org.apache.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
      readGraph(arg0: InputStream, arg1: Graph): void;
      readGraphP(arg0: InputStream, arg1: Graph): Promise<void>;
      // public abstract <C> C org.apache.tinkerpop.gremlin.structure.io.GraphReader.readObject(java.io.InputStream,java.lang.Class<? extends C>) throws java.io.IOException
      readObject(arg0: InputStream, arg1: Class): object_t;
      readObjectP(arg0: InputStream, arg1: Class): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Property org.apache.tinkerpop.gremlin.structure.io.GraphReader.readProperty(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Property>, org.apache.tinkerpop.gremlin.structure.Property>) throws java.io.IOException
      readProperty(arg0: InputStream, arg1: Function): Property;
      readPropertyP(arg0: InputStream, arg1: Function): Promise<Property>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertex(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      readVertex(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Vertex;
      readVertexP(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Promise<Vertex>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertex(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>) throws java.io.IOException
      readVertex(arg0: InputStream, arg1: Function): Vertex;
      readVertexP(arg0: InputStream, arg1: Function): Promise<Vertex>;
      // public abstract org.apache.tinkerpop.gremlin.structure.VertexProperty org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertexProperty(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.VertexProperty>, org.apache.tinkerpop.gremlin.structure.VertexProperty>) throws java.io.IOException
      readVertexProperty(arg0: InputStream, arg1: Function): VertexProperty;
      readVertexPropertyP(arg0: InputStream, arg1: Function): Promise<VertexProperty>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertices(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      readVertices(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Iterator;
      readVerticesP(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Promise<Iterator>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphMLReader {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader.build()
        build(): GraphMLReader$Builder;
        buildP(): Promise<GraphMLReader$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphml {
    export interface GraphMLReader$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder {
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder.batchSize(long)
      batchSize(arg0: long_t): GraphMLReader$Builder;
      batchSizeP(arg0: long_t): Promise<GraphMLReader$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder.create()
      create(): GraphMLReader;
      createP(): Promise<GraphMLReader>;
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder.create()
      create(): GraphReader;
      createP(): Promise<GraphReader>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder.edgeLabelKey(java.lang.String)
      edgeLabelKey(arg0: string_t): GraphMLReader$Builder;
      edgeLabelKeyP(arg0: string_t): Promise<GraphMLReader$Builder>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder.vertexLabelKey(java.lang.String)
      vertexLabelKey(arg0: string_t): GraphMLReader$Builder;
      vertexLabelKeyP(arg0: string_t): Promise<GraphMLReader$Builder>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphMLReader$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphml {
    export interface GraphMLWriter extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeEdge(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Edge) throws java.io.IOException
      writeEdge(arg0: OutputStream, arg1: Edge): void;
      writeEdgeP(arg0: OutputStream, arg1: Edge): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeGraph(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
      writeGraph(arg0: OutputStream, arg1: Graph): void;
      writeGraphP(arg0: OutputStream, arg1: Graph): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeObject(java.io.OutputStream,java.lang.Object) throws java.io.IOException
      writeObject(arg0: OutputStream, arg1: object_t): void;
      writeObjectP(arg0: OutputStream, arg1: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeProperty(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Property) throws java.io.IOException
      writeProperty(arg0: OutputStream, arg1: Property): void;
      writePropertyP(arg0: OutputStream, arg1: Property): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertex(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      writeVertex(arg0: OutputStream, arg1: Vertex, arg2: Direction): void;
      writeVertexP(arg0: OutputStream, arg1: Vertex, arg2: Direction): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertex(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Vertex) throws java.io.IOException
      writeVertex(arg0: OutputStream, arg1: Vertex): void;
      writeVertexP(arg0: OutputStream, arg1: Vertex): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertexProperty(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.VertexProperty) throws java.io.IOException
      writeVertexProperty(arg0: OutputStream, arg1: VertexProperty): void;
      writeVertexPropertyP(arg0: OutputStream, arg1: VertexProperty): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertices(java.io.OutputStream,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      writeVertices(arg0: OutputStream, arg1: Iterator, arg2: Direction): void;
      writeVerticesP(arg0: OutputStream, arg1: Iterator, arg2: Direction): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertices(java.io.OutputStream,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>) throws java.io.IOException
      writeVertices(arg0: OutputStream, arg1: Iterator): void;
      writeVerticesP(arg0: OutputStream, arg1: Iterator): Promise<void>;
    }
    export module GraphMLWriter {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter.build()
        build(): GraphMLWriter$Builder;
        buildP(): Promise<GraphMLWriter$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphml {
    export interface GraphMLWriter$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder {
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder.create()
      create(): GraphMLWriter;
      createP(): Promise<GraphMLWriter>;
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder.create()
      create(): GraphWriter;
      createP(): Promise<GraphWriter>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder.edgeKeyTypes(java.util.Map<java.lang.String, java.lang.String>)
      edgeKeyTypes(arg0: Map): GraphMLWriter$Builder;
      edgeKeyTypesP(arg0: Map): Promise<GraphMLWriter$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder.edgeLabelKey(java.lang.String)
      edgeLabelKey(arg0: string_t): GraphMLWriter$Builder;
      edgeLabelKeyP(arg0: string_t): Promise<GraphMLWriter$Builder>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder.normalize(boolean)
      normalize(arg0: boolean_t): GraphMLWriter$Builder;
      normalizeP(arg0: boolean_t): Promise<GraphMLWriter$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder.vertexKeyTypes(java.util.Map<java.lang.String, java.lang.String>)
      vertexKeyTypes(arg0: Map): GraphMLWriter$Builder;
      vertexKeyTypesP(arg0: Map): Promise<GraphMLWriter$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder.vertexLabelKey(java.lang.String)
      vertexLabelKey(arg0: string_t): GraphMLWriter$Builder;
      vertexLabelKeyP(arg0: string_t): Promise<GraphMLWriter$Builder>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder.xmlSchemaLocation(java.lang.String)
      xmlSchemaLocation(arg0: string_t): GraphMLWriter$Builder;
      xmlSchemaLocationP(arg0: string_t): Promise<GraphMLWriter$Builder>;
    }
    export module GraphMLWriter$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphml {
    export interface GraphMLWriterHelper$IndentingXMLStreamWriter extends Java.java.lang.Object {
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.close() throws javax.xml.stream.XMLStreamException
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.flush() throws javax.xml.stream.XMLStreamException
      flush(): void;
      flushP(): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.getIndentStep()
      getIndentStep(): number;
      getIndentStepP(): Promise<number>;
      // public javax.xml.namespace.NamespaceContext org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.getNamespaceContext()
      getNamespaceContext(): object_t;
      getNamespaceContextP(): Promise<object_t>;
      // public java.lang.String org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.getPrefix(java.lang.String) throws javax.xml.stream.XMLStreamException
      getPrefix(arg0: string_t): string;
      getPrefixP(arg0: string_t): Promise<string>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.getProperty(java.lang.String) throws java.lang.IllegalArgumentException
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.setDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException
      setDefaultNamespace(arg0: string_t): void;
      setDefaultNamespaceP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.setIndentStep(java.lang.String)
      setIndentStep(arg0: string_t): void;
      setIndentStepP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.setIndentStep(int)
      setIndentStep(arg0: integer_t): void;
      setIndentStepP(arg0: integer_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.setNamespaceContext(javax.xml.namespace.NamespaceContext) throws javax.xml.stream.XMLStreamException
      setNamespaceContext(arg0: object_t): void;
      setNamespaceContextP(arg0: object_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.setPrefix(java.lang.String,java.lang.String) throws javax.xml.stream.XMLStreamException
      setPrefix(arg0: string_t, arg1: string_t): void;
      setPrefixP(arg0: string_t, arg1: string_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws javax.xml.stream.XMLStreamException
      writeAttribute(arg0: string_t, arg1: string_t, arg2: string_t, arg3: string_t): void;
      writeAttributeP(arg0: string_t, arg1: string_t, arg2: string_t, arg3: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeAttribute(java.lang.String,java.lang.String,java.lang.String) throws javax.xml.stream.XMLStreamException
      writeAttribute(arg0: string_t, arg1: string_t, arg2: string_t): void;
      writeAttributeP(arg0: string_t, arg1: string_t, arg2: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeAttribute(java.lang.String,java.lang.String) throws javax.xml.stream.XMLStreamException
      writeAttribute(arg0: string_t, arg1: string_t): void;
      writeAttributeP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeCData(java.lang.String) throws javax.xml.stream.XMLStreamException
      writeCData(arg0: string_t): void;
      writeCDataP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeCharacters(char[],int,int) throws javax.xml.stream.XMLStreamException
      writeCharacters(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
      writeCharactersP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeCharacters(java.lang.String) throws javax.xml.stream.XMLStreamException
      writeCharacters(arg0: string_t): void;
      writeCharactersP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeComment(java.lang.String) throws javax.xml.stream.XMLStreamException
      writeComment(arg0: string_t): void;
      writeCommentP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException
      writeDefaultNamespace(arg0: string_t): void;
      writeDefaultNamespaceP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeDTD(java.lang.String) throws javax.xml.stream.XMLStreamException
      writeDTD(arg0: string_t): void;
      writeDTDP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeEmptyElement(java.lang.String,java.lang.String,java.lang.String) throws javax.xml.stream.XMLStreamException
      writeEmptyElement(arg0: string_t, arg1: string_t, arg2: string_t): void;
      writeEmptyElementP(arg0: string_t, arg1: string_t, arg2: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeEmptyElement(java.lang.String,java.lang.String) throws javax.xml.stream.XMLStreamException
      writeEmptyElement(arg0: string_t, arg1: string_t): void;
      writeEmptyElementP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeEmptyElement(java.lang.String) throws javax.xml.stream.XMLStreamException
      writeEmptyElement(arg0: string_t): void;
      writeEmptyElementP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeEndDocument() throws javax.xml.stream.XMLStreamException
      writeEndDocument(): void;
      writeEndDocumentP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeEndElement() throws javax.xml.stream.XMLStreamException
      writeEndElement(): void;
      writeEndElementP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeEntityRef(java.lang.String) throws javax.xml.stream.XMLStreamException
      writeEntityRef(arg0: string_t): void;
      writeEntityRefP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeNamespace(java.lang.String,java.lang.String) throws javax.xml.stream.XMLStreamException
      writeNamespace(arg0: string_t, arg1: string_t): void;
      writeNamespaceP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeProcessingInstruction(java.lang.String,java.lang.String) throws javax.xml.stream.XMLStreamException
      writeProcessingInstruction(arg0: string_t, arg1: string_t): void;
      writeProcessingInstructionP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeProcessingInstruction(java.lang.String) throws javax.xml.stream.XMLStreamException
      writeProcessingInstruction(arg0: string_t): void;
      writeProcessingInstructionP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeStartDocument(java.lang.String,java.lang.String) throws javax.xml.stream.XMLStreamException
      writeStartDocument(arg0: string_t, arg1: string_t): void;
      writeStartDocumentP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeStartDocument(java.lang.String) throws javax.xml.stream.XMLStreamException
      writeStartDocument(arg0: string_t): void;
      writeStartDocumentP(arg0: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeStartDocument() throws javax.xml.stream.XMLStreamException
      writeStartDocument(): void;
      writeStartDocumentP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeStartElement(java.lang.String,java.lang.String,java.lang.String) throws javax.xml.stream.XMLStreamException
      writeStartElement(arg0: string_t, arg1: string_t, arg2: string_t): void;
      writeStartElementP(arg0: string_t, arg1: string_t, arg2: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeStartElement(java.lang.String,java.lang.String) throws javax.xml.stream.XMLStreamException
      writeStartElement(arg0: string_t, arg1: string_t): void;
      writeStartElementP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.writeStartElement(java.lang.String) throws javax.xml.stream.XMLStreamException
      writeStartElement(arg0: string_t): void;
      writeStartElementP(arg0: string_t): Promise<void>;
    }
    export module GraphMLWriterHelper$IndentingXMLStreamWriter {
      export interface Static {
        new (arg0: object_t): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface GraphReader extends Java.java.lang.Object {
      // public abstract org.apache.tinkerpop.gremlin.structure.Edge org.apache.tinkerpop.gremlin.structure.io.GraphReader.readEdge(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>) throws java.io.IOException
      readEdge(arg0: InputStream, arg1: Function): Edge;
      readEdgeP(arg0: InputStream, arg1: Function): Promise<Edge>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphReader.readGraph(java.io.InputStream,org.apache.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
      readGraph(arg0: InputStream, arg1: Graph): void;
      readGraphP(arg0: InputStream, arg1: Graph): Promise<void>;
      // public abstract <C> C org.apache.tinkerpop.gremlin.structure.io.GraphReader.readObject(java.io.InputStream,java.lang.Class<? extends C>) throws java.io.IOException
      readObject(arg0: InputStream, arg1: Class): object_t;
      readObjectP(arg0: InputStream, arg1: Class): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Property org.apache.tinkerpop.gremlin.structure.io.GraphReader.readProperty(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Property>, org.apache.tinkerpop.gremlin.structure.Property>) throws java.io.IOException
      readProperty(arg0: InputStream, arg1: Function): Property;
      readPropertyP(arg0: InputStream, arg1: Function): Promise<Property>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertex(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      readVertex(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Vertex;
      readVertexP(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Promise<Vertex>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertex(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>) throws java.io.IOException
      readVertex(arg0: InputStream, arg1: Function): Vertex;
      readVertexP(arg0: InputStream, arg1: Function): Promise<Vertex>;
      // public abstract org.apache.tinkerpop.gremlin.structure.VertexProperty org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertexProperty(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.VertexProperty>, org.apache.tinkerpop.gremlin.structure.VertexProperty>) throws java.io.IOException
      readVertexProperty(arg0: InputStream, arg1: Function): VertexProperty;
      readVertexPropertyP(arg0: InputStream, arg1: Function): Promise<VertexProperty>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertices(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      readVertices(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Iterator;
      readVerticesP(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Promise<Iterator>;
    }
    export module GraphReader {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface GraphReader$ReaderBuilder extends Java.java.lang.Object {
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder.create()
      create(): GraphReader;
      createP(): Promise<GraphReader>;
    }
    export module GraphReader$ReaderBuilder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONIo extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Io {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo.mapper()
      mapper(): GraphSONMapper$Builder;
      mapperP(): Promise<GraphSONMapper$Builder>;
      // public abstract M org.apache.tinkerpop.gremlin.structure.io.Io.mapper()
      mapper(): Mapper$Builder;
      mapperP(): Promise<Mapper$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo.reader()
      reader(): GraphSONReader$Builder;
      readerP(): Promise<GraphSONReader$Builder>;
      // public abstract R org.apache.tinkerpop.gremlin.structure.io.Io.reader()
      reader(): GraphReader$ReaderBuilder;
      readerP(): Promise<GraphReader$ReaderBuilder>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.Io.readGraph(java.lang.String) throws java.io.IOException
      readGraph(arg0: string_t): void;
      readGraphP(arg0: string_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.Io.writeGraph(java.lang.String) throws java.io.IOException
      writeGraph(arg0: string_t): void;
      writeGraphP(arg0: string_t): Promise<void>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo.writer()
      writer(): GraphSONWriter$Builder;
      writerP(): Promise<GraphSONWriter$Builder>;
      // public abstract W org.apache.tinkerpop.gremlin.structure.io.Io.writer()
      writer(): GraphWriter$WriterBuilder;
      writerP(): Promise<GraphWriter$WriterBuilder>;
    }
    export module GraphSONIo {
      export interface Static {
        new (arg0: IoRegistry, arg1: Graph): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo;
        // public static org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo> org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo.build()
        build(): Io$Builder;
        buildP(): Promise<Io$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONIo$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Io$Builder {
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder.create()
      create(): GraphSONIo;
      createP(): Promise<GraphSONIo>;
      // public abstract I org.apache.tinkerpop.gremlin.structure.io.Io$Builder.create()
      create(): Io;
      createP(): Promise<Io>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<? extends org.apache.tinkerpop.gremlin.structure.io.Io> org.apache.tinkerpop.gremlin.structure.io.Io$Builder.graph(org.apache.tinkerpop.gremlin.structure.Graph)
      graph(arg0: Graph): Io$Builder;
      graphP(arg0: Graph): Promise<Io$Builder>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<? extends org.apache.tinkerpop.gremlin.structure.io.Io> org.apache.tinkerpop.gremlin.structure.io.Io$Builder.registry(org.apache.tinkerpop.gremlin.structure.io.IoRegistry)
      registry(arg0: IoRegistry): Io$Builder;
      registryP(arg0: IoRegistry): Promise<Io$Builder>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONIo$Builder {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONMapper extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Mapper {
      // public com.fasterxml.jackson.databind.ObjectMapper org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper.createMapper()
      createMapper(): object_t;
      createMapperP(): Promise<object_t>;
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.Mapper.createMapper()
      createMapper(): object_t;
      createMapperP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper.getVersion()
      getVersion(): GraphSONVersion;
      getVersionP(): Promise<GraphSONVersion>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONMapper {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper.build()
        build(): GraphSONMapper$Builder;
        buildP(): Promise<GraphSONMapper$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONMapper$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder {
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.addCustomModule(com.fasterxml.jackson.databind.module.SimpleModule)
      addCustomModule(arg0: object_t): GraphSONMapper$Builder;
      addCustomModuleP(arg0: object_t): Promise<GraphSONMapper$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.addRegistry(org.apache.tinkerpop.gremlin.structure.io.IoRegistry)
      addRegistry(arg0: IoRegistry): GraphSONMapper$Builder;
      addRegistryP(arg0: IoRegistry): Promise<GraphSONMapper$Builder>;
      // public abstract B org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder.addRegistry(org.apache.tinkerpop.gremlin.structure.io.IoRegistry)
      addRegistry(arg0: IoRegistry): Mapper$Builder;
      addRegistryP(arg0: IoRegistry): Promise<Mapper$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.create()
      create(): GraphSONMapper;
      createP(): Promise<GraphSONMapper>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.embedTypes(boolean)
      embedTypes(arg0: boolean_t): GraphSONMapper$Builder;
      embedTypesP(arg0: boolean_t): Promise<GraphSONMapper$Builder>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.loadCustomModules(boolean)
      loadCustomModules(arg0: boolean_t): GraphSONMapper$Builder;
      loadCustomModulesP(arg0: boolean_t): Promise<GraphSONMapper$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.normalize(boolean)
      normalize(arg0: boolean_t): GraphSONMapper$Builder;
      normalizeP(arg0: boolean_t): Promise<GraphSONMapper$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.version(org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion)
      version(arg0: GraphSONVersion): GraphSONMapper$Builder;
      versionP(arg0: GraphSONVersion): Promise<GraphSONMapper$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.version(java.lang.String)
      version(arg0: string_t): GraphSONMapper$Builder;
      versionP(arg0: string_t): Promise<GraphSONMapper$Builder>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONMapper$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONReader extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Edge org.apache.tinkerpop.gremlin.structure.io.GraphReader.readEdge(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>) throws java.io.IOException
      readEdge(arg0: InputStream, arg1: Function): Edge;
      readEdgeP(arg0: InputStream, arg1: Function): Promise<Edge>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphReader.readGraph(java.io.InputStream,org.apache.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
      readGraph(arg0: InputStream, arg1: Graph): void;
      readGraphP(arg0: InputStream, arg1: Graph): Promise<void>;
      // public abstract <C> C org.apache.tinkerpop.gremlin.structure.io.GraphReader.readObject(java.io.InputStream,java.lang.Class<? extends C>) throws java.io.IOException
      readObject(arg0: InputStream, arg1: Class): object_t;
      readObjectP(arg0: InputStream, arg1: Class): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Property org.apache.tinkerpop.gremlin.structure.io.GraphReader.readProperty(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Property>, org.apache.tinkerpop.gremlin.structure.Property>) throws java.io.IOException
      readProperty(arg0: InputStream, arg1: Function): Property;
      readPropertyP(arg0: InputStream, arg1: Function): Promise<Property>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertex(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      readVertex(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Vertex;
      readVertexP(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Promise<Vertex>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertex(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>) throws java.io.IOException
      readVertex(arg0: InputStream, arg1: Function): Vertex;
      readVertexP(arg0: InputStream, arg1: Function): Promise<Vertex>;
      // public abstract org.apache.tinkerpop.gremlin.structure.VertexProperty org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertexProperty(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.VertexProperty>, org.apache.tinkerpop.gremlin.structure.VertexProperty>) throws java.io.IOException
      readVertexProperty(arg0: InputStream, arg1: Function): VertexProperty;
      readVertexPropertyP(arg0: InputStream, arg1: Function): Promise<VertexProperty>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertices(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      readVertices(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Iterator;
      readVerticesP(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Promise<Iterator>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONReader {
      export interface Static {
        new (arg0: GraphSONMapper, arg1: long_t): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader;
        // public static org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.build()
        build(): GraphSONReader$Builder;
        buildP(): Promise<GraphSONReader$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONReader$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder {
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder.batchSize(long)
      batchSize(arg0: long_t): GraphSONReader$Builder;
      batchSizeP(arg0: long_t): Promise<GraphSONReader$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder.create()
      create(): GraphSONReader;
      createP(): Promise<GraphSONReader>;
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder.create()
      create(): GraphReader;
      createP(): Promise<GraphReader>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder.mapper(org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper)
      mapper(arg0: GraphSONMapper): GraphSONReader$Builder;
      mapperP(arg0: GraphSONMapper): Promise<GraphSONReader$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONReader$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONTokens extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONTokens {
      export interface Static {
        CLASS: string;
        ID: string;
        TYPE: string;
        VALUE: string;
        PROPERTIES: string;
        KEY: string;
        EDGE: string;
        VERTEX: string;
        IN: string;
        OUT: string;
        IN_E: string;
        OUT_E: string;
        LABEL: string;
        LABELS: string;
        OBJECTS: string;
        IN_LABEL: string;
        OUT_LABEL: string;
        METRICS: string;
        DURATION: string;
        NAME: string;
        COUNTS: string;
        ANNOTATIONS: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONUtil extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONUtil {
      export interface Static {
        // public static void org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil.writeWithType(java.lang.String,java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer) throws java.io.IOException
        writeWithType(arg0: string_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t): void;
        writeWithTypeP(arg0: string_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t): Promise<void>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONVersion extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONModule$GraphSONModuleBuilder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion.getBuilder()
      getBuilder(): object_t;
      getBuilderP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public java.lang.String org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion.getVersion()
      getVersion(): string;
      getVersionP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONVersion {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion.valueOf(java.lang.String)
        valueOf(arg0: string_t): GraphSONVersion;
        valueOfP(arg0: string_t): Promise<GraphSONVersion>;
        // public static org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion[] org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion.values()
        values(): GraphSONVersion[];
        valuesP(): Promise<GraphSONVersion[]>;
        V1_0: GraphSONVersion;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONWriter extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeEdge(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Edge) throws java.io.IOException
      writeEdge(arg0: OutputStream, arg1: Edge): void;
      writeEdgeP(arg0: OutputStream, arg1: Edge): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeGraph(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
      writeGraph(arg0: OutputStream, arg1: Graph): void;
      writeGraphP(arg0: OutputStream, arg1: Graph): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeObject(java.io.OutputStream,java.lang.Object) throws java.io.IOException
      writeObject(arg0: OutputStream, arg1: object_t): void;
      writeObjectP(arg0: OutputStream, arg1: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeProperty(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Property) throws java.io.IOException
      writeProperty(arg0: OutputStream, arg1: Property): void;
      writePropertyP(arg0: OutputStream, arg1: Property): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertex(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      writeVertex(arg0: OutputStream, arg1: Vertex, arg2: Direction): void;
      writeVertexP(arg0: OutputStream, arg1: Vertex, arg2: Direction): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertex(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Vertex) throws java.io.IOException
      writeVertex(arg0: OutputStream, arg1: Vertex): void;
      writeVertexP(arg0: OutputStream, arg1: Vertex): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertexProperty(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.VertexProperty) throws java.io.IOException
      writeVertexProperty(arg0: OutputStream, arg1: VertexProperty): void;
      writeVertexPropertyP(arg0: OutputStream, arg1: VertexProperty): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertices(java.io.OutputStream,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      writeVertices(arg0: OutputStream, arg1: Iterator, arg2: Direction): void;
      writeVerticesP(arg0: OutputStream, arg1: Iterator, arg2: Direction): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertices(java.io.OutputStream,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>) throws java.io.IOException
      writeVertices(arg0: OutputStream, arg1: Iterator): void;
      writeVerticesP(arg0: OutputStream, arg1: Iterator): Promise<void>;
    }
    export module GraphSONWriter {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.build()
        build(): GraphSONWriter$Builder;
        buildP(): Promise<GraphSONWriter$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface GraphSONWriter$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder {
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder.create()
      create(): GraphSONWriter;
      createP(): Promise<GraphSONWriter>;
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder.create()
      create(): GraphWriter;
      createP(): Promise<GraphWriter>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder.mapper(org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper)
      mapper(arg0: GraphSONMapper): GraphSONWriter$Builder;
      mapperP(arg0: GraphSONMapper): Promise<GraphSONWriter$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphSONWriter$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface LegacyGraphSONReader extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Edge org.apache.tinkerpop.gremlin.structure.io.GraphReader.readEdge(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>) throws java.io.IOException
      readEdge(arg0: InputStream, arg1: Function): Edge;
      readEdgeP(arg0: InputStream, arg1: Function): Promise<Edge>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphReader.readGraph(java.io.InputStream,org.apache.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
      readGraph(arg0: InputStream, arg1: Graph): void;
      readGraphP(arg0: InputStream, arg1: Graph): Promise<void>;
      // public abstract <C> C org.apache.tinkerpop.gremlin.structure.io.GraphReader.readObject(java.io.InputStream,java.lang.Class<? extends C>) throws java.io.IOException
      readObject(arg0: InputStream, arg1: Class): object_t;
      readObjectP(arg0: InputStream, arg1: Class): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Property org.apache.tinkerpop.gremlin.structure.io.GraphReader.readProperty(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Property>, org.apache.tinkerpop.gremlin.structure.Property>) throws java.io.IOException
      readProperty(arg0: InputStream, arg1: Function): Property;
      readPropertyP(arg0: InputStream, arg1: Function): Promise<Property>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertex(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      readVertex(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Vertex;
      readVertexP(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Promise<Vertex>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertex(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>) throws java.io.IOException
      readVertex(arg0: InputStream, arg1: Function): Vertex;
      readVertexP(arg0: InputStream, arg1: Function): Promise<Vertex>;
      // public abstract org.apache.tinkerpop.gremlin.structure.VertexProperty org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertexProperty(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.VertexProperty>, org.apache.tinkerpop.gremlin.structure.VertexProperty>) throws java.io.IOException
      readVertexProperty(arg0: InputStream, arg1: Function): VertexProperty;
      readVertexPropertyP(arg0: InputStream, arg1: Function): Promise<VertexProperty>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertices(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      readVertices(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Iterator;
      readVerticesP(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Promise<Iterator>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module LegacyGraphSONReader {
      export interface Static {
        new (arg0: object_t, arg1: long_t): org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader;
        // public static org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader.build()
        build(): LegacyGraphSONReader$Builder;
        buildP(): Promise<LegacyGraphSONReader$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface LegacyGraphSONReader$Builder extends Java.java.lang.Object {
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder.addCustomModule(com.fasterxml.jackson.databind.module.SimpleModule)
      addCustomModule(arg0: object_t): LegacyGraphSONReader$Builder;
      addCustomModuleP(arg0: object_t): Promise<LegacyGraphSONReader$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder.batchSize(long)
      batchSize(arg0: long_t): LegacyGraphSONReader$Builder;
      batchSizeP(arg0: long_t): Promise<LegacyGraphSONReader$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder.create()
      create(): LegacyGraphSONReader;
      createP(): Promise<LegacyGraphSONReader>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder.loadCustomModules(boolean)
      loadCustomModules(arg0: boolean_t): LegacyGraphSONReader$Builder;
      loadCustomModulesP(arg0: boolean_t): Promise<LegacyGraphSONReader$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module LegacyGraphSONReader$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.graphson {
    export interface LegacyGraphSONReader$GraphSONTokens extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module LegacyGraphSONReader$GraphSONTokens {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens;
        _ID: string;
        _LABEL: string;
        _TYPE: string;
        _OUT_V: string;
        _IN_V: string;
        VALUE: string;
        TYPE: string;
        TYPE_LIST: string;
        TYPE_STRING: string;
        TYPE_DOUBLE: string;
        TYPE_INTEGER: string;
        TYPE_FLOAT: string;
        TYPE_MAP: string;
        TYPE_BOOLEAN: string;
        TYPE_LONG: string;
        TYPE_SHORT: string;
        TYPE_BYTE: string;
        TYPE_UNKNOWN: string;
        VERTICES: string;
        EDGES: string;
        MODE: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface GraphWriter extends Java.java.lang.Object {
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeEdge(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Edge) throws java.io.IOException
      writeEdge(arg0: OutputStream, arg1: Edge): void;
      writeEdgeP(arg0: OutputStream, arg1: Edge): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeGraph(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
      writeGraph(arg0: OutputStream, arg1: Graph): void;
      writeGraphP(arg0: OutputStream, arg1: Graph): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeObject(java.io.OutputStream,java.lang.Object) throws java.io.IOException
      writeObject(arg0: OutputStream, arg1: object_t): void;
      writeObjectP(arg0: OutputStream, arg1: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeProperty(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Property) throws java.io.IOException
      writeProperty(arg0: OutputStream, arg1: Property): void;
      writePropertyP(arg0: OutputStream, arg1: Property): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertex(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      writeVertex(arg0: OutputStream, arg1: Vertex, arg2: Direction): void;
      writeVertexP(arg0: OutputStream, arg1: Vertex, arg2: Direction): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertex(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Vertex) throws java.io.IOException
      writeVertex(arg0: OutputStream, arg1: Vertex): void;
      writeVertexP(arg0: OutputStream, arg1: Vertex): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertexProperty(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.VertexProperty) throws java.io.IOException
      writeVertexProperty(arg0: OutputStream, arg1: VertexProperty): void;
      writeVertexPropertyP(arg0: OutputStream, arg1: VertexProperty): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertices(java.io.OutputStream,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      writeVertices(arg0: OutputStream, arg1: Iterator, arg2: Direction): void;
      writeVerticesP(arg0: OutputStream, arg1: Iterator, arg2: Direction): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertices(java.io.OutputStream,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>) throws java.io.IOException
      writeVertices(arg0: OutputStream, arg1: Iterator): void;
      writeVerticesP(arg0: OutputStream, arg1: Iterator): Promise<void>;
    }
    export module GraphWriter {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface GraphWriter$WriterBuilder extends Java.java.lang.Object {
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder.create()
      create(): GraphWriter;
      createP(): Promise<GraphWriter>;
    }
    export module GraphWriter$WriterBuilder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface GryoIo extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Io {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo.mapper()
      mapper(): GryoMapper$Builder;
      mapperP(): Promise<GryoMapper$Builder>;
      // public abstract M org.apache.tinkerpop.gremlin.structure.io.Io.mapper()
      mapper(): Mapper$Builder;
      mapperP(): Promise<Mapper$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract R org.apache.tinkerpop.gremlin.structure.io.Io.reader()
      reader(): GraphReader$ReaderBuilder;
      readerP(): Promise<GraphReader$ReaderBuilder>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo.reader()
      reader(): GryoReader$Builder;
      readerP(): Promise<GryoReader$Builder>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.Io.readGraph(java.lang.String) throws java.io.IOException
      readGraph(arg0: string_t): void;
      readGraphP(arg0: string_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.Io.writeGraph(java.lang.String) throws java.io.IOException
      writeGraph(arg0: string_t): void;
      writeGraphP(arg0: string_t): Promise<void>;
      // public abstract W org.apache.tinkerpop.gremlin.structure.io.Io.writer()
      writer(): GraphWriter$WriterBuilder;
      writerP(): Promise<GraphWriter$WriterBuilder>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo.writer()
      writer(): GryoWriter$Builder;
      writerP(): Promise<GryoWriter$Builder>;
    }
    export module GryoIo {
      export interface Static {
        new (arg0: IoRegistry, arg1: Graph): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo;
        // public static org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo> org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo.build()
        build(): Io$Builder;
        buildP(): Promise<Io$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface GryoIo$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Io$Builder {
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder.create()
      create(): GryoIo;
      createP(): Promise<GryoIo>;
      // public abstract I org.apache.tinkerpop.gremlin.structure.io.Io$Builder.create()
      create(): Io;
      createP(): Promise<Io>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<? extends org.apache.tinkerpop.gremlin.structure.io.Io> org.apache.tinkerpop.gremlin.structure.io.Io$Builder.graph(org.apache.tinkerpop.gremlin.structure.Graph)
      graph(arg0: Graph): Io$Builder;
      graphP(arg0: Graph): Promise<Io$Builder>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<? extends org.apache.tinkerpop.gremlin.structure.io.Io> org.apache.tinkerpop.gremlin.structure.io.Io$Builder.registry(org.apache.tinkerpop.gremlin.structure.io.IoRegistry)
      registry(arg0: IoRegistry): Io$Builder;
      registryP(arg0: IoRegistry): Promise<Io$Builder>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GryoIo$Builder {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface GryoMapper extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Mapper {
      // public org.apache.tinkerpop.shaded.kryo.Kryo org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper.createMapper()
      createMapper(): object_t;
      createMapperP(): Promise<object_t>;
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.Mapper.createMapper()
      createMapper(): object_t;
      createMapperP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.List<java.lang.Class> org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper.getRegisteredClasses()
      getRegisteredClasses(): List;
      getRegisteredClassesP(): Promise<List>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GryoMapper {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper.build()
        build(): GryoMapper$Builder;
        buildP(): Promise<GryoMapper$Builder>;
        GIO: object_t[];
        HEADER: object_t[];
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface GryoMapper$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder {
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder.addCustom(java.lang.Class,org.apache.tinkerpop.shaded.kryo.Serializer)
      addCustom(arg0: Class, arg1: object_t): GryoMapper$Builder;
      addCustomP(arg0: Class, arg1: object_t): Promise<GryoMapper$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder.addCustom(java.lang.Class,java.util.function.Function<org.apache.tinkerpop.shaded.kryo.Kryo, org.apache.tinkerpop.shaded.kryo.Serializer>)
      addCustom(arg0: Class, arg1: Function): GryoMapper$Builder;
      addCustomP(arg0: Class, arg1: Function): Promise<GryoMapper$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder.addCustom(java.lang.Class...)
      addCustom(...arg0: Class[]): GryoMapper$Builder;
      addCustom(arg0: array_t<Class>): GryoMapper$Builder;
      addCustomP(...arg0: Class[]): Promise<GryoMapper$Builder>;
      addCustomP(arg0: array_t<Class>): Promise<GryoMapper$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder.addRegistry(org.apache.tinkerpop.gremlin.structure.io.IoRegistry)
      addRegistry(arg0: IoRegistry): GryoMapper$Builder;
      addRegistryP(arg0: IoRegistry): Promise<GryoMapper$Builder>;
      // public abstract B org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder.addRegistry(org.apache.tinkerpop.gremlin.structure.io.IoRegistry)
      addRegistry(arg0: IoRegistry): Mapper$Builder;
      addRegistryP(arg0: IoRegistry): Promise<Mapper$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder.create()
      create(): GryoMapper;
      createP(): Promise<GryoMapper>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GryoMapper$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface GryoPool extends Java.java.lang.Object {
      // public <A> A org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool.doWithReader(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader, A>)
      doWithReader(arg0: Function): object_t;
      doWithReaderP(arg0: Function): Promise<object_t>;
      // public void org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool.doWithWriter(java.util.function.Consumer<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter>)
      doWithWriter(arg0: Consumer): void;
      doWithWriterP(arg0: Consumer): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool.offerReader(org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader)
      offerReader(arg0: GryoReader): void;
      offerReaderP(arg0: GryoReader): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool.offerWriter(org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter)
      offerWriter(arg0: GryoWriter): void;
      offerWriterP(arg0: GryoWriter): Promise<void>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool.takeReader()
      takeReader(): GryoReader;
      takeReaderP(): Promise<GryoReader>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool.takeWriter()
      takeWriter(): GryoWriter;
      takeWriterP(): Promise<GryoWriter>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GryoPool {
      export interface Static {
        new (arg0: integer_t, arg1: GryoPool$Type, arg2: object_t): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool;
        new (arg0: object_t): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool;
        new (arg0: integer_t): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool;
        CONFIG_IO_REGISTRY: string;
        CONFIG_IO_GRYO_POOL_SIZE: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface GryoPool$Type extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GryoPool$Type {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type.valueOf(java.lang.String)
        valueOf(arg0: string_t): GryoPool$Type;
        valueOfP(arg0: string_t): Promise<GryoPool$Type>;
        // public static org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type[] org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type.values()
        values(): GryoPool$Type[];
        valuesP(): Promise<GryoPool$Type[]>;
        READER: GryoPool$Type;
        WRITER: GryoPool$Type;
        READER_WRITER: GryoPool$Type;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface GryoReader extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Edge org.apache.tinkerpop.gremlin.structure.io.GraphReader.readEdge(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>) throws java.io.IOException
      readEdge(arg0: InputStream, arg1: Function): Edge;
      readEdgeP(arg0: InputStream, arg1: Function): Promise<Edge>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphReader.readGraph(java.io.InputStream,org.apache.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
      readGraph(arg0: InputStream, arg1: Graph): void;
      readGraphP(arg0: InputStream, arg1: Graph): Promise<void>;
      // public abstract <C> C org.apache.tinkerpop.gremlin.structure.io.GraphReader.readObject(java.io.InputStream,java.lang.Class<? extends C>) throws java.io.IOException
      readObject(arg0: InputStream, arg1: Class): object_t;
      readObjectP(arg0: InputStream, arg1: Class): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Property org.apache.tinkerpop.gremlin.structure.io.GraphReader.readProperty(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Property>, org.apache.tinkerpop.gremlin.structure.Property>) throws java.io.IOException
      readProperty(arg0: InputStream, arg1: Function): Property;
      readPropertyP(arg0: InputStream, arg1: Function): Promise<Property>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertex(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      readVertex(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Vertex;
      readVertexP(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Promise<Vertex>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertex(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>) throws java.io.IOException
      readVertex(arg0: InputStream, arg1: Function): Vertex;
      readVertexP(arg0: InputStream, arg1: Function): Promise<Vertex>;
      // public abstract org.apache.tinkerpop.gremlin.structure.VertexProperty org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertexProperty(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.VertexProperty>, org.apache.tinkerpop.gremlin.structure.VertexProperty>) throws java.io.IOException
      readVertexProperty(arg0: InputStream, arg1: Function): VertexProperty;
      readVertexPropertyP(arg0: InputStream, arg1: Function): Promise<VertexProperty>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.io.GraphReader.readVertices(java.io.InputStream,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>, org.apache.tinkerpop.gremlin.structure.Vertex>,java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>, org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      readVertices(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Iterator;
      readVerticesP(arg0: InputStream, arg1: Function, arg2: Function, arg3: Direction): Promise<Iterator>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GryoReader {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader.build()
        build(): GryoReader$Builder;
        buildP(): Promise<GryoReader$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface GryoReader$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder {
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder.batchSize(long)
      batchSize(arg0: long_t): GryoReader$Builder;
      batchSizeP(arg0: long_t): Promise<GryoReader$Builder>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder.create()
      create(): GryoReader;
      createP(): Promise<GryoReader>;
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder.create()
      create(): GraphReader;
      createP(): Promise<GraphReader>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder.mapper(org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper)
      mapper(arg0: GryoMapper): GryoReader$Builder;
      mapperP(arg0: GryoMapper): Promise<GryoReader$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GryoReader$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface GryoWriter extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeEdge(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Edge) throws java.io.IOException
      writeEdge(arg0: OutputStream, arg1: Edge): void;
      writeEdgeP(arg0: OutputStream, arg1: Edge): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeGraph(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Graph) throws java.io.IOException
      writeGraph(arg0: OutputStream, arg1: Graph): void;
      writeGraphP(arg0: OutputStream, arg1: Graph): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeObject(java.io.OutputStream,java.lang.Object) throws java.io.IOException
      writeObject(arg0: OutputStream, arg1: object_t): void;
      writeObjectP(arg0: OutputStream, arg1: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeProperty(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Property) throws java.io.IOException
      writeProperty(arg0: OutputStream, arg1: Property): void;
      writePropertyP(arg0: OutputStream, arg1: Property): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertex(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      writeVertex(arg0: OutputStream, arg1: Vertex, arg2: Direction): void;
      writeVertexP(arg0: OutputStream, arg1: Vertex, arg2: Direction): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertex(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.Vertex) throws java.io.IOException
      writeVertex(arg0: OutputStream, arg1: Vertex): void;
      writeVertexP(arg0: OutputStream, arg1: Vertex): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertexProperty(java.io.OutputStream,org.apache.tinkerpop.gremlin.structure.VertexProperty) throws java.io.IOException
      writeVertexProperty(arg0: OutputStream, arg1: VertexProperty): void;
      writeVertexPropertyP(arg0: OutputStream, arg1: VertexProperty): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertices(java.io.OutputStream,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>,org.apache.tinkerpop.gremlin.structure.Direction) throws java.io.IOException
      writeVertices(arg0: OutputStream, arg1: Iterator, arg2: Direction): void;
      writeVerticesP(arg0: OutputStream, arg1: Iterator, arg2: Direction): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.structure.io.GraphWriter.writeVertices(java.io.OutputStream,java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex>) throws java.io.IOException
      writeVertices(arg0: OutputStream, arg1: Iterator): void;
      writeVerticesP(arg0: OutputStream, arg1: Iterator): Promise<void>;
    }
    export module GryoWriter {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter.build()
        build(): GryoWriter$Builder;
        buildP(): Promise<GryoWriter$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface GryoWriter$Builder extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder {
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder.create()
      create(): GryoWriter;
      createP(): Promise<GryoWriter>;
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder.create()
      create(): GraphWriter;
      createP(): Promise<GraphWriter>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder.mapper(org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper)
      mapper(arg0: GryoMapper): GryoWriter$Builder;
      mapperP(arg0: GryoMapper): Promise<GryoWriter$Builder>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GryoWriter$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface VertexByteArrayInputStream extends Java.java.io.InputStream {
      // public int java.io.InputStream.available() throws java.io.IOException
      available(): number;
      availableP(): Promise<number>;
      // public void java.io.InputStream.close() throws java.io.IOException
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized void java.io.InputStream.mark(int)
      mark(arg0: integer_t): void;
      markP(arg0: integer_t): Promise<void>;
      // public boolean java.io.InputStream.markSupported()
      markSupported(): boolean;
      markSupportedP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.io.InputStream.read(byte[],int,int) throws java.io.IOException
      read(arg0: object_array_t, arg1: integer_t, arg2: integer_t): number;
      readP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<number>;
      // public int java.io.InputStream.read(byte[]) throws java.io.IOException
      read(arg0: object_array_t): number;
      readP(arg0: object_array_t): Promise<number>;
      // public abstract int java.io.InputStream.read() throws java.io.IOException
      read(): number;
      readP(): Promise<number>;
      // public java.io.ByteArrayOutputStream org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream.readVertexBytes() throws java.io.IOException
      readVertexBytes(): ByteArrayOutputStream;
      readVertexBytesP(): Promise<ByteArrayOutputStream>;
      // public synchronized void java.io.InputStream.reset() throws java.io.IOException
      reset(): void;
      resetP(): Promise<void>;
      // public long java.io.InputStream.skip(long) throws java.io.IOException
      skip(arg0: long_t): longValue_t;
      skipP(arg0: long_t): Promise<longValue_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module VertexByteArrayInputStream {
      export interface Static {
        new (arg0: InputStream): org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io.gryo {
    export interface VertexTerminator extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      terminal: object_t[];
    }
    export module VertexTerminator {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator.instance()
        instance(): VertexTerminator;
        instanceP(): Promise<VertexTerminator>;
        INSTANCE: VertexTerminator;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface Io extends Java.java.lang.Object {
      // public abstract M org.apache.tinkerpop.gremlin.structure.io.Io.mapper()
      mapper(): Mapper$Builder;
      mapperP(): Promise<Mapper$Builder>;
      // public abstract R org.apache.tinkerpop.gremlin.structure.io.Io.reader()
      reader(): GraphReader$ReaderBuilder;
      readerP(): Promise<GraphReader$ReaderBuilder>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.Io.readGraph(java.lang.String) throws java.io.IOException
      readGraph(arg0: string_t): void;
      readGraphP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.io.Io.writeGraph(java.lang.String) throws java.io.IOException
      writeGraph(arg0: string_t): void;
      writeGraphP(arg0: string_t): Promise<void>;
      // public abstract W org.apache.tinkerpop.gremlin.structure.io.Io.writer()
      writer(): GraphWriter$WriterBuilder;
      writerP(): Promise<GraphWriter$WriterBuilder>;
    }
    export module Io {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface Io$Builder extends Java.java.lang.Object {
      // public abstract I org.apache.tinkerpop.gremlin.structure.io.Io$Builder.create()
      create(): Io;
      createP(): Promise<Io>;
      // public abstract org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<? extends org.apache.tinkerpop.gremlin.structure.io.Io> org.apache.tinkerpop.gremlin.structure.io.Io$Builder.graph(org.apache.tinkerpop.gremlin.structure.Graph)
      graph(arg0: Graph): Io$Builder;
      graphP(arg0: Graph): Promise<Io$Builder>;
      // public abstract org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<? extends org.apache.tinkerpop.gremlin.structure.io.Io> org.apache.tinkerpop.gremlin.structure.io.Io$Builder.registry(org.apache.tinkerpop.gremlin.structure.io.IoRegistry)
      registry(arg0: IoRegistry): Io$Builder;
      registryP(arg0: IoRegistry): Promise<Io$Builder>;
    }
    export module Io$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface Io$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Io$Exceptions {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions.readerFormatIsForFullGraphSerializationOnly(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.io.GraphReader>)
        readerFormatIsForFullGraphSerializationOnly(arg0: Class): object_t;
        readerFormatIsForFullGraphSerializationOnlyP(arg0: Class): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions.writerFormatIsForFullGraphSerializationOnly(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.io.GraphWriter>)
        writerFormatIsForFullGraphSerializationOnly(arg0: Class): object_t;
        writerFormatIsForFullGraphSerializationOnlyP(arg0: Class): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface IoCore extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IoCore {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.io.IoCore;
        // public static org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo> org.apache.tinkerpop.gremlin.structure.io.IoCore.graphml()
        graphml(): Io$Builder;
        graphmlP(): Promise<Io$Builder>;
        // public static org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo> org.apache.tinkerpop.gremlin.structure.io.IoCore.graphson()
        graphson(): Io$Builder;
        graphsonP(): Promise<Io$Builder>;
        // public static org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo> org.apache.tinkerpop.gremlin.structure.io.IoCore.gryo()
        gryo(): Io$Builder;
        gryoP(): Promise<Io$Builder>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface IoRegistry extends Java.java.lang.Object {
      // public abstract <S> java.util.List<org.javatuples.Pair<java.lang.Class, S>> org.apache.tinkerpop.gremlin.structure.io.IoRegistry.find(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.io.Io>,java.lang.Class<S>)
      find(arg0: Class, arg1: Class): List;
      findP(arg0: Class, arg1: Class): Promise<List>;
      // public abstract java.util.List<org.javatuples.Pair<java.lang.Class, java.lang.Object>> org.apache.tinkerpop.gremlin.structure.io.IoRegistry.find(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.io.Io>)
      find(arg0: Class): List;
      findP(arg0: Class): Promise<List>;
    }
    export module IoRegistry {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface Mapper extends Java.java.lang.Object {
      // public abstract T org.apache.tinkerpop.gremlin.structure.io.Mapper.createMapper()
      createMapper(): object_t;
      createMapperP(): Promise<object_t>;
    }
    export module Mapper {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.io {
    export interface Mapper$Builder extends Java.java.lang.Object {
      // public abstract B org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder.addRegistry(org.apache.tinkerpop.gremlin.structure.io.IoRegistry)
      addRegistry(arg0: IoRegistry): Mapper$Builder;
      addRegistryP(arg0: IoRegistry): Promise<Mapper$Builder>;
    }
    export module Mapper$Builder {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Property extends Java.java.lang.Object {
      // public abstract org.apache.tinkerpop.gremlin.structure.Element org.apache.tinkerpop.gremlin.structure.Property.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public default void org.apache.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public abstract boolean org.apache.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: Supplier): object_t;
      orElseGetP(arg0: Supplier): Promise<object_t>;
      // public default <E> V org.apache.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: Supplier): object_t;
      orElseThrowP(arg0: Supplier): Promise<object_t>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Property.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
    }
    export module Property {
      export interface Static {
        // public static <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Property.empty()
        empty(): Property;
        emptyP(): Promise<Property>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Property$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Property$Exceptions {
      export interface Static {
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Property$Exceptions.dataTypeOfPropertyValueNotSupported(java.lang.Object)
        dataTypeOfPropertyValueNotSupported(arg0: object_t): object_t;
        dataTypeOfPropertyValueNotSupportedP(arg0: object_t): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Property$Exceptions.propertyDoesNotExist(org.apache.tinkerpop.gremlin.structure.Element,java.lang.String)
        propertyDoesNotExist(arg0: Element, arg1: string_t): object_t;
        propertyDoesNotExistP(arg0: Element, arg1: string_t): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Property$Exceptions.propertyDoesNotExist()
        propertyDoesNotExist(): object_t;
        propertyDoesNotExistP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Property$Exceptions.propertyKeyCanNotBeAHiddenKey(java.lang.String)
        propertyKeyCanNotBeAHiddenKey(arg0: string_t): object_t;
        propertyKeyCanNotBeAHiddenKeyP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Property$Exceptions.propertyKeyCanNotBeEmpty()
        propertyKeyCanNotBeEmpty(): object_t;
        propertyKeyCanNotBeEmptyP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Property$Exceptions.propertyKeyCanNotBeNull()
        propertyKeyCanNotBeNull(): object_t;
        propertyKeyCanNotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Property$Exceptions.propertyRemovalNotSupported()
        propertyRemovalNotSupported(): object_t;
        propertyRemovalNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Property$Exceptions.propertyValueCanNotBeNull()
        propertyValueCanNotBeNull(): object_t;
        propertyValueCanNotBeNullP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface PropertyType extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean org.apache.tinkerpop.gremlin.structure.PropertyType.forProperties()
      forProperties(): boolean;
      forPropertiesP(): Promise<boolean>;
      // public abstract boolean org.apache.tinkerpop.gremlin.structure.PropertyType.forValues()
      forValues(): boolean;
      forValuesP(): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module PropertyType {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.structure.PropertyType org.apache.tinkerpop.gremlin.structure.PropertyType.valueOf(java.lang.String)
        valueOf(arg0: string_t): PropertyType;
        valueOfP(arg0: string_t): Promise<PropertyType>;
        // public static org.apache.tinkerpop.gremlin.structure.PropertyType[] org.apache.tinkerpop.gremlin.structure.PropertyType.values()
        values(): PropertyType[];
        valuesP(): Promise<PropertyType[]>;
        PROPERTY: PropertyType;
        VALUE: PropertyType;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface T extends Java.java.lang.Enum,Java.java.util.function_.Function {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.T.apply(org.apache.tinkerpop.gremlin.structure.Element)
      apply(arg0: Element): object_t;
      applyP(arg0: Element): Promise<object_t>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.T.getAccessor()
      getAccessor(): string;
      getAccessorP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module T {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.structure.T org.apache.tinkerpop.gremlin.structure.T.fromString(java.lang.String)
        fromString(arg0: string_t): T;
        fromStringP(arg0: string_t): Promise<T>;
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.structure.T org.apache.tinkerpop.gremlin.structure.T.valueOf(java.lang.String)
        valueOf(arg0: string_t): T;
        valueOfP(arg0: string_t): Promise<T>;
        // public static org.apache.tinkerpop.gremlin.structure.T[] org.apache.tinkerpop.gremlin.structure.T.values()
        values(): T[];
        valuesP(): Promise<T[]>;
        label: T;
        id: T;
        key: T;
        value: T;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Transaction extends Java.java.lang.Object {
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.addTransactionListener(java.util.function.Consumer<org.apache.tinkerpop.gremlin.structure.Transaction$Status>)
      addTransactionListener(arg0: Consumer): void;
      addTransactionListenerP(arg0: Consumer): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.clearTransactionListeners()
      clearTransactionListeners(): void;
      clearTransactionListenersP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.close()
      close(): void;
      closeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.commit()
      commit(): void;
      commitP(): Promise<void>;
      // public abstract <G> G org.apache.tinkerpop.gremlin.structure.Transaction.create()
      create(): Graph;
      createP(): Promise<Graph>;
      // public abstract boolean org.apache.tinkerpop.gremlin.structure.Transaction.isOpen()
      isOpen(): boolean;
      isOpenP(): Promise<boolean>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Transaction org.apache.tinkerpop.gremlin.structure.Transaction.onClose(java.util.function.Consumer<org.apache.tinkerpop.gremlin.structure.Transaction>)
      onClose(arg0: Consumer): Transaction;
      onCloseP(arg0: Consumer): Promise<Transaction>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Transaction org.apache.tinkerpop.gremlin.structure.Transaction.onReadWrite(java.util.function.Consumer<org.apache.tinkerpop.gremlin.structure.Transaction>)
      onReadWrite(arg0: Consumer): Transaction;
      onReadWriteP(arg0: Consumer): Promise<Transaction>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.open()
      open(): void;
      openP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.readWrite()
      readWrite(): void;
      readWriteP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.removeTransactionListener(java.util.function.Consumer<org.apache.tinkerpop.gremlin.structure.Transaction$Status>)
      removeTransactionListener(arg0: Consumer): void;
      removeTransactionListenerP(arg0: Consumer): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.rollback()
      rollback(): void;
      rollbackP(): Promise<void>;
      // public abstract <R> org.apache.tinkerpop.gremlin.structure.Transaction.org.apache.tinkerpop.gremlin.structure.Transaction$Workload<R> org.apache.tinkerpop.gremlin.structure.Transaction.submit(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.Graph, R>)
      submit(arg0: Function): Transaction$Workload;
      submitP(arg0: Function): Promise<Transaction$Workload>;
    }
    export module Transaction {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Transaction$CLOSE_BEHAVIOR extends Java.java.lang.Enum,Java.java.util.function_.Consumer {
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Transaction$CLOSE_BEHAVIOR {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR.valueOf(java.lang.String)
        valueOf(arg0: string_t): Transaction$CLOSE_BEHAVIOR;
        valueOfP(arg0: string_t): Promise<Transaction$CLOSE_BEHAVIOR>;
        // public static org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR[] org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR.values()
        values(): Transaction$CLOSE_BEHAVIOR[];
        valuesP(): Promise<Transaction$CLOSE_BEHAVIOR[]>;
        COMMIT: Transaction$CLOSE_BEHAVIOR;
        ROLLBACK: Transaction$CLOSE_BEHAVIOR;
        MANUAL: Transaction$CLOSE_BEHAVIOR;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Transaction$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Transaction$Exceptions {
      export interface Static {
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions.onCloseBehaviorCannotBeNull()
        onCloseBehaviorCannotBeNull(): object_t;
        onCloseBehaviorCannotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions.onReadWriteBehaviorCannotBeNull()
        onReadWriteBehaviorCannotBeNull(): object_t;
        onReadWriteBehaviorCannotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions.openTransactionsOnClose()
        openTransactionsOnClose(): object_t;
        openTransactionsOnCloseP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions.threadedTransactionsNotSupported()
        threadedTransactionsNotSupported(): object_t;
        threadedTransactionsNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions.transactionAlreadyOpen()
        transactionAlreadyOpen(): object_t;
        transactionAlreadyOpenP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions.transactionMustBeOpenToReadWrite()
        transactionMustBeOpenToReadWrite(): object_t;
        transactionMustBeOpenToReadWriteP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Transaction$READ_WRITE_BEHAVIOR extends Java.java.lang.Enum,Java.java.util.function_.Consumer {
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Transaction$READ_WRITE_BEHAVIOR {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR.valueOf(java.lang.String)
        valueOf(arg0: string_t): Transaction$READ_WRITE_BEHAVIOR;
        valueOfP(arg0: string_t): Promise<Transaction$READ_WRITE_BEHAVIOR>;
        // public static org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR[] org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR.values()
        values(): Transaction$READ_WRITE_BEHAVIOR[];
        valuesP(): Promise<Transaction$READ_WRITE_BEHAVIOR[]>;
        AUTO: Transaction$READ_WRITE_BEHAVIOR;
        MANUAL: Transaction$READ_WRITE_BEHAVIOR;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Transaction$Status extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Transaction$Status {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.structure.Transaction$Status org.apache.tinkerpop.gremlin.structure.Transaction$Status.valueOf(java.lang.String)
        valueOf(arg0: string_t): Transaction$Status;
        valueOfP(arg0: string_t): Promise<Transaction$Status>;
        // public static org.apache.tinkerpop.gremlin.structure.Transaction$Status[] org.apache.tinkerpop.gremlin.structure.Transaction$Status.values()
        values(): Transaction$Status[];
        valuesP(): Promise<Transaction$Status[]>;
        COMMIT: Transaction$Status;
        ROLLBACK: Transaction$Status;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Transaction$Workload extends Java.java.lang.Object {
      // public R org.apache.tinkerpop.gremlin.structure.Transaction$Workload.attempt(java.util.function.BiFunction<org.apache.tinkerpop.gremlin.structure.Graph, java.util.function.Function<org.apache.tinkerpop.gremlin.structure.Graph, R>, R>)
      attempt(arg0: BiFunction): object_t;
      attemptP(arg0: BiFunction): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public R org.apache.tinkerpop.gremlin.structure.Transaction$Workload.exponentialBackoff(int,long,java.util.Set<java.lang.Class>)
      exponentialBackoff(arg0: integer_t, arg1: long_t, arg2: Set): object_t;
      exponentialBackoffP(arg0: integer_t, arg1: long_t, arg2: Set): Promise<object_t>;
      // public R org.apache.tinkerpop.gremlin.structure.Transaction$Workload.exponentialBackoff(int,long)
      exponentialBackoff(arg0: integer_t, arg1: long_t): object_t;
      exponentialBackoffP(arg0: integer_t, arg1: long_t): Promise<object_t>;
      // public R org.apache.tinkerpop.gremlin.structure.Transaction$Workload.exponentialBackoff(int)
      exponentialBackoff(arg0: integer_t): object_t;
      exponentialBackoffP(arg0: integer_t): Promise<object_t>;
      // public R org.apache.tinkerpop.gremlin.structure.Transaction$Workload.exponentialBackoff()
      exponentialBackoff(): object_t;
      exponentialBackoffP(): Promise<object_t>;
      // public R org.apache.tinkerpop.gremlin.structure.Transaction$Workload.fireAndForget()
      fireAndForget(): object_t;
      fireAndForgetP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public R org.apache.tinkerpop.gremlin.structure.Transaction$Workload.oneAndDone()
      oneAndDone(): object_t;
      oneAndDoneP(): Promise<object_t>;
      // public R org.apache.tinkerpop.gremlin.structure.Transaction$Workload.retry(int,long,java.util.Set<java.lang.Class>)
      retry(arg0: integer_t, arg1: long_t, arg2: Set): object_t;
      retryP(arg0: integer_t, arg1: long_t, arg2: Set): Promise<object_t>;
      // public R org.apache.tinkerpop.gremlin.structure.Transaction$Workload.retry(int,long)
      retry(arg0: integer_t, arg1: long_t): object_t;
      retryP(arg0: integer_t, arg1: long_t): Promise<object_t>;
      // public R org.apache.tinkerpop.gremlin.structure.Transaction$Workload.retry(int)
      retry(arg0: integer_t): object_t;
      retryP(arg0: integer_t): Promise<object_t>;
      // public R org.apache.tinkerpop.gremlin.structure.Transaction$Workload.retry()
      retry(): object_t;
      retryP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Transaction$Workload {
      export interface Static {
        new (arg0: Graph, arg1: Function): org.apache.tinkerpop.gremlin.structure.Transaction$Workload;
        DEFAULT_DELAY_MS: longValue_t;
        DEFAULT_TRIES: number;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface AbstractTransaction extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.Transaction {
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.addTransactionListener(java.util.function.Consumer<org.apache.tinkerpop.gremlin.structure.Transaction$Status>)
      addTransactionListener(arg0: Consumer): void;
      addTransactionListenerP(arg0: Consumer): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.clearTransactionListeners()
      clearTransactionListeners(): void;
      clearTransactionListenersP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.close()
      close(): void;
      closeP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.commit()
      commit(): void;
      commitP(): Promise<void>;
      // public abstract <G> G org.apache.tinkerpop.gremlin.structure.Transaction.create()
      create(): Graph;
      createP(): Promise<Graph>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean org.apache.tinkerpop.gremlin.structure.Transaction.isOpen()
      isOpen(): boolean;
      isOpenP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Transaction org.apache.tinkerpop.gremlin.structure.Transaction.onClose(java.util.function.Consumer<org.apache.tinkerpop.gremlin.structure.Transaction>)
      onClose(arg0: Consumer): Transaction;
      onCloseP(arg0: Consumer): Promise<Transaction>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Transaction org.apache.tinkerpop.gremlin.structure.Transaction.onReadWrite(java.util.function.Consumer<org.apache.tinkerpop.gremlin.structure.Transaction>)
      onReadWrite(arg0: Consumer): Transaction;
      onReadWriteP(arg0: Consumer): Promise<Transaction>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.open()
      open(): void;
      openP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.readWrite()
      readWrite(): void;
      readWriteP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.removeTransactionListener(java.util.function.Consumer<org.apache.tinkerpop.gremlin.structure.Transaction$Status>)
      removeTransactionListener(arg0: Consumer): void;
      removeTransactionListenerP(arg0: Consumer): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Transaction.rollback()
      rollback(): void;
      rollbackP(): Promise<void>;
      // public abstract <R> org.apache.tinkerpop.gremlin.structure.Transaction.org.apache.tinkerpop.gremlin.structure.Transaction$Workload<R> org.apache.tinkerpop.gremlin.structure.Transaction.submit(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.Graph, R>)
      submit(arg0: Function): Transaction$Workload;
      submitP(arg0: Function): Promise<Transaction$Workload>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractTransaction {
      export interface Static {
        new (arg0: Graph): org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface AbstractTransaction$TransactionException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractTransaction$TransactionException {
      export interface Static {
        new (arg0: string_t, arg1: object_t): org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException;
        new (arg0: object_t): org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException;
        new (arg0: string_t): org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface Attachable extends Java.java.lang.Object {
      // public default V org.apache.tinkerpop.gremlin.structure.util.Attachable.attach(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<V>, V>) throws java.lang.IllegalStateException
      attach(arg0: Function): object_t;
      attachP(arg0: Function): Promise<object_t>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.util.Attachable.get()
      get(): object_t;
      getP(): Promise<object_t>;
    }
    export module Attachable {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface Attachable$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Attachable$Exceptions {
      export interface Static {
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions.canNotGetAttachableFromHostGraph(org.apache.tinkerpop.gremlin.structure.util.Attachable<?>,org.apache.tinkerpop.gremlin.structure.Graph)
        canNotGetAttachableFromHostGraph(arg0: Attachable, arg1: Graph): object_t;
        canNotGetAttachableFromHostGraphP(arg0: Attachable, arg1: Graph): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions.canNotGetAttachableFromHostVertex(org.apache.tinkerpop.gremlin.structure.util.Attachable<?>,org.apache.tinkerpop.gremlin.structure.Vertex)
        canNotGetAttachableFromHostVertex(arg0: Attachable, arg1: Vertex): object_t;
        canNotGetAttachableFromHostVertexP(arg0: Attachable, arg1: Vertex): Promise<object_t>;
        // public static java.lang.IllegalArgumentException org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions.providedAttachableMustContainAGraphObject(org.apache.tinkerpop.gremlin.structure.util.Attachable<?>)
        providedAttachableMustContainAGraphObject(arg0: Attachable): object_t;
        providedAttachableMustContainAGraphObjectP(arg0: Attachable): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface Attachable$Method extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Attachable$Method {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.util.Attachable$Method;
        // public static <V> java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<V>, V> org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.create(org.apache.tinkerpop.gremlin.structure.util.Host)
        create(arg0: Host): Function;
        createP(arg0: Host): Promise<Function>;
        // public static org.apache.tinkerpop.gremlin.structure.Edge org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.createEdge(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Vertex)
        createEdge(arg0: Attachable, arg1: Vertex): Edge;
        createEdgeP(arg0: Attachable, arg1: Vertex): Promise<Edge>;
        // public static org.apache.tinkerpop.gremlin.structure.Edge org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.createEdge(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Graph)
        createEdge(arg0: Attachable, arg1: Graph): Edge;
        createEdgeP(arg0: Attachable, arg1: Graph): Promise<Edge>;
        // public static org.apache.tinkerpop.gremlin.structure.Property org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.createProperty(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Property>,org.apache.tinkerpop.gremlin.structure.Vertex)
        createProperty(arg0: Attachable, arg1: Vertex): Property;
        createPropertyP(arg0: Attachable, arg1: Vertex): Promise<Property>;
        // public static org.apache.tinkerpop.gremlin.structure.Property org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.createProperty(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Property>,org.apache.tinkerpop.gremlin.structure.Graph)
        createProperty(arg0: Attachable, arg1: Graph): Property;
        createPropertyP(arg0: Attachable, arg1: Graph): Promise<Property>;
        // public static org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.createVertex(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>,org.apache.tinkerpop.gremlin.structure.Vertex)
        createVertex(arg0: Attachable, arg1: Vertex): Vertex;
        createVertexP(arg0: Attachable, arg1: Vertex): Promise<Vertex>;
        // public static org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.createVertex(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>,org.apache.tinkerpop.gremlin.structure.Graph)
        createVertex(arg0: Attachable, arg1: Graph): Vertex;
        createVertexP(arg0: Attachable, arg1: Graph): Promise<Vertex>;
        // public static org.apache.tinkerpop.gremlin.structure.VertexProperty org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.createVertexProperty(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.VertexProperty>,org.apache.tinkerpop.gremlin.structure.Vertex)
        createVertexProperty(arg0: Attachable, arg1: Vertex): VertexProperty;
        createVertexPropertyP(arg0: Attachable, arg1: Vertex): Promise<VertexProperty>;
        // public static org.apache.tinkerpop.gremlin.structure.VertexProperty org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.createVertexProperty(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.VertexProperty>,org.apache.tinkerpop.gremlin.structure.Graph)
        createVertexProperty(arg0: Attachable, arg1: Graph): VertexProperty;
        createVertexPropertyP(arg0: Attachable, arg1: Graph): Promise<VertexProperty>;
        // public static <V> java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<V>, V> org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.get(org.apache.tinkerpop.gremlin.structure.util.Host)
        get(arg0: Host): Function;
        getP(arg0: Host): Promise<Function>;
        // public static java.util.Optional<org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.getEdge(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Vertex)
        getEdge(arg0: Attachable, arg1: Vertex): object_t;
        getEdgeP(arg0: Attachable, arg1: Vertex): Promise<object_t>;
        // public static java.util.Optional<org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.getEdge(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Edge>,org.apache.tinkerpop.gremlin.structure.Graph)
        getEdge(arg0: Attachable, arg1: Graph): object_t;
        getEdgeP(arg0: Attachable, arg1: Graph): Promise<object_t>;
        // public static <V> java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<V>, V> org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.getOrCreate(org.apache.tinkerpop.gremlin.structure.util.Host)
        getOrCreate(arg0: Host): Function;
        getOrCreateP(arg0: Host): Promise<Function>;
        // public static java.util.Optional<org.apache.tinkerpop.gremlin.structure.Property> org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.getProperty(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Property>,org.apache.tinkerpop.gremlin.structure.Vertex)
        getProperty(arg0: Attachable, arg1: Vertex): object_t;
        getPropertyP(arg0: Attachable, arg1: Vertex): Promise<object_t>;
        // public static java.util.Optional<org.apache.tinkerpop.gremlin.structure.Property> org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.getProperty(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Property>,org.apache.tinkerpop.gremlin.structure.Graph)
        getProperty(arg0: Attachable, arg1: Graph): object_t;
        getPropertyP(arg0: Attachable, arg1: Graph): Promise<object_t>;
        // public static java.util.Optional<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.getVertex(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>,org.apache.tinkerpop.gremlin.structure.Vertex)
        getVertex(arg0: Attachable, arg1: Vertex): object_t;
        getVertexP(arg0: Attachable, arg1: Vertex): Promise<object_t>;
        // public static java.util.Optional<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.getVertex(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.Vertex>,org.apache.tinkerpop.gremlin.structure.Graph)
        getVertex(arg0: Attachable, arg1: Graph): object_t;
        getVertexP(arg0: Attachable, arg1: Graph): Promise<object_t>;
        // public static java.util.Optional<org.apache.tinkerpop.gremlin.structure.VertexProperty> org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.getVertexProperty(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.VertexProperty>,org.apache.tinkerpop.gremlin.structure.Vertex)
        getVertexProperty(arg0: Attachable, arg1: Vertex): object_t;
        getVertexPropertyP(arg0: Attachable, arg1: Vertex): Promise<object_t>;
        // public static java.util.Optional<org.apache.tinkerpop.gremlin.structure.VertexProperty> org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.getVertexProperty(org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.structure.VertexProperty>,org.apache.tinkerpop.gremlin.structure.Graph)
        getVertexProperty(arg0: Attachable, arg1: Graph): object_t;
        getVertexPropertyP(arg0: Attachable, arg1: Graph): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface Comparators extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Comparators {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.util.Comparators;
        ELEMENT_COMPARATOR: Comparator;
        VERTEX_COMPARATOR: Comparator;
        EDGE_COMPARATOR: Comparator;
        PROPERTY_COMPARATOR: Comparator;
        PROPERTY_ENTRY_COMPARATOR: Comparator;
        OBJECT_ENTRY_COMPARATOR: Comparator;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util.detached {
    export interface DetachedEdge extends Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement,Java.org.apache.tinkerpop.gremlin.structure.Edge {
      // public default V org.apache.tinkerpop.gremlin.structure.util.Attachable.attach(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<V>, V>) throws java.lang.IllegalStateException
      attach(arg0: Function): object_t;
      attachP(arg0: Function): Promise<object_t>;
      // public default java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.Edge.bothVertices()
      bothVertices(): Iterator;
      bothVerticesP(): Promise<Iterator>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.util.Attachable.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.Edge.inVertex()
      inVertex(): Vertex;
      inVertexP(): Promise<Vertex>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.Edge.outVertex()
      outVertex(): Vertex;
      outVertexP(): Promise<Vertex>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.Edge.vertices(org.apache.tinkerpop.gremlin.structure.Direction)
      vertices(arg0: Direction): Iterator;
      verticesP(arg0: Direction): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DetachedEdge {
      export interface Static {
        new (arg0: object_t, arg1: string_t, arg2: Map, arg3: object_t, arg4: object_t): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge;
        DEFAULT_LABEL: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util.detached {
    export interface DetachedElement extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.Element,Java.org.apache.tinkerpop.gremlin.structure.util.Attachable {
      // public default V org.apache.tinkerpop.gremlin.structure.util.Attachable.attach(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<V>, V>) throws java.lang.IllegalStateException
      attach(arg0: Function): object_t;
      attachP(arg0: Function): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.util.Attachable.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DetachedElement {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util.detached {
    export interface DetachedFactory extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DetachedFactory {
      export interface Static {
        // public static <V> org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory.detach(org.apache.tinkerpop.gremlin.structure.VertexProperty<V>,boolean)
        detach(arg0: VertexProperty, arg1: boolean_t): DetachedVertexProperty;
        detachP(arg0: VertexProperty, arg1: boolean_t): Promise<DetachedVertexProperty>;
        // public static org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory.detach(org.apache.tinkerpop.gremlin.process.traversal.Path,boolean)
        detach(arg0: Path, arg1: boolean_t): DetachedPath;
        detachP(arg0: Path, arg1: boolean_t): Promise<DetachedPath>;
        // public static org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory.detach(org.apache.tinkerpop.gremlin.structure.Element,boolean)
        detach(arg0: Element, arg1: boolean_t): DetachedElement;
        detachP(arg0: Element, arg1: boolean_t): Promise<DetachedElement>;
        // public static org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory.detach(org.apache.tinkerpop.gremlin.structure.Vertex,boolean)
        detach(arg0: Vertex, arg1: boolean_t): DetachedVertex;
        detachP(arg0: Vertex, arg1: boolean_t): Promise<DetachedVertex>;
        // public static org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory.detach(org.apache.tinkerpop.gremlin.structure.Edge,boolean)
        detach(arg0: Edge, arg1: boolean_t): DetachedEdge;
        detachP(arg0: Edge, arg1: boolean_t): Promise<DetachedEdge>;
        // public static <D> D org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory.detach(java.lang.Object,boolean)
        detach(arg0: object_t, arg1: boolean_t): object_t;
        detachP(arg0: object_t, arg1: boolean_t): Promise<object_t>;
        // public static <V> org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty<V> org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory.detach(org.apache.tinkerpop.gremlin.structure.Property<V>)
        detach(arg0: Property): DetachedProperty;
        detachP(arg0: Property): Promise<DetachedProperty>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util.detached {
    export interface DetachedPath extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath,Java.org.apache.tinkerpop.gremlin.structure.util.Attachable {
      // public abstract void org.apache.tinkerpop.gremlin.process.traversal.Path.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath.attach(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<org.apache.tinkerpop.gremlin.process.traversal.Path>, org.apache.tinkerpop.gremlin.process.traversal.Path>)
      attach(arg0: Function): Path;
      attachP(arg0: Function): Promise<Path>;
      // public default V org.apache.tinkerpop.gremlin.structure.util.Attachable.attach(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<V>, V>) throws java.lang.IllegalStateException
      attach(arg0: Function): object_t;
      attachP(arg0: Function): Promise<object_t>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath.clone()
      clone(): MutablePath;
      cloneP(): Promise<MutablePath>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.clone()
      clone(): Path;
      cloneP(): Promise<Path>;
      // public java.lang.Object org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.extend(java.lang.Object,java.lang.String...)
      extend(arg0: object_t, ...arg1: string_t[]): Path;
      extend(arg0: object_t, arg1: array_t<string_t>): Path;
      extendP(arg0: object_t, ...arg1: string_t[]): Promise<Path>;
      extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Path>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.Path.extend(java.lang.Object,java.util.Set<java.lang.String>)
      extend(arg0: object_t, arg1: Set): Path;
      extendP(arg0: object_t, arg1: Set): Promise<Path>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Path.forEach(java.util.function.BiConsumer<java.lang.Object, java.util.Set<java.lang.String>>)
      forEach(arg0: BiConsumer): void;
      forEachP(arg0: BiConsumer): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.traversal.Path.forEach(java.util.function.Consumer<java.lang.Object>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Path.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <A> A org.apache.tinkerpop.gremlin.process.traversal.Path.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath.get()
      get(): Path;
      getP(): Promise<Path>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.util.Attachable.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Path.hasLabel(java.lang.String)
      hasLabel(arg0: string_t): boolean;
      hasLabelP(arg0: string_t): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.traversal.Path.isSimple()
      isSimple(): boolean;
      isSimpleP(): Promise<boolean>;
      // public abstract java.util.List<java.util.Set<java.lang.String>> org.apache.tinkerpop.gremlin.process.traversal.Path.labels()
      labels(): List;
      labelsP(): Promise<List>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract java.util.List<java.lang.Object> org.apache.tinkerpop.gremlin.process.traversal.Path.objects()
      objects(): List;
      objectsP(): Promise<List>;
      // public default int org.apache.tinkerpop.gremlin.process.traversal.Path.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.stream.Stream<org.javatuples.Pair<java.lang.Object, java.util.Set<java.lang.String>>> org.apache.tinkerpop.gremlin.process.traversal.Path.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DetachedPath {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.process.traversal.Path org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath.make()
        make(): Path;
        makeP(): Promise<Path>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util.detached {
    export interface DetachedProperty extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.Property,Java.org.apache.tinkerpop.gremlin.structure.util.Attachable {
      // public default V org.apache.tinkerpop.gremlin.structure.util.Attachable.attach(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<V>, V>) throws java.lang.IllegalStateException
      attach(arg0: Function): object_t;
      attachP(arg0: Function): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Element org.apache.tinkerpop.gremlin.structure.Property.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty.get()
      get(): Property;
      getP(): Promise<Property>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.util.Attachable.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default void org.apache.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public abstract boolean org.apache.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: Supplier): object_t;
      orElseGetP(arg0: Supplier): Promise<object_t>;
      // public default <E> V org.apache.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: Supplier): object_t;
      orElseThrowP(arg0: Supplier): Promise<object_t>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Property.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DetachedProperty {
      export interface Static {
        new (arg0: string_t, arg1: object_t, arg2: Element): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty;
        new (arg0: string_t, arg1: object_t): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util.detached {
    export interface DetachedVertex extends Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement,Java.org.apache.tinkerpop.gremlin.structure.Vertex {
      // public abstract org.apache.tinkerpop.gremlin.structure.Edge org.apache.tinkerpop.gremlin.structure.Vertex.addEdge(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addEdge(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Edge;
      addEdge(arg0: string_t, arg1: Vertex, arg2: object_array_t): Edge;
      addEdgeP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<Edge>;
      addEdgeP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<Edge>;
      // public default V org.apache.tinkerpop.gremlin.structure.util.Attachable.attach(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<V>, V>) throws java.lang.IllegalStateException
      attach(arg0: Function): object_t;
      attachP(arg0: Function): Promise<object_t>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.structure.Vertex.edges(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      edges(arg0: Direction, ...arg1: string_t[]): Iterator;
      edges(arg0: Direction, arg1: array_t<string_t>): Iterator;
      edgesP(arg0: Direction, ...arg1: string_t[]): Promise<Iterator>;
      edgesP(arg0: Direction, arg1: array_t<string_t>): Promise<Iterator>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.util.Attachable.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality,java.lang.String,V,java.lang.Object...)
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): VertexProperty;
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): VertexProperty;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<VertexProperty>;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<VertexProperty>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V,java.lang.Object...)
      property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): VertexProperty;
      property(arg0: string_t, arg1: object_t, arg2: object_array_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<VertexProperty>;
      propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<VertexProperty>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t): Promise<VertexProperty>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(java.lang.String)
      property(arg0: string_t): VertexProperty;
      propertyP(arg0: string_t): Promise<VertexProperty>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.Vertex.vertices(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      vertices(arg0: Direction, ...arg1: string_t[]): Iterator;
      vertices(arg0: Direction, arg1: array_t<string_t>): Iterator;
      verticesP(arg0: Direction, ...arg1: string_t[]): Promise<Iterator>;
      verticesP(arg0: Direction, arg1: array_t<string_t>): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DetachedVertex {
      export interface Static {
        new (arg0: object_t, arg1: string_t, arg2: Map): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex;
        DEFAULT_LABEL: string;
        EMPTY_ARGS: object_t[];
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util.detached {
    export interface DetachedVertexProperty extends Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement,Java.org.apache.tinkerpop.gremlin.structure.VertexProperty {
      // public default V org.apache.tinkerpop.gremlin.structure.util.Attachable.attach(java.util.function.Function<org.apache.tinkerpop.gremlin.structure.util.Attachable<V>, V>) throws java.lang.IllegalStateException
      attach(arg0: Function): object_t;
      attachP(arg0: Function): Promise<object_t>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Element org.apache.tinkerpop.gremlin.structure.Property.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.VertexProperty.element()
      element(): Vertex;
      elementP(): Promise<Vertex>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.util.Attachable.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default void org.apache.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public abstract boolean org.apache.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: Supplier): object_t;
      orElseGetP(arg0: Supplier): Promise<object_t>;
      // public default <E> V org.apache.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: Supplier): object_t;
      orElseThrowP(arg0: Supplier): Promise<object_t>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Property.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DetachedVertexProperty {
      export interface Static {
        new (arg0: object_t, arg1: string_t, arg2: object_t, arg3: Map, arg4: Vertex): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty;
        new (arg0: object_t, arg1: string_t, arg2: object_t, arg3: Map): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty;
        DEFAULT_LABEL: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface ElementHelper extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ElementHelper {
      export interface Static {
        // public static boolean org.apache.tinkerpop.gremlin.structure.util.ElementHelper.areEqual(org.apache.tinkerpop.gremlin.structure.VertexProperty,org.apache.tinkerpop.gremlin.structure.VertexProperty)
        areEqual(arg0: VertexProperty, arg1: VertexProperty): boolean;
        areEqualP(arg0: VertexProperty, arg1: VertexProperty): Promise<boolean>;
        // public static boolean org.apache.tinkerpop.gremlin.structure.util.ElementHelper.areEqual(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.structure.Vertex)
        areEqual(arg0: Vertex, arg1: Vertex): boolean;
        areEqualP(arg0: Vertex, arg1: Vertex): Promise<boolean>;
        // public static boolean org.apache.tinkerpop.gremlin.structure.util.ElementHelper.areEqual(org.apache.tinkerpop.gremlin.structure.Edge,org.apache.tinkerpop.gremlin.structure.Edge)
        areEqual(arg0: Edge, arg1: Edge): boolean;
        areEqualP(arg0: Edge, arg1: Edge): Promise<boolean>;
        // public static boolean org.apache.tinkerpop.gremlin.structure.util.ElementHelper.areEqual(org.apache.tinkerpop.gremlin.structure.VertexProperty,java.lang.Object)
        areEqual(arg0: VertexProperty, arg1: object_t): boolean;
        areEqualP(arg0: VertexProperty, arg1: object_t): Promise<boolean>;
        // public static boolean org.apache.tinkerpop.gremlin.structure.util.ElementHelper.areEqual(org.apache.tinkerpop.gremlin.structure.Property,java.lang.Object)
        areEqual(arg0: Property, arg1: object_t): boolean;
        areEqualP(arg0: Property, arg1: object_t): Promise<boolean>;
        // public static boolean org.apache.tinkerpop.gremlin.structure.util.ElementHelper.areEqual(org.apache.tinkerpop.gremlin.structure.Element,java.lang.Object)
        areEqual(arg0: Element, arg1: object_t): boolean;
        areEqualP(arg0: Element, arg1: object_t): Promise<boolean>;
        // public static java.util.Map<java.lang.String, java.lang.Object> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.asMap(java.lang.Object...)
        asMap(...arg0: object_t[]): Map;
        asMap(arg0: object_array_t): Map;
        asMapP(...arg0: object_t[]): Promise<Map>;
        asMapP(arg0: object_array_t): Promise<Map>;
        // public static java.util.List<org.javatuples.Pair<java.lang.String, java.lang.Object>> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.asPairs(java.lang.Object...)
        asPairs(...arg0: object_t[]): List;
        asPairs(arg0: object_array_t): List;
        asPairsP(...arg0: object_t[]): Promise<List>;
        asPairsP(arg0: object_array_t): Promise<List>;
        // public static void org.apache.tinkerpop.gremlin.structure.util.ElementHelper.attachProperties(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality,java.lang.Object...)
        attachProperties(arg0: Vertex, arg1: VertexProperty$Cardinality, ...arg2: object_t[]): void;
        attachProperties(arg0: Vertex, arg1: VertexProperty$Cardinality, arg2: object_array_t): void;
        attachPropertiesP(arg0: Vertex, arg1: VertexProperty$Cardinality, ...arg2: object_t[]): Promise<void>;
        attachPropertiesP(arg0: Vertex, arg1: VertexProperty$Cardinality, arg2: object_array_t): Promise<void>;
        // public static void org.apache.tinkerpop.gremlin.structure.util.ElementHelper.attachProperties(org.apache.tinkerpop.gremlin.structure.Element,java.lang.Object...)
        attachProperties(arg0: Element, ...arg1: object_t[]): void;
        attachProperties(arg0: Element, arg1: object_array_t): void;
        attachPropertiesP(arg0: Element, ...arg1: object_t[]): Promise<void>;
        attachPropertiesP(arg0: Element, arg1: object_array_t): Promise<void>;
        // public static java.util.Optional<java.lang.Object> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.getIdValue(java.lang.Object...)
        getIdValue(...arg0: object_t[]): object_t;
        getIdValue(arg0: object_array_t): object_t;
        getIdValueP(...arg0: object_t[]): Promise<object_t>;
        getIdValueP(arg0: object_array_t): Promise<object_t>;
        // public static java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.getKeys(java.lang.Object...)
        getKeys(...arg0: object_t[]): Set;
        getKeys(arg0: object_array_t): Set;
        getKeysP(...arg0: object_t[]): Promise<Set>;
        getKeysP(arg0: object_array_t): Promise<Set>;
        // public static java.util.Optional<java.lang.String> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.getLabelValue(java.lang.Object...)
        getLabelValue(...arg0: object_t[]): object_t;
        getLabelValue(arg0: object_array_t): object_t;
        getLabelValueP(...arg0: object_t[]): Promise<object_t>;
        getLabelValueP(arg0: object_array_t): Promise<object_t>;
        // public static org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.util.ElementHelper.getOrAddVertex(org.apache.tinkerpop.gremlin.structure.Graph,java.lang.Object,java.lang.String)
        getOrAddVertex(arg0: Graph, arg1: object_t, arg2: string_t): Vertex;
        getOrAddVertexP(arg0: Graph, arg1: object_t, arg2: string_t): Promise<Vertex>;
        // public static java.lang.Object[] org.apache.tinkerpop.gremlin.structure.util.ElementHelper.getProperties(org.apache.tinkerpop.gremlin.structure.Element,boolean,boolean,java.util.Set<java.lang.String>)
        getProperties(arg0: Element, arg1: boolean_t, arg2: boolean_t, arg3: Set): object_t[];
        getPropertiesP(arg0: Element, arg1: boolean_t, arg2: boolean_t, arg3: Set): Promise<object_t[]>;
        // public static int org.apache.tinkerpop.gremlin.structure.util.ElementHelper.hashCode(org.apache.tinkerpop.gremlin.structure.Property)
        hashCode(arg0: Property): number;
        hashCodeP(arg0: Property): Promise<number>;
        // public static int org.apache.tinkerpop.gremlin.structure.util.ElementHelper.hashCode(org.apache.tinkerpop.gremlin.structure.Element)
        hashCode(arg0: Element): number;
        hashCodeP(arg0: Element): Promise<number>;
        // public static boolean org.apache.tinkerpop.gremlin.structure.util.ElementHelper.haveEqualIds(org.apache.tinkerpop.gremlin.structure.Element,org.apache.tinkerpop.gremlin.structure.Element)
        haveEqualIds(arg0: Element, arg1: Element): boolean;
        haveEqualIdsP(arg0: Element, arg1: Element): Promise<boolean>;
        // public static boolean org.apache.tinkerpop.gremlin.structure.util.ElementHelper.idExists(java.lang.Object,java.lang.Object...)
        idExists(arg0: object_t, ...arg1: object_t[]): boolean;
        idExists(arg0: object_t, arg1: object_array_t): boolean;
        idExistsP(arg0: object_t, ...arg1: object_t[]): Promise<boolean>;
        idExistsP(arg0: object_t, arg1: object_array_t): Promise<boolean>;
        // public static boolean org.apache.tinkerpop.gremlin.structure.util.ElementHelper.keyExists(java.lang.String,java.lang.String...)
        keyExists(arg0: string_t, ...arg1: string_t[]): boolean;
        keyExists(arg0: string_t, arg1: array_t<string_t>): boolean;
        keyExistsP(arg0: string_t, ...arg1: string_t[]): Promise<boolean>;
        keyExistsP(arg0: string_t, arg1: array_t<string_t>): Promise<boolean>;
        // public static void org.apache.tinkerpop.gremlin.structure.util.ElementHelper.legalPropertyKeyValueArray(java.lang.Object...) throws java.lang.IllegalArgumentException
        legalPropertyKeyValueArray(...arg0: object_t[]): void;
        legalPropertyKeyValueArray(arg0: object_array_t): void;
        legalPropertyKeyValueArrayP(...arg0: object_t[]): Promise<void>;
        legalPropertyKeyValueArrayP(arg0: object_array_t): Promise<void>;
        // public static java.util.Map<java.lang.String, org.apache.tinkerpop.gremlin.structure.Property> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.propertyMap(org.apache.tinkerpop.gremlin.structure.Element,java.lang.String...)
        propertyMap(arg0: Element, ...arg1: string_t[]): Map;
        propertyMap(arg0: Element, arg1: array_t<string_t>): Map;
        propertyMapP(arg0: Element, ...arg1: string_t[]): Promise<Map>;
        propertyMapP(arg0: Element, arg1: array_t<string_t>): Promise<Map>;
        // public static java.util.Map<java.lang.String, java.lang.Object> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.propertyValueMap(org.apache.tinkerpop.gremlin.structure.Element,java.lang.String...)
        propertyValueMap(arg0: Element, ...arg1: string_t[]): Map;
        propertyValueMap(arg0: Element, arg1: array_t<string_t>): Map;
        propertyValueMapP(arg0: Element, ...arg1: string_t[]): Promise<Map>;
        propertyValueMapP(arg0: Element, arg1: array_t<string_t>): Promise<Map>;
        // public static java.util.Optional<java.lang.Object[]> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.remove(org.apache.tinkerpop.gremlin.structure.T,java.lang.Object...)
        remove(arg0: T, ...arg1: object_t[]): object_t;
        remove(arg0: T, arg1: object_array_t): object_t;
        removeP(arg0: T, ...arg1: object_t[]): Promise<object_t>;
        removeP(arg0: T, arg1: object_array_t): Promise<object_t>;
        // public static java.util.Optional<java.lang.Object[]> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.remove(java.lang.String,java.lang.Object...)
        remove(arg0: string_t, ...arg1: object_t[]): object_t;
        remove(arg0: string_t, arg1: object_array_t): object_t;
        removeP(arg0: string_t, ...arg1: object_t[]): Promise<object_t>;
        removeP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
        // public static java.lang.Object[] org.apache.tinkerpop.gremlin.structure.util.ElementHelper.replaceKey(java.lang.Object[],java.lang.Object,java.lang.Object)
        replaceKey(arg0: object_array_t, arg1: object_t, arg2: object_t): object_t[];
        replaceKeyP(arg0: object_array_t, arg1: object_t, arg2: object_t): Promise<object_t[]>;
        // public static <V> java.util.Optional<org.apache.tinkerpop.gremlin.structure.VertexProperty<V>> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.stageVertexProperty(org.apache.tinkerpop.gremlin.structure.Vertex,org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality,java.lang.String,V,java.lang.Object...)
        stageVertexProperty(arg0: Vertex, arg1: VertexProperty$Cardinality, arg2: string_t, arg3: object_t, ...arg4: object_t[]): object_t;
        stageVertexProperty(arg0: Vertex, arg1: VertexProperty$Cardinality, arg2: string_t, arg3: object_t, arg4: object_array_t): object_t;
        stageVertexPropertyP(arg0: Vertex, arg1: VertexProperty$Cardinality, arg2: string_t, arg3: object_t, ...arg4: object_t[]): Promise<object_t>;
        stageVertexPropertyP(arg0: Vertex, arg1: VertexProperty$Cardinality, arg2: string_t, arg3: object_t, arg4: object_array_t): Promise<object_t>;
        // public static java.lang.Object[] org.apache.tinkerpop.gremlin.structure.util.ElementHelper.upsert(java.lang.Object[],java.lang.Object,java.lang.Object)
        upsert(arg0: object_array_t, arg1: object_t, arg2: object_t): object_t[];
        upsertP(arg0: object_array_t, arg1: object_t, arg2: object_t): Promise<object_t[]>;
        // public static void org.apache.tinkerpop.gremlin.structure.util.ElementHelper.validateLabel(java.lang.String) throws java.lang.IllegalArgumentException
        validateLabel(arg0: string_t): void;
        validateLabelP(arg0: string_t): Promise<void>;
        // public static void org.apache.tinkerpop.gremlin.structure.util.ElementHelper.validateProperty(java.lang.String,java.lang.Object) throws java.lang.IllegalArgumentException
        validateProperty(arg0: string_t, arg1: object_t): void;
        validatePropertyP(arg0: string_t, arg1: object_t): Promise<void>;
        // public static java.util.Map<java.lang.String, java.util.List<org.apache.tinkerpop.gremlin.structure.VertexProperty>> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.vertexPropertyMap(org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.String...)
        vertexPropertyMap(arg0: Vertex, ...arg1: string_t[]): Map;
        vertexPropertyMap(arg0: Vertex, arg1: array_t<string_t>): Map;
        vertexPropertyMapP(arg0: Vertex, ...arg1: string_t[]): Promise<Map>;
        vertexPropertyMapP(arg0: Vertex, arg1: array_t<string_t>): Promise<Map>;
        // public static java.util.Map<java.lang.String, java.util.List> org.apache.tinkerpop.gremlin.structure.util.ElementHelper.vertexPropertyValueMap(org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.String...)
        vertexPropertyValueMap(arg0: Vertex, ...arg1: string_t[]): Map;
        vertexPropertyValueMap(arg0: Vertex, arg1: array_t<string_t>): Map;
        vertexPropertyValueMapP(arg0: Vertex, ...arg1: string_t[]): Promise<Map>;
        vertexPropertyValueMapP(arg0: Vertex, arg1: array_t<string_t>): Promise<Map>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface FeatureDescriptor extends Java.java.lang.Object {
      // public abstract java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.annotation.Annotation.annotationType()
      annotationType(): Class;
      annotationTypeP(): Promise<Class>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor.description()
      description(): string;
      descriptionP(): Promise<string>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor.name()
      name(): string;
      nameP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
    }
    export module FeatureDescriptor {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface GraphFactory extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphFactory {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.util.GraphFactory;
        // public static org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.util.GraphFactory.open(org.apache.commons.configuration.Configuration)
        open(arg0: object_t): Graph;
        openP(arg0: object_t): Promise<Graph>;
        // public static org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.util.GraphFactory.open(java.lang.String)
        open(arg0: string_t): Graph;
        openP(arg0: string_t): Promise<Graph>;
        // public static org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.util.GraphFactory.open(java.util.Map)
        open(arg0: Map): Graph;
        openP(arg0: Map): Promise<Graph>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface GraphVariableHelper extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphVariableHelper {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper;
        // public static void org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper.validateVariable(java.lang.String,java.lang.Object) throws java.lang.IllegalArgumentException
        validateVariable(arg0: string_t, arg1: object_t): void;
        validateVariableP(arg0: string_t, arg1: object_t): Promise<void>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface Host extends Java.java.lang.Object {
    }
    export module Host {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure.util {
    export interface StringFactory extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StringFactory {
      export interface Static {
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.computeResultString(org.apache.tinkerpop.gremlin.process.computer.ComputerResult)
        computeResultString(arg0: ComputerResult): string;
        computeResultStringP(arg0: ComputerResult): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.edgeString(org.apache.tinkerpop.gremlin.structure.Edge)
        edgeString(arg0: Edge): string;
        edgeStringP(arg0: Edge): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.featureString(org.apache.tinkerpop.gremlin.structure.Graph$Features)
        featureString(arg0: Graph$Features): string;
        featureStringP(arg0: Graph$Features): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.graphComputerString(org.apache.tinkerpop.gremlin.process.computer.GraphComputer)
        graphComputerString(arg0: GraphComputer): string;
        graphComputerStringP(arg0: GraphComputer): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.graphString(org.apache.tinkerpop.gremlin.structure.Graph,java.lang.String)
        graphString(arg0: Graph, arg1: string_t): string;
        graphStringP(arg0: Graph, arg1: string_t): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.graphVariablesString(org.apache.tinkerpop.gremlin.structure.Graph$Variables)
        graphVariablesString(arg0: Graph$Variables): string;
        graphVariablesStringP(arg0: Graph$Variables): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.mapReduceString(org.apache.tinkerpop.gremlin.process.computer.MapReduce,java.lang.String)
        mapReduceString(arg0: MapReduce, arg1: string_t): string;
        mapReduceStringP(arg0: MapReduce, arg1: string_t): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.mapReduceString(org.apache.tinkerpop.gremlin.process.computer.MapReduce)
        mapReduceString(arg0: MapReduce): string;
        mapReduceStringP(arg0: MapReduce): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.memoryString(org.apache.tinkerpop.gremlin.process.computer.Memory)
        memoryString(arg0: Memory): string;
        memoryStringP(arg0: Memory): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.propertyString(org.apache.tinkerpop.gremlin.structure.Property)
        propertyString(arg0: Property): string;
        propertyStringP(arg0: Property): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.stepString(org.apache.tinkerpop.gremlin.process.traversal.Step<?, ?>,java.lang.Object...)
        stepString(arg0: Step, ...arg1: object_t[]): string;
        stepString(arg0: Step, arg1: object_array_t): string;
        stepStringP(arg0: Step, ...arg1: object_t[]): Promise<string>;
        stepStringP(arg0: Step, arg1: object_array_t): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.traversalEngineString(org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine)
        traversalEngineString(arg0: TraversalEngine): string;
        traversalEngineStringP(arg0: TraversalEngine): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.traversalSideEffectsString(org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects)
        traversalSideEffectsString(arg0: TraversalSideEffects): string;
        traversalSideEffectsStringP(arg0: TraversalSideEffects): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.traversalSourceString(org.apache.tinkerpop.gremlin.process.traversal.TraversalSource)
        traversalSourceString(arg0: TraversalSource): string;
        traversalSourceStringP(arg0: TraversalSource): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.traversalStrategiesString(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies)
        traversalStrategiesString(arg0: TraversalStrategies): string;
        traversalStrategiesStringP(arg0: TraversalStrategies): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.traversalStrategyString(org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy)
        traversalStrategyString(arg0: TraversalStrategy): string;
        traversalStrategyStringP(arg0: TraversalStrategy): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.traversalString(org.apache.tinkerpop.gremlin.process.traversal.Traversal.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin<?, ?>)
        traversalString(arg0: Traversal$Admin): string;
        traversalStringP(arg0: Traversal$Admin): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.vertexProgramString(org.apache.tinkerpop.gremlin.process.computer.VertexProgram,java.lang.String)
        vertexProgramString(arg0: VertexProgram, arg1: string_t): string;
        vertexProgramStringP(arg0: VertexProgram, arg1: string_t): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.vertexProgramString(org.apache.tinkerpop.gremlin.process.computer.VertexProgram)
        vertexProgramString(arg0: VertexProgram): string;
        vertexProgramStringP(arg0: VertexProgram): Promise<string>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.structure.util.StringFactory.vertexString(org.apache.tinkerpop.gremlin.structure.Vertex)
        vertexString(arg0: Vertex): string;
        vertexStringP(arg0: Vertex): Promise<string>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Vertex extends Java.org.apache.tinkerpop.gremlin.structure.Element,Java.org.apache.tinkerpop.gremlin.structure.util.Host {
      // public abstract org.apache.tinkerpop.gremlin.structure.Edge org.apache.tinkerpop.gremlin.structure.Vertex.addEdge(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addEdge(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Edge;
      addEdge(arg0: string_t, arg1: Vertex, arg2: object_array_t): Edge;
      addEdgeP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<Edge>;
      addEdgeP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<Edge>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.structure.Vertex.edges(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      edges(arg0: Direction, ...arg1: string_t[]): Iterator;
      edges(arg0: Direction, arg1: array_t<string_t>): Iterator;
      edgesP(arg0: Direction, ...arg1: string_t[]): Promise<Iterator>;
      edgesP(arg0: Direction, arg1: array_t<string_t>): Promise<Iterator>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality,java.lang.String,V,java.lang.Object...)
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): VertexProperty;
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): VertexProperty;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<VertexProperty>;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<VertexProperty>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V,java.lang.Object...)
      property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): VertexProperty;
      property(arg0: string_t, arg1: object_t, arg2: object_array_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<VertexProperty>;
      propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<VertexProperty>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t): Promise<VertexProperty>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(java.lang.String)
      property(arg0: string_t): VertexProperty;
      propertyP(arg0: string_t): Promise<VertexProperty>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.Vertex.vertices(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      vertices(arg0: Direction, ...arg1: string_t[]): Iterator;
      vertices(arg0: Direction, arg1: array_t<string_t>): Iterator;
      verticesP(arg0: Direction, ...arg1: string_t[]): Promise<Iterator>;
      verticesP(arg0: Direction, arg1: array_t<string_t>): Promise<Iterator>;
    }
    export module Vertex {
      export interface Static {
        DEFAULT_LABEL: string;
        EMPTY_ARGS: object_t[];
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface Vertex$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Vertex$Exceptions {
      export interface Static {
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions.edgeAdditionsNotSupported()
        edgeAdditionsNotSupported(): object_t;
        edgeAdditionsNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions.multiplePropertiesExistForProvidedKey(java.lang.String)
        multiplePropertiesExistForProvidedKey(arg0: string_t): object_t;
        multiplePropertiesExistForProvidedKeyP(arg0: string_t): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions.userSuppliedIdsNotSupported()
        userSuppliedIdsNotSupported(): object_t;
        userSuppliedIdsNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions.userSuppliedIdsOfThisTypeNotSupported()
        userSuppliedIdsOfThisTypeNotSupported(): object_t;
        userSuppliedIdsOfThisTypeNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions.vertexRemovalNotSupported()
        vertexRemovalNotSupported(): object_t;
        vertexRemovalNotSupportedP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface VertexProperty extends Java.org.apache.tinkerpop.gremlin.structure.Element,Java.org.apache.tinkerpop.gremlin.structure.Property {
      // public abstract org.apache.tinkerpop.gremlin.structure.Element org.apache.tinkerpop.gremlin.structure.Property.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.VertexProperty.element()
      element(): Vertex;
      elementP(): Promise<Vertex>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default void org.apache.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public abstract boolean org.apache.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: Supplier): object_t;
      orElseGetP(arg0: Supplier): Promise<object_t>;
      // public default <E> V org.apache.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: Supplier): object_t;
      orElseThrowP(arg0: Supplier): Promise<object_t>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Property.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
    }
    export module VertexProperty {
      export interface Static {
        // public static <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.VertexProperty.empty()
        empty(): VertexProperty;
        emptyP(): Promise<VertexProperty>;
        // public static <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Property.empty()
        empty(): Property;
        emptyP(): Promise<Property>;
        DEFAULT_LABEL: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface VertexProperty$Cardinality extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module VertexProperty$Cardinality {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality.valueOf(java.lang.String)
        valueOf(arg0: string_t): VertexProperty$Cardinality;
        valueOfP(arg0: string_t): Promise<VertexProperty$Cardinality>;
        // public static org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality[] org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality.values()
        values(): VertexProperty$Cardinality[];
        valuesP(): Promise<VertexProperty$Cardinality[]>;
        single: VertexProperty$Cardinality;
        list: VertexProperty$Cardinality;
        set: VertexProperty$Cardinality;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.structure {
    export interface VertexProperty$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module VertexProperty$Exceptions {
      export interface Static {
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions.metaPropertiesNotSupported()
        metaPropertiesNotSupported(): object_t;
        metaPropertiesNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions.multiPropertiesNotSupported()
        multiPropertiesNotSupported(): object_t;
        multiPropertiesNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions.userSuppliedIdsNotSupported()
        userSuppliedIdsNotSupported(): object_t;
        userSuppliedIdsNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions.userSuppliedIdsOfThisTypeNotSupported()
        userSuppliedIdsOfThisTypeNotSupported(): object_t;
        userSuppliedIdsOfThisTypeNotSupportedP(): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
    export interface TinkerComputerResult extends Java.java.lang.Object {
      // public void org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult.close()
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.process.computer.util.DefaultComputerResult.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public org.apache.tinkerpop.gremlin.process.computer.Memory org.apache.tinkerpop.gremlin.process.computer.util.DefaultComputerResult.memory()
      memory(): Memory;
      memoryP(): Promise<Memory>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerComputerResult {
      export interface Static {
        new (arg0: Graph, arg1: Memory): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
    export interface TinkerGraphComputer extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features org.apache.tinkerpop.gremlin.process.computer.GraphComputer.features()
      features(): GraphComputer$Features;
      featuresP(): Promise<GraphComputer$Features>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer org.apache.tinkerpop.gremlin.process.computer.GraphComputer.mapReduce(org.apache.tinkerpop.gremlin.process.computer.MapReduce)
      mapReduce(arg0: MapReduce): GraphComputer;
      mapReduceP(arg0: MapReduce): Promise<GraphComputer>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer org.apache.tinkerpop.gremlin.process.computer.GraphComputer.persist(org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist)
      persist(arg0: GraphComputer$Persist): GraphComputer;
      persistP(arg0: GraphComputer$Persist): Promise<GraphComputer>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer org.apache.tinkerpop.gremlin.process.computer.GraphComputer.program(org.apache.tinkerpop.gremlin.process.computer.VertexProgram)
      program(arg0: VertexProgram): GraphComputer;
      programP(arg0: VertexProgram): Promise<GraphComputer>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer org.apache.tinkerpop.gremlin.process.computer.GraphComputer.result(org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph)
      result(arg0: GraphComputer$ResultGraph): GraphComputer;
      resultP(arg0: GraphComputer$ResultGraph): Promise<GraphComputer>;
      // public abstract java.util.concurrent.Future<org.apache.tinkerpop.gremlin.process.computer.ComputerResult> org.apache.tinkerpop.gremlin.process.computer.GraphComputer.submit()
      submit(): object_t;
      submitP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraphComputer {
      export interface Static {
        new (arg0: TinkerGraph): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer;
        // public static org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer.engine()
        engine(): TraversalEngine;
        engineP(): Promise<TraversalEngine>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
    export interface TinkerGraphView extends Java.java.lang.Object {
      // public <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView.addProperty(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex,java.lang.String,V)
      addProperty(arg0: TinkerVertex, arg1: string_t, arg2: object_t): Property;
      addPropertyP(arg0: TinkerVertex, arg1: string_t, arg2: object_t): Promise<Property>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.List<org.apache.tinkerpop.gremlin.structure.Property> org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView.getProperties(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex)
      getProperties(arg0: TinkerVertex): List;
      getPropertiesP(arg0: TinkerVertex): Promise<List>;
      // public java.util.List<org.apache.tinkerpop.gremlin.structure.VertexProperty> org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView.getProperty(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex,java.lang.String)
      getProperty(arg0: TinkerVertex, arg1: string_t): List;
      getPropertyP(arg0: TinkerVertex, arg1: string_t): Promise<List>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView.isComputeKey(java.lang.String)
      isComputeKey(arg0: string_t): boolean;
      isComputeKeyP(arg0: string_t): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView.removeProperty(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex,java.lang.String,org.apache.tinkerpop.gremlin.structure.VertexProperty)
      removeProperty(arg0: TinkerVertex, arg1: string_t, arg2: VertexProperty): void;
      removePropertyP(arg0: TinkerVertex, arg1: string_t, arg2: VertexProperty): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraphView {
      export interface Static {
        new (arg0: Set): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
    export interface TinkerMapEmitter extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter {
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter.emit(K,V)
      emit(arg0: object_t, arg1: object_t): void;
      emitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter.emit(V)
      emit(arg0: object_t): void;
      emitP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      reduceMap: Map;
      mapQueue: object_t;
    }
    export module TinkerMapEmitter {
      export interface Static {
        new (arg0: boolean_t): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
    export interface TinkerMemory extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.computer.Memory$Admin {
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.and(java.lang.String,boolean)
      and(arg0: string_t, arg1: boolean_t): void;
      andP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.process.computer.Memory org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.asImmutable()
      asImmutable(): Memory;
      asImmutableP(): Promise<Memory>;
      // public default java.util.Map<java.lang.String, java.lang.Object> org.apache.tinkerpop.gremlin.process.computer.Memory.asMap()
      asMap(): Map;
      asMapP(): Promise<Map>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.Memory.exists(java.lang.String)
      exists(arg0: string_t): boolean;
      existsP(arg0: string_t): Promise<boolean>;
      // public abstract <R> R org.apache.tinkerpop.gremlin.process.computer.Memory.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract int org.apache.tinkerpop.gremlin.process.computer.Memory.getIteration()
      getIteration(): number;
      getIterationP(): Promise<number>;
      // public abstract long org.apache.tinkerpop.gremlin.process.computer.Memory.getRuntime()
      getRuntime(): longValue_t;
      getRuntimeP(): Promise<longValue_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.incr(java.lang.String,long)
      incr(arg0: string_t, arg1: long_t): void;
      incrP(arg0: string_t, arg1: long_t): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.incrIteration()
      incrIteration(): void;
      incrIterationP(): Promise<void>;
      // public default boolean org.apache.tinkerpop.gremlin.process.computer.Memory.isInitialIteration()
      isInitialIteration(): boolean;
      isInitialIterationP(): Promise<boolean>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.process.computer.Memory.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.or(java.lang.String,boolean)
      or(arg0: string_t, arg1: boolean_t): void;
      orP(arg0: string_t, arg1: boolean_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.setIteration(int)
      setIteration(arg0: integer_t): void;
      setIterationP(arg0: integer_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.setRuntime(long)
      setRuntime(arg0: long_t): void;
      setRuntimeP(arg0: long_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      memoryKeys: Set;
      previousMap: Map;
      currentMap: Map;
    }
    export module TinkerMemory {
      export interface Static {
        new (arg0: VertexProgram, arg1: Set): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
    export interface TinkerMessenger extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.computer.Messenger {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract java.util.Iterator<M> org.apache.tinkerpop.gremlin.process.computer.Messenger.receiveMessages()
      receiveMessages(): Iterator;
      receiveMessagesP(): Promise<Iterator>;
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.Messenger.sendMessage(org.apache.tinkerpop.gremlin.process.computer.MessageScope,M)
      sendMessage(arg0: MessageScope, arg1: object_t): void;
      sendMessageP(arg0: MessageScope, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerMessenger {
      export interface Static {
        new (arg0: Vertex, arg1: object_t, arg2: object_t): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
    export interface TinkerReduceEmitter extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter {
      // public abstract void org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter.emit(OK,OV)
      emit(arg0: object_t, arg1: object_t): void;
      emitP(arg0: object_t, arg1: object_t): Promise<void>;
      // public default void org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter.emit(OV)
      emit(arg0: object_t): void;
      emitP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerReduceEmitter {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
    export interface TinkerWorkerPool extends Java.java.lang.Object {
      // public void org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.close() throws java.lang.Exception
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.executeMapReduce(java.util.function.Consumer<org.apache.tinkerpop.gremlin.process.computer.MapReduce>)
      executeMapReduce(arg0: Consumer): void;
      executeMapReduceP(arg0: Consumer): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.executeVertexProgram(java.util.function.Consumer<org.apache.tinkerpop.gremlin.process.computer.VertexProgram>)
      executeVertexProgram(arg0: Consumer): void;
      executeVertexProgramP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.mapReduceWorkerEnd(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      mapReduceWorkerEnd(arg0: MapReduce$Stage): void;
      mapReduceWorkerEndP(arg0: MapReduce$Stage): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.mapReduceWorkerStart(org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage)
      mapReduceWorkerStart(arg0: MapReduce$Stage): void;
      mapReduceWorkerStartP(arg0: MapReduce$Stage): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.setMapReduce(org.apache.tinkerpop.gremlin.process.computer.MapReduce)
      setMapReduce(arg0: MapReduce): void;
      setMapReduceP(arg0: MapReduce): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.setVertexProgram(org.apache.tinkerpop.gremlin.process.computer.VertexProgram)
      setVertexProgram(arg0: VertexProgram): void;
      setVertexProgramP(arg0: VertexProgram): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public void org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.vertexProgramWorkerIterationEnd(org.apache.tinkerpop.gremlin.process.computer.Memory)
      vertexProgramWorkerIterationEnd(arg0: Memory): void;
      vertexProgramWorkerIterationEndP(arg0: Memory): Promise<void>;
      // public void org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.vertexProgramWorkerIterationStart(org.apache.tinkerpop.gremlin.process.computer.Memory)
      vertexProgramWorkerIterationStart(arg0: Memory): void;
      vertexProgramWorkerIterationStartP(arg0: Memory): Promise<void>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerWorkerPool {
      export interface Static {
        new (arg0: integer_t): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerEdge extends Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement,Java.org.apache.tinkerpop.gremlin.structure.Edge {
      // public default java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.Edge.bothVertices()
      bothVertices(): Iterator;
      bothVerticesP(): Promise<Iterator>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.Edge.inVertex()
      inVertex(): Vertex;
      inVertexP(): Promise<Vertex>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.Edge.outVertex()
      outVertex(): Vertex;
      outVertexP(): Promise<Vertex>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.Edge.vertices(org.apache.tinkerpop.gremlin.structure.Direction)
      vertices(arg0: Direction): Iterator;
      verticesP(arg0: Direction): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerEdge {
      export interface Static {
        DEFAULT_LABEL: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerElement extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.Element {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerElement {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerFactory extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerFactory {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.createClassic()
        createClassic(): TinkerGraph;
        createClassicP(): Promise<TinkerGraph>;
        // public static org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.createModern()
        createModern(): TinkerGraph;
        createModernP(): Promise<TinkerGraph>;
        // public static org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.createTheCrew()
        createTheCrew(): TinkerGraph;
        createTheCrewP(): Promise<TinkerGraph>;
        // public static void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.generateClassic(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        generateClassic(arg0: TinkerGraph): void;
        generateClassicP(arg0: TinkerGraph): Promise<void>;
        // public static void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.generateModern(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        generateModern(arg0: TinkerGraph): void;
        generateModernP(arg0: TinkerGraph): Promise<void>;
        // public static void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.generateTheCrew(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        generateTheCrew(arg0: TinkerGraph): void;
        generateTheCrewP(arg0: TinkerGraph): Promise<void>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.Graph {
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.Object...)
      addVertex(...arg0: object_t[]): Vertex;
      addVertex(arg0: object_array_t): Vertex;
      addVertexP(...arg0: object_t[]): Promise<Vertex>;
      addVertexP(arg0: object_array_t): Promise<Vertex>;
      // public default org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.String)
      addVertex(arg0: string_t): Vertex;
      addVertexP(arg0: string_t): Promise<Vertex>;
      // public void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract void java.lang.AutoCloseable.close() throws java.lang.Exception
      close(): void;
      closeP(): Promise<void>;
      // public abstract <C> C org.apache.tinkerpop.gremlin.structure.Graph.compute(java.lang.Class<C>) throws java.lang.IllegalArgumentException
      compute(arg0: Class): GraphComputer;
      computeP(arg0: Class): Promise<GraphComputer>;
      // public abstract org.apache.tinkerpop.gremlin.process.computer.GraphComputer org.apache.tinkerpop.gremlin.structure.Graph.compute() throws java.lang.IllegalArgumentException
      compute(): GraphComputer;
      computeP(): Promise<GraphComputer>;
      // public abstract org.apache.commons.configuration.Configuration org.apache.tinkerpop.gremlin.structure.Graph.configuration()
      configuration(): object_t;
      configurationP(): Promise<object_t>;
      // public <E> void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.createIndex(java.lang.String,java.lang.Class<E>)
      createIndex(arg0: string_t, arg1: Class): void;
      createIndexP(arg0: string_t, arg1: Class): Promise<void>;
      // public <E> void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.dropIndex(java.lang.String,java.lang.Class<E>)
      dropIndex(arg0: string_t, arg1: Class): void;
      dropIndexP(arg0: string_t, arg1: Class): Promise<void>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.structure.Graph.edges(java.lang.Object...)
      edges(...arg0: object_t[]): Iterator;
      edges(arg0: object_array_t): Iterator;
      edgesP(...arg0: object_t[]): Promise<Iterator>;
      edgesP(arg0: object_array_t): Promise<Iterator>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features org.apache.tinkerpop.gremlin.structure.Graph.features()
      features(): Graph$Features;
      featuresP(): Promise<Graph$Features>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public <E> java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.getIndexedKeys(java.lang.Class<E>)
      getIndexedKeys(arg0: Class): Set;
      getIndexedKeysP(arg0: Class): Promise<Set>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default <I> I org.apache.tinkerpop.gremlin.structure.Graph.io(org.apache.tinkerpop.gremlin.structure.io.Io.org.apache.tinkerpop.gremlin.structure.io.Io$Builder<I>)
      io(arg0: Io$Builder): Io;
      ioP(arg0: Io$Builder): Promise<Io>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default <C> C org.apache.tinkerpop.gremlin.structure.Graph.traversal(org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder<C>)
      traversal(arg0: TraversalSource$Builder): TraversalSource;
      traversalP(arg0: TraversalSource$Builder): Promise<TraversalSource>;
      // public default org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource org.apache.tinkerpop.gremlin.structure.Graph.traversal()
      traversal(): GraphTraversalSource;
      traversalP(): Promise<GraphTraversalSource>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Transaction org.apache.tinkerpop.gremlin.structure.Graph.tx()
      tx(): Transaction;
      txP(): Promise<Transaction>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph$Variables org.apache.tinkerpop.gremlin.structure.Graph.variables()
      variables(): Graph$Variables;
      variablesP(): Promise<Graph$Variables>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.Graph.vertices(java.lang.Object...)
      vertices(...arg0: object_t[]): Iterator;
      vertices(arg0: object_array_t): Iterator;
      verticesP(...arg0: object_t[]): Promise<Iterator>;
      verticesP(arg0: object_array_t): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.empty()
        empty(): TinkerGraph;
        emptyP(): Promise<TinkerGraph>;
        // public static org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.open(org.apache.commons.configuration.Configuration)
        open(arg0: object_t): TinkerGraph;
        openP(arg0: object_t): Promise<TinkerGraph>;
        // public static org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.open()
        open(): TinkerGraph;
        openP(): Promise<TinkerGraph>;
        CONFIG_VERTEX_ID: string;
        CONFIG_EDGE_ID: string;
        CONFIG_VERTEX_PROPERTY_ID: string;
        GRAPH: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph$DefaultIdManager extends Java.java.lang.Enum,Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public abstract T org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager.convert(java.lang.Object)
      convert(arg0: object_t): object_t;
      convertP(arg0: object_t): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): Class;
      getDeclaringClassP(): Promise<Class>;
      // public abstract T org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager.getNextId(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
      getNextId(arg0: TinkerGraph): object_t;
      getNextIdP(arg0: TinkerGraph): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph$DefaultIdManager {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: Class, arg1: string_t): Enum;
        valueOfP(arg0: Class, arg1: string_t): Promise<Enum>;
        // public static org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager.valueOf(java.lang.String)
        valueOf(arg0: string_t): TinkerGraph$DefaultIdManager;
        valueOfP(arg0: string_t): Promise<TinkerGraph$DefaultIdManager>;
        // public static org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager[] org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager.values()
        values(): TinkerGraph$DefaultIdManager[];
        valuesP(): Promise<TinkerGraph$DefaultIdManager[]>;
        LONG: TinkerGraph$DefaultIdManager;
        INTEGER: TinkerGraph$DefaultIdManager;
        UUID: TinkerGraph$DefaultIdManager;
        ANY: TinkerGraph$DefaultIdManager;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph$IdManager extends Java.java.lang.Object {
      // public abstract T org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager.convert(java.lang.Object)
      convert(arg0: object_t): object_t;
      convertP(arg0: object_t): Promise<object_t>;
      // public abstract T org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager.getNextId(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
      getNextId(arg0: TinkerGraph): object_t;
      getNextIdP(arg0: TinkerGraph): Promise<object_t>;
    }
    export module TinkerGraph$IdManager {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph$TinkerGraphEdgeFeatures extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.properties()
      properties(): Graph$Features$EdgePropertyFeatures;
      propertiesP(): Promise<Graph$Features$EdgePropertyFeatures>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.supportsAddEdges()
      supportsAddEdges(): boolean;
      supportsAddEdgesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.supportsRemoveEdges()
      supportsRemoveEdges(): boolean;
      supportsRemoveEdgesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph$TinkerGraphEdgeFeatures {
      export interface Static {
        FEATURE_ADD_EDGES: string;
        FEATURE_REMOVE_EDGES: string;
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph$TinkerGraphFeatures extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.Graph$Features {
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features.edge()
      edge(): Graph$Features$EdgeFeatures;
      edgeP(): Promise<Graph$Features$EdgeFeatures>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features.graph()
      graph(): Graph$Features$GraphFeatures;
      graphP(): Promise<Graph$Features$GraphFeatures>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features.supports(java.lang.Class<? extends org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet>,java.lang.String) throws java.lang.NoSuchMethodException,java.lang.IllegalAccessException,java.lang.reflect.InvocationTargetException
      supports(arg0: Class, arg1: string_t): boolean;
      supportsP(arg0: Class, arg1: string_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features.vertex()
      vertex(): Graph$Features$VertexFeatures;
      vertexP(): Promise<Graph$Features$VertexFeatures>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph$TinkerGraphFeatures {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph$TinkerGraphGraphFeatures extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsComputer()
      supportsComputer(): boolean;
      supportsComputerP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsPersistence()
      supportsPersistence(): boolean;
      supportsPersistenceP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsThreadedTransactions()
      supportsThreadedTransactions(): boolean;
      supportsThreadedTransactionsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsTransactions()
      supportsTransactions(): boolean;
      supportsTransactionsP(): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.variables()
      variables(): Graph$Features$VariableFeatures;
      variablesP(): Promise<Graph$Features$VariableFeatures>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph$TinkerGraphGraphFeatures {
      export interface Static {
        FEATURE_COMPUTER: string;
        FEATURE_TRANSACTIONS: string;
        FEATURE_PERSISTENCE: string;
        FEATURE_THREADED_TRANSACTIONS: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph$TinkerGraphVertexFeatures extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.getCardinality(java.lang.String)
      getCardinality(arg0: string_t): VertexProperty$Cardinality;
      getCardinalityP(arg0: string_t): Promise<VertexProperty$Cardinality>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.properties()
      properties(): Graph$Features$VertexPropertyFeatures;
      propertiesP(): Promise<Graph$Features$VertexPropertyFeatures>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsAddVertices()
      supportsAddVertices(): boolean;
      supportsAddVerticesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsMetaProperties()
      supportsMetaProperties(): boolean;
      supportsMetaPropertiesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsMultiProperties()
      supportsMultiProperties(): boolean;
      supportsMultiPropertiesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsRemoveVertices()
      supportsRemoveVertices(): boolean;
      supportsRemoveVerticesP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph$TinkerGraphVertexFeatures {
      export interface Static {
        FEATURE_ADD_VERTICES: string;
        FEATURE_MULTI_PROPERTIES: string;
        FEATURE_META_PROPERTIES: string;
        FEATURE_REMOVE_VERTICES: string;
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraphVariables extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.Graph$Variables {
      // public default java.util.Map<java.lang.String, java.lang.Object> org.apache.tinkerpop.gremlin.structure.Graph$Variables.asMap()
      asMap(): Map;
      asMapP(): Promise<Map>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract <R> java.util.Optional<R> org.apache.tinkerpop.gremlin.structure.Graph$Variables.get(java.lang.String)
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Graph$Variables.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Graph$Variables.remove(java.lang.String)
      remove(arg0: string_t): void;
      removeP(arg0: string_t): Promise<void>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Graph$Variables.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraphVariables {
      export interface Static {
        new (): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerHelper extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerHelper {
      export interface Static {
        // public static void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.autoUpdateIndex(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex,java.lang.String,java.lang.Object,java.lang.Object)
        autoUpdateIndex(arg0: TinkerVertex, arg1: string_t, arg2: object_t, arg3: object_t): void;
        autoUpdateIndexP(arg0: TinkerVertex, arg1: string_t, arg2: object_t, arg3: object_t): Promise<void>;
        // public static void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.autoUpdateIndex(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge,java.lang.String,java.lang.Object,java.lang.Object)
        autoUpdateIndex(arg0: TinkerEdge, arg1: string_t, arg2: object_t, arg3: object_t): void;
        autoUpdateIndexP(arg0: TinkerEdge, arg1: string_t, arg2: object_t, arg3: object_t): Promise<void>;
        // public static org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.createGraphView(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph,java.util.Set<java.lang.String>)
        createGraphView(arg0: TinkerGraph, arg1: Set): TinkerGraphView;
        createGraphViewP(arg0: TinkerGraph, arg1: Set): Promise<TinkerGraphView>;
        // public static java.util.Iterator<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge> org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.getEdges(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex,org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
        getEdges(arg0: TinkerVertex, arg1: Direction, ...arg2: string_t[]): Iterator;
        getEdges(arg0: TinkerVertex, arg1: Direction, arg2: array_t<string_t>): Iterator;
        getEdgesP(arg0: TinkerVertex, arg1: Direction, ...arg2: string_t[]): Promise<Iterator>;
        getEdgesP(arg0: TinkerVertex, arg1: Direction, arg2: array_t<string_t>): Promise<Iterator>;
        // public static java.util.Map<java.lang.String, java.util.List<org.apache.tinkerpop.gremlin.structure.VertexProperty>> org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.getProperties(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex)
        getProperties(arg0: TinkerVertex): Map;
        getPropertiesP(arg0: TinkerVertex): Promise<Map>;
        // public static java.util.Iterator<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex> org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.getVertices(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex,org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
        getVertices(arg0: TinkerVertex, arg1: Direction, ...arg2: string_t[]): Iterator;
        getVertices(arg0: TinkerVertex, arg1: Direction, arg2: array_t<string_t>): Iterator;
        getVerticesP(arg0: TinkerVertex, arg1: Direction, ...arg2: string_t[]): Promise<Iterator>;
        getVerticesP(arg0: TinkerVertex, arg1: Direction, arg2: array_t<string_t>): Promise<Iterator>;
        // public static boolean org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.inComputerMode(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        inComputerMode(arg0: TinkerGraph): boolean;
        inComputerModeP(arg0: TinkerGraph): Promise<boolean>;
        // public static java.util.List<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge> org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.queryEdgeIndex(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph,java.lang.String,java.lang.Object)
        queryEdgeIndex(arg0: TinkerGraph, arg1: string_t, arg2: object_t): List;
        queryEdgeIndexP(arg0: TinkerGraph, arg1: string_t, arg2: object_t): Promise<List>;
        // public static java.util.List<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex> org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.queryVertexIndex(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph,java.lang.String,java.lang.Object)
        queryVertexIndex(arg0: TinkerGraph, arg1: string_t, arg2: object_t): List;
        queryVertexIndexP(arg0: TinkerGraph, arg1: string_t, arg2: object_t): Promise<List>;
        // public static void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.removeElementIndex(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex)
        removeElementIndex(arg0: TinkerVertex): void;
        removeElementIndexP(arg0: TinkerVertex): Promise<void>;
        // public static void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.removeElementIndex(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge)
        removeElementIndex(arg0: TinkerEdge): void;
        removeElementIndexP(arg0: TinkerEdge): Promise<void>;
        // public static void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.removeIndex(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex,java.lang.String,java.lang.Object)
        removeIndex(arg0: TinkerVertex, arg1: string_t, arg2: object_t): void;
        removeIndexP(arg0: TinkerVertex, arg1: string_t, arg2: object_t): Promise<void>;
        // public static void org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.removeIndex(org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge,java.lang.String,java.lang.Object)
        removeIndex(arg0: TinkerEdge, arg1: string_t, arg2: object_t): void;
        removeIndexP(arg0: TinkerEdge, arg1: string_t, arg2: object_t): Promise<void>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerProperty extends Java.java.lang.Object,Java.org.apache.tinkerpop.gremlin.structure.Property {
      // public abstract org.apache.tinkerpop.gremlin.structure.Element org.apache.tinkerpop.gremlin.structure.Property.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default void org.apache.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public abstract boolean org.apache.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: Supplier): object_t;
      orElseGetP(arg0: Supplier): Promise<object_t>;
      // public default <E> V org.apache.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: Supplier): object_t;
      orElseThrowP(arg0: Supplier): Promise<object_t>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Property.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerProperty {
      export interface Static {
        new (arg0: Element, arg1: string_t, arg2: object_t): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerVertex extends Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement,Java.org.apache.tinkerpop.gremlin.structure.Vertex {
      // public abstract org.apache.tinkerpop.gremlin.structure.Edge org.apache.tinkerpop.gremlin.structure.Vertex.addEdge(java.lang.String,org.apache.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addEdge(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Edge;
      addEdge(arg0: string_t, arg1: Vertex, arg2: object_array_t): Edge;
      addEdgeP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<Edge>;
      addEdgeP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<Edge>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Edge> org.apache.tinkerpop.gremlin.structure.Vertex.edges(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      edges(arg0: Direction, ...arg1: string_t[]): Iterator;
      edges(arg0: Direction, arg1: array_t<string_t>): Iterator;
      edgesP(arg0: Direction, ...arg1: string_t[]): Promise<Iterator>;
      edgesP(arg0: Direction, arg1: array_t<string_t>): Promise<Iterator>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality,java.lang.String,V,java.lang.Object...)
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): VertexProperty;
      property(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): VertexProperty;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<VertexProperty>;
      propertyP(arg0: VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<VertexProperty>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V,java.lang.Object...)
      property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): VertexProperty;
      property(arg0: string_t, arg1: object_t, arg2: object_array_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<VertexProperty>;
      propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<VertexProperty>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t): Promise<VertexProperty>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.VertexProperty<V> org.apache.tinkerpop.gremlin.structure.Vertex.property(java.lang.String)
      property(arg0: string_t): VertexProperty;
      propertyP(arg0: string_t): Promise<VertexProperty>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract java.util.Iterator<org.apache.tinkerpop.gremlin.structure.Vertex> org.apache.tinkerpop.gremlin.structure.Vertex.vertices(org.apache.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      vertices(arg0: Direction, ...arg1: string_t[]): Iterator;
      vertices(arg0: Direction, arg1: array_t<string_t>): Iterator;
      verticesP(arg0: Direction, ...arg1: string_t[]): Promise<Iterator>;
      verticesP(arg0: Direction, arg1: array_t<string_t>): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerVertex {
      export interface Static {
        DEFAULT_LABEL: string;
        EMPTY_ARGS: object_t[];
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerVertexProperty extends Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement,Java.org.apache.tinkerpop.gremlin.structure.VertexProperty {
      // public abstract org.apache.tinkerpop.gremlin.structure.Element org.apache.tinkerpop.gremlin.structure.Property.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Vertex org.apache.tinkerpop.gremlin.structure.VertexProperty.element()
      element(): Vertex;
      elementP(): Promise<Vertex>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public abstract org.apache.tinkerpop.gremlin.structure.Graph org.apache.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.Object org.apache.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default void org.apache.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public abstract boolean org.apache.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public default java.util.Set<java.lang.String> org.apache.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String org.apache.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V org.apache.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: Supplier): object_t;
      orElseGetP(arg0: Supplier): Promise<object_t>;
      // public default <E> V org.apache.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: Supplier): object_t;
      orElseThrowP(arg0: Supplier): Promise<object_t>;
      // public abstract <V> java.util.Iterator<? extends org.apache.tinkerpop.gremlin.structure.Property<V>> org.apache.tinkerpop.gremlin.structure.Element.properties(java.lang.String...)
      properties(...arg0: string_t[]): Iterator;
      properties(arg0: array_t<string_t>): Iterator;
      propertiesP(...arg0: string_t[]): Promise<Iterator>;
      propertiesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> org.apache.tinkerpop.gremlin.structure.Property<V> org.apache.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void org.apache.tinkerpop.gremlin.structure.Property.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default <V> V org.apache.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public abstract V org.apache.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
      // public default <V> java.util.Iterator<V> org.apache.tinkerpop.gremlin.structure.Element.values(java.lang.String...)
      values(...arg0: string_t[]): Iterator;
      values(arg0: array_t<string_t>): Iterator;
      valuesP(...arg0: string_t[]): Promise<Iterator>;
      valuesP(arg0: array_t<string_t>): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerVertexProperty {
      export interface Static {
        new (arg0: object_t, arg1: TinkerVertex, arg2: string_t, arg3: object_t, ...arg4: object_t[]): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty;
        new (arg0: TinkerVertex, arg1: string_t, arg2: object_t, ...arg3: object_t[]): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty;
        DEFAULT_LABEL: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface ArrayListSupplier extends Java.java.lang.Object,Java.java.util.function_.Supplier {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.ArrayList<A> org.apache.tinkerpop.gremlin.util.function.ArrayListSupplier.get()
      get(): ArrayList;
      getP(): Promise<ArrayList>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ArrayListSupplier {
      export interface Static {
        // public static <A> org.apache.tinkerpop.gremlin.util.function.ArrayListSupplier<A> org.apache.tinkerpop.gremlin.util.function.ArrayListSupplier.instance()
        instance(): ArrayListSupplier;
        instanceP(): Promise<ArrayListSupplier>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface BulkSetSupplier extends Java.java.lang.Object,Java.java.util.function_.Supplier {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet<A> org.apache.tinkerpop.gremlin.util.function.BulkSetSupplier.get()
      get(): BulkSet;
      getP(): Promise<BulkSet>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module BulkSetSupplier {
      export interface Static {
        // public static <A> org.apache.tinkerpop.gremlin.util.function.BulkSetSupplier<A> org.apache.tinkerpop.gremlin.util.function.BulkSetSupplier.instance()
        instance(): BulkSetSupplier;
        instanceP(): Promise<BulkSetSupplier>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface ChainedComparator extends Java.java.lang.Object,Java.java.util.Comparator {
      // public abstract int java.util.Comparator.compare(T,T)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): Comparator;
      reversedP(): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: Comparator): Comparator;
      thenComparingP(arg0: Function, arg1: Comparator): Promise<Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): Comparator;
      thenComparingP(arg0: Function): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: Comparator): Comparator;
      thenComparingP(arg0: Comparator): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): Comparator;
      thenComparingDoubleP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): Comparator;
      thenComparingIntP(arg0: object_t): Promise<Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): Comparator;
      thenComparingLongP(arg0: object_t): Promise<Comparator>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ChainedComparator {
      export interface Static {
        new (arg0: List): org.apache.tinkerpop.gremlin.util.function_.ChainedComparator;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface ConstantSupplier extends Java.java.lang.Object,Java.java.util.function_.Supplier {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ConstantSupplier {
      export interface Static {
        new (arg0: object_t): org.apache.tinkerpop.gremlin.util.function_.ConstantSupplier;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface FunctionUtils extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module FunctionUtils {
      export interface Static {
        // public static <T,U> java.util.function.BiConsumer<T, U> org.apache.tinkerpop.gremlin.util.function.FunctionUtils.wrapBiConsumer(org.apache.tinkerpop.gremlin.util.function.ThrowingBiConsumer<T, U>)
        wrapBiConsumer(arg0: ThrowingBiConsumer): BiConsumer;
        wrapBiConsumerP(arg0: ThrowingBiConsumer): Promise<BiConsumer>;
        // public static <T> java.util.function.Consumer<T> org.apache.tinkerpop.gremlin.util.function.FunctionUtils.wrapConsumer(org.apache.tinkerpop.gremlin.util.function.ThrowingConsumer<T>)
        wrapConsumer(arg0: ThrowingConsumer): Consumer;
        wrapConsumerP(arg0: ThrowingConsumer): Promise<Consumer>;
        // public static <T,U> java.util.function.Function<T, U> org.apache.tinkerpop.gremlin.util.function.FunctionUtils.wrapFunction(org.apache.tinkerpop.gremlin.util.function.ThrowingFunction<T, U>)
        wrapFunction(arg0: ThrowingFunction): Function;
        wrapFunctionP(arg0: ThrowingFunction): Promise<Function>;
        // public static <T> java.util.function.Supplier<T> org.apache.tinkerpop.gremlin.util.function.FunctionUtils.wrapSupplier(org.apache.tinkerpop.gremlin.util.function.ThrowingSupplier<T>)
        wrapSupplier(arg0: ThrowingSupplier): Supplier;
        wrapSupplierP(arg0: ThrowingSupplier): Promise<Supplier>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface HashMapSupplier extends Java.java.lang.Object,Java.java.util.function_.Supplier {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.HashMap<K, V> org.apache.tinkerpop.gremlin.util.function.HashMapSupplier.get()
      get(): HashMap;
      getP(): Promise<HashMap>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module HashMapSupplier {
      export interface Static {
        // public static <K,V> org.apache.tinkerpop.gremlin.util.function.HashMapSupplier<K, V> org.apache.tinkerpop.gremlin.util.function.HashMapSupplier.instance()
        instance(): HashMapSupplier;
        instanceP(): Promise<HashMapSupplier>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface HashSetSupplier extends Java.java.lang.Object,Java.java.util.function_.Supplier {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.HashSet<A> org.apache.tinkerpop.gremlin.util.function.HashSetSupplier.get()
      get(): HashSet;
      getP(): Promise<HashSet>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module HashSetSupplier {
      export interface Static {
        // public static <A> org.apache.tinkerpop.gremlin.util.function.HashSetSupplier<A> org.apache.tinkerpop.gremlin.util.function.HashSetSupplier.instance()
        instance(): HashSetSupplier;
        instanceP(): Promise<HashSetSupplier>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface MeanNumberSupplier extends Java.java.lang.Object,Java.java.util.function_.Supplier {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.map.MeanGlobalStep$MeanNumber org.apache.tinkerpop.gremlin.util.function.MeanNumberSupplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MeanNumberSupplier {
      export interface Static {
        // public static org.apache.tinkerpop.gremlin.util.function.MeanNumberSupplier org.apache.tinkerpop.gremlin.util.function.MeanNumberSupplier.instance()
        instance(): MeanNumberSupplier;
        instanceP(): Promise<MeanNumberSupplier>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface ScriptEngineLambda extends Java.java.lang.Object,Java.java.util.function_.BiConsumer,Java.java.util.function_.Consumer,Java.java.util.function_.Function,Java.java.util.function_.Predicate,Java.java.util.function_.Supplier,Java.org.apache.tinkerpop.gremlin.util.function_.TriConsumer {
      // public abstract void org.apache.tinkerpop.gremlin.util.function.TriConsumer.accept(A,B,C)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public abstract void java.util.function.BiConsumer.accept(T,U)
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.and(java.util.function.Predicate<? super T>)
      and(arg0: Predicate): Predicate;
      andP(arg0: Predicate): Promise<Predicate>;
      // public default org.apache.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> org.apache.tinkerpop.gremlin.util.function.TriConsumer.andThen(org.apache.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
      // public default java.util.function.BiConsumer<T, U> java.util.function.BiConsumer.andThen(java.util.function.BiConsumer<? super T, ? super U>)
      andThen(arg0: BiConsumer): BiConsumer;
      andThenP(arg0: BiConsumer): Promise<BiConsumer>;
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.negate()
      negate(): Predicate;
      negateP(): Promise<Predicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.function.Predicate<T> java.util.function.Predicate.or(java.util.function.Predicate<? super T>)
      or(arg0: Predicate): Predicate;
      orP(arg0: Predicate): Promise<Predicate>;
      // public abstract boolean java.util.function.Predicate.test(T)
      test(arg0: object_t): boolean;
      testP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ScriptEngineLambda {
      export interface Static {
        new (arg0: string_t, arg1: string_t): org.apache.tinkerpop.gremlin.util.function_.ScriptEngineLambda;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface ThrowingBiConsumer extends Java.java.lang.Object {
      // public abstract void org.apache.tinkerpop.gremlin.util.function.ThrowingBiConsumer.accept(A,B) throws java.lang.Exception
      accept(arg0: object_t, arg1: object_t): void;
      acceptP(arg0: object_t, arg1: object_t): Promise<void>;
    }
    export module ThrowingBiConsumer {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface ThrowingConsumer extends Java.java.lang.Object {
      // public abstract void org.apache.tinkerpop.gremlin.util.function.ThrowingConsumer.accept(A) throws java.lang.Exception
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
    }
    export module ThrowingConsumer {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface ThrowingFunction extends Java.java.lang.Object {
      // public abstract R org.apache.tinkerpop.gremlin.util.function.ThrowingFunction.apply(T) throws java.lang.Exception
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
    }
    export module ThrowingFunction {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface ThrowingSupplier extends Java.java.lang.Object {
      // public abstract T org.apache.tinkerpop.gremlin.util.function.ThrowingSupplier.get() throws java.lang.Exception
      get(): object_t;
      getP(): Promise<object_t>;
    }
    export module ThrowingSupplier {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface TraversableLambda extends Java.java.lang.Object {
      // public abstract org.apache.tinkerpop.gremlin.util.function.TraversableLambda org.apache.tinkerpop.gremlin.util.function.TraversableLambda.clone() throws java.lang.CloneNotSupportedException
      clone(): TraversableLambda;
      cloneP(): Promise<TraversableLambda>;
      // public abstract org.apache.tinkerpop.gremlin.process.traversal.Traversal<S, E> org.apache.tinkerpop.gremlin.util.function.TraversableLambda.getTraversal()
      getTraversal(): Traversal;
      getTraversalP(): Promise<Traversal>;
    }
    export module TraversableLambda {
      export interface Static {
        // public static <T> T org.apache.tinkerpop.gremlin.util.function.TraversableLambda.tryAndClone(java.lang.Object) throws java.lang.CloneNotSupportedException
        tryAndClone(arg0: object_t): object_t;
        tryAndCloneP(arg0: object_t): Promise<object_t>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface TreeSupplier extends Java.java.lang.Object,Java.java.util.function_.Supplier {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree<A> org.apache.tinkerpop.gremlin.util.function.TreeSupplier.get()
      get(): Tree;
      getP(): Promise<Tree>;
      // public abstract T java.util.function.Supplier.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TreeSupplier {
      export interface Static {
        // public static <A> org.apache.tinkerpop.gremlin.util.function.TreeSupplier<A> org.apache.tinkerpop.gremlin.util.function.TreeSupplier.instance()
        instance(): TreeSupplier;
        instanceP(): Promise<TreeSupplier>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface TriConsumer extends Java.java.lang.Object {
      // public abstract void org.apache.tinkerpop.gremlin.util.function.TriConsumer.accept(A,B,C)
      accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
      acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
      // public default org.apache.tinkerpop.gremlin.util.function.TriConsumer<A, B, C> org.apache.tinkerpop.gremlin.util.function.TriConsumer.andThen(org.apache.tinkerpop.gremlin.util.function.TriConsumer<? super A, ? super B, ? super C>)
      andThen(arg0: TriConsumer): TriConsumer;
      andThenP(arg0: TriConsumer): Promise<TriConsumer>;
    }
    export module TriConsumer {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util.function_ {
    export interface TriFunction extends Java.java.lang.Object {
      // public default <V> org.apache.tinkerpop.gremlin.util.function.TriFunction<A, B, C, V> org.apache.tinkerpop.gremlin.util.function.TriFunction.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): TriFunction;
      andThenP(arg0: Function): Promise<TriFunction>;
      // public abstract R org.apache.tinkerpop.gremlin.util.function.TriFunction.apply(A,B,C)
      apply(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
    }
    export module TriFunction {
      export interface Static {
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util {
    export interface Gremlin extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Gremlin {
      export interface Static {
        // public static void org.apache.tinkerpop.gremlin.util.Gremlin.main(java.lang.String[]) throws java.io.IOException
        main(arg0: array_t<string_t>): void;
        mainP(arg0: array_t<string_t>): Promise<void>;
        // public static java.lang.String org.apache.tinkerpop.gremlin.util.Gremlin.version()
        version(): string;
        versionP(): Promise<string>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util {
    export interface ScriptEngineCache extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ScriptEngineCache {
      export interface Static {
        // public static javax.script.ScriptEngine org.apache.tinkerpop.gremlin.util.ScriptEngineCache.get(java.lang.String)
        get(arg0: string_t): ScriptEngine;
        getP(arg0: string_t): Promise<ScriptEngine>;
        DEFAULT_SCRIPT_ENGINE: string;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util {
    export interface Serializer extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Serializer {
      export interface Static {
        // public static java.lang.Object org.apache.tinkerpop.gremlin.util.Serializer.deserializeObject(byte[]) throws java.io.IOException,java.lang.ClassNotFoundException
        deserializeObject(arg0: object_array_t): object_t;
        deserializeObjectP(arg0: object_array_t): Promise<object_t>;
        // public static byte[] org.apache.tinkerpop.gremlin.util.Serializer.serializeObject(java.lang.Object) throws java.io.IOException
        serializeObject(arg0: object_t): object_t[];
        serializeObjectP(arg0: object_t): Promise<object_t[]>;
      }
    }
  }

  export module org.apache.tinkerpop.gremlin.util {
    export interface TimeUtil extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TimeUtil {
      export interface Static {
        // public static double org.apache.tinkerpop.gremlin.util.TimeUtil.clock(int,java.lang.Runnable)
        clock(arg0: integer_t, arg1: object_t): number;
        clockP(arg0: integer_t, arg1: object_t): Promise<number>;
        // public static double org.apache.tinkerpop.gremlin.util.TimeUtil.clock(java.lang.Runnable)
        clock(arg0: object_t): number;
        clockP(arg0: object_t): Promise<number>;
        // public static long org.apache.tinkerpop.gremlin.util.TimeUtil.millisSince(long)
        millisSince(arg0: long_t): longValue_t;
        millisSinceP(arg0: long_t): Promise<longValue_t>;
        // public static long org.apache.tinkerpop.gremlin.util.TimeUtil.minutesSince(long)
        minutesSince(arg0: long_t): longValue_t;
        minutesSinceP(arg0: long_t): Promise<longValue_t>;
        // public static long org.apache.tinkerpop.gremlin.util.TimeUtil.secondsSince(long)
        secondsSince(arg0: long_t): longValue_t;
        secondsSinceP(arg0: long_t): Promise<longValue_t>;
        // public static long org.apache.tinkerpop.gremlin.util.TimeUtil.timeSince(long,java.util.concurrent.TimeUnit)
        timeSince(arg0: long_t, arg1: object_t): longValue_t;
        timeSinceP(arg0: long_t, arg1: object_t): Promise<longValue_t>;
      }
    }
  }

  export module org.codehaus.groovy.ast {
    export interface ClassNode extends Java.java.lang.Object {
      // public void org.codehaus.groovy.ast.AnnotatedNode.addAnnotation(org.codehaus.groovy.ast.AnnotationNode)
      addAnnotation(arg0: object_t): void;
      addAnnotationP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.AnnotatedNode.addAnnotations(java.util.List<org.codehaus.groovy.ast.AnnotationNode>)
      addAnnotations(arg0: List): void;
      addAnnotationsP(arg0: List): Promise<void>;
      // public org.codehaus.groovy.ast.ConstructorNode org.codehaus.groovy.ast.ClassNode.addConstructor(int,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)
      addConstructor(arg0: integer_t, arg1: object_array_t, arg2: array_t<ClassNode>, arg3: object_t): object_t;
      addConstructorP(arg0: integer_t, arg1: object_array_t, arg2: array_t<ClassNode>, arg3: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addConstructor(org.codehaus.groovy.ast.ConstructorNode)
      addConstructor(arg0: object_t): void;
      addConstructorP(arg0: object_t): Promise<void>;
      // public org.codehaus.groovy.ast.FieldNode org.codehaus.groovy.ast.ClassNode.addField(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)
      addField(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t): object_t;
      addFieldP(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addField(org.codehaus.groovy.ast.FieldNode)
      addField(arg0: object_t): void;
      addFieldP(arg0: object_t): Promise<void>;
      // public org.codehaus.groovy.ast.FieldNode org.codehaus.groovy.ast.ClassNode.addFieldFirst(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)
      addFieldFirst(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t): object_t;
      addFieldFirstP(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addFieldFirst(org.codehaus.groovy.ast.FieldNode)
      addFieldFirst(arg0: object_t): void;
      addFieldFirstP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.addInterface(org.codehaus.groovy.ast.ClassNode)
      addInterface(arg0: ClassNode): void;
      addInterfaceP(arg0: ClassNode): Promise<void>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.addMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)
      addMethod(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_array_t, arg4: array_t<ClassNode>, arg5: object_t): object_t;
      addMethodP(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_array_t, arg4: array_t<ClassNode>, arg5: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addMethod(org.codehaus.groovy.ast.MethodNode)
      addMethod(arg0: object_t): void;
      addMethodP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.addMixin(org.codehaus.groovy.ast.MixinNode)
      addMixin(arg0: object_t): void;
      addMixinP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.addObjectInitializerStatements(org.codehaus.groovy.ast.stmt.Statement)
      addObjectInitializerStatements(arg0: object_t): void;
      addObjectInitializerStatementsP(arg0: object_t): Promise<void>;
      // public org.codehaus.groovy.ast.PropertyNode org.codehaus.groovy.ast.ClassNode.addProperty(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.stmt.Statement,org.codehaus.groovy.ast.stmt.Statement)
      addProperty(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t, arg4: object_t, arg5: object_t): object_t;
      addPropertyP(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_t, arg4: object_t, arg5: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addProperty(org.codehaus.groovy.ast.PropertyNode)
      addProperty(arg0: object_t): void;
      addPropertyP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.addStaticInitializerStatements(java.util.List<org.codehaus.groovy.ast.stmt.Statement>,boolean)
      addStaticInitializerStatements(arg0: List, arg1: boolean_t): void;
      addStaticInitializerStatementsP(arg0: List, arg1: boolean_t): Promise<void>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.addSyntheticMethod(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.Parameter[],org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.stmt.Statement)
      addSyntheticMethod(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_array_t, arg4: array_t<ClassNode>, arg5: object_t): object_t;
      addSyntheticMethodP(arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: object_array_t, arg4: array_t<ClassNode>, arg5: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ClassNode.addTransform(java.lang.Class<? extends org.codehaus.groovy.transform.ASTTransformation>,org.codehaus.groovy.ast.ASTNode)
      addTransform(arg0: Class, arg1: object_t): void;
      addTransformP(arg0: Class, arg1: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.copyNodeMetaData(org.codehaus.groovy.ast.ASTNode)
      copyNodeMetaData(arg0: object_t): void;
      copyNodeMetaDataP(arg0: object_t): Promise<void>;
      // public boolean org.codehaus.groovy.ast.ClassNode.declaresInterface(org.codehaus.groovy.ast.ClassNode)
      declaresInterface(arg0: ClassNode): boolean;
      declaresInterfaceP(arg0: ClassNode): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.List<org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getAbstractMethods()
      getAbstractMethods(): List;
      getAbstractMethodsP(): Promise<List>;
      // public java.util.List<org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getAllDeclaredMethods()
      getAllDeclaredMethods(): List;
      getAllDeclaredMethodsP(): Promise<List>;
      // public java.util.Set<org.codehaus.groovy.ast.ClassNode> org.codehaus.groovy.ast.ClassNode.getAllInterfaces()
      getAllInterfaces(): Set;
      getAllInterfacesP(): Promise<Set>;
      // public java.util.List<org.codehaus.groovy.ast.AnnotationNode> org.codehaus.groovy.ast.ClassNode.getAnnotations(org.codehaus.groovy.ast.ClassNode)
      getAnnotations(arg0: ClassNode): List;
      getAnnotationsP(arg0: ClassNode): Promise<List>;
      // public java.util.List<org.codehaus.groovy.ast.AnnotationNode> org.codehaus.groovy.ast.ClassNode.getAnnotations()
      getAnnotations(): List;
      getAnnotationsP(): Promise<List>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public int org.codehaus.groovy.ast.ASTNode.getColumnNumber()
      getColumnNumber(): number;
      getColumnNumberP(): Promise<number>;
      // public org.codehaus.groovy.ast.CompileUnit org.codehaus.groovy.ast.ClassNode.getCompileUnit()
      getCompileUnit(): object_t;
      getCompileUnitP(): Promise<object_t>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getComponentType()
      getComponentType(): ClassNode;
      getComponentTypeP(): Promise<ClassNode>;
      // public org.codehaus.groovy.ast.ConstructorNode org.codehaus.groovy.ast.ClassNode.getDeclaredConstructor(org.codehaus.groovy.ast.Parameter[])
      getDeclaredConstructor(arg0: object_array_t): object_t;
      getDeclaredConstructorP(arg0: object_array_t): Promise<object_t>;
      // public java.util.List<org.codehaus.groovy.ast.ConstructorNode> org.codehaus.groovy.ast.ClassNode.getDeclaredConstructors()
      getDeclaredConstructors(): List;
      getDeclaredConstructorsP(): Promise<List>;
      // public org.codehaus.groovy.ast.FieldNode org.codehaus.groovy.ast.ClassNode.getDeclaredField(java.lang.String)
      getDeclaredField(arg0: string_t): object_t;
      getDeclaredFieldP(arg0: string_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getDeclaredMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])
      getDeclaredMethod(arg0: string_t, arg1: object_array_t): object_t;
      getDeclaredMethodP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
      // public java.util.List<org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getDeclaredMethods(java.lang.String)
      getDeclaredMethods(arg0: string_t): List;
      getDeclaredMethodsP(arg0: string_t): Promise<List>;
      // public java.util.Map<java.lang.String, org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getDeclaredMethodsMap()
      getDeclaredMethodsMap(): Map;
      getDeclaredMethodsMapP(): Promise<Map>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.AnnotatedNode.getDeclaringClass()
      getDeclaringClass(): ClassNode;
      getDeclaringClassP(): Promise<ClassNode>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getEnclosingMethod()
      getEnclosingMethod(): object_t;
      getEnclosingMethodP(): Promise<object_t>;
      // public org.codehaus.groovy.ast.FieldNode org.codehaus.groovy.ast.ClassNode.getField(java.lang.String)
      getField(arg0: string_t): object_t;
      getFieldP(arg0: string_t): Promise<object_t>;
      // public java.util.List<org.codehaus.groovy.ast.FieldNode> org.codehaus.groovy.ast.ClassNode.getFields()
      getFields(): List;
      getFieldsP(): Promise<List>;
      // public org.codehaus.groovy.ast.GenericsType[] org.codehaus.groovy.ast.ClassNode.getGenericsTypes()
      getGenericsTypes(): object_t[];
      getGenericsTypesP(): Promise<object_t[]>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getGetterMethod(java.lang.String)
      getGetterMethod(arg0: string_t): object_t;
      getGetterMethodP(arg0: string_t): Promise<object_t>;
      // public java.util.Iterator<org.codehaus.groovy.ast.InnerClassNode> org.codehaus.groovy.ast.ClassNode.getInnerClasses()
      getInnerClasses(): Iterator;
      getInnerClassesP(): Promise<Iterator>;
      // public org.codehaus.groovy.ast.ClassNode[] org.codehaus.groovy.ast.ClassNode.getInterfaces()
      getInterfaces(): ClassNode[];
      getInterfacesP(): Promise<ClassNode[]>;
      // public int org.codehaus.groovy.ast.ASTNode.getLastColumnNumber()
      getLastColumnNumber(): number;
      getLastColumnNumberP(): Promise<number>;
      // public int org.codehaus.groovy.ast.ASTNode.getLastLineNumber()
      getLastLineNumber(): number;
      getLastLineNumberP(): Promise<number>;
      // public int org.codehaus.groovy.ast.ASTNode.getLineNumber()
      getLineNumber(): number;
      getLineNumberP(): Promise<number>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])
      getMethod(arg0: string_t, arg1: object_array_t): object_t;
      getMethodP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
      // public java.util.List<org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getMethods(java.lang.String)
      getMethods(arg0: string_t): List;
      getMethodsP(arg0: string_t): Promise<List>;
      // public java.util.List<org.codehaus.groovy.ast.MethodNode> org.codehaus.groovy.ast.ClassNode.getMethods()
      getMethods(): List;
      getMethodsP(): Promise<List>;
      // public org.codehaus.groovy.ast.MixinNode[] org.codehaus.groovy.ast.ClassNode.getMixins()
      getMixins(): object_t[];
      getMixinsP(): Promise<object_t[]>;
      // public int org.codehaus.groovy.ast.ClassNode.getModifiers()
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public org.codehaus.groovy.ast.ModuleNode org.codehaus.groovy.ast.ClassNode.getModule()
      getModule(): object_t;
      getModuleP(): Promise<object_t>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.getNameWithoutPackage()
      getNameWithoutPackage(): string;
      getNameWithoutPackageP(): Promise<string>;
      // public <T> T org.codehaus.groovy.ast.ASTNode.getNodeMetaData(java.lang.Object)
      getNodeMetaData(arg0: object_t): object_t;
      getNodeMetaDataP(arg0: object_t): Promise<object_t>;
      // public java.util.Map<?, ?> org.codehaus.groovy.ast.ASTNode.getNodeMetaData()
      getNodeMetaData(): Map;
      getNodeMetaDataP(): Promise<Map>;
      // public java.util.List<org.codehaus.groovy.ast.stmt.Statement> org.codehaus.groovy.ast.ClassNode.getObjectInitializerStatements()
      getObjectInitializerStatements(): List;
      getObjectInitializerStatementsP(): Promise<List>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getOuterClass()
      getOuterClass(): ClassNode;
      getOuterClassP(): Promise<ClassNode>;
      // public org.codehaus.groovy.ast.FieldNode org.codehaus.groovy.ast.ClassNode.getOuterField(java.lang.String)
      getOuterField(arg0: string_t): object_t;
      getOuterFieldP(arg0: string_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.PackageNode org.codehaus.groovy.ast.ClassNode.getPackage()
      getPackage(): object_t;
      getPackageP(): Promise<object_t>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.getPackageName()
      getPackageName(): string;
      getPackageNameP(): Promise<string>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getPlainNodeReference()
      getPlainNodeReference(): ClassNode;
      getPlainNodeReferenceP(): Promise<ClassNode>;
      // public java.util.List<org.codehaus.groovy.ast.PropertyNode> org.codehaus.groovy.ast.ClassNode.getProperties()
      getProperties(): List;
      getPropertiesP(): Promise<List>;
      // public org.codehaus.groovy.ast.PropertyNode org.codehaus.groovy.ast.ClassNode.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getSetterMethod(java.lang.String,boolean)
      getSetterMethod(arg0: string_t, arg1: boolean_t): object_t;
      getSetterMethodP(arg0: string_t, arg1: boolean_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.getSetterMethod(java.lang.String)
      getSetterMethod(arg0: string_t): object_t;
      getSetterMethodP(arg0: string_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getSuperClass()
      getSuperClass(): ClassNode;
      getSuperClassP(): Promise<ClassNode>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.getText()
      getText(): string;
      getTextP(): Promise<string>;
      // public java.util.Map<java.lang.Class<? extends org.codehaus.groovy.transform.ASTTransformation>, java.util.Set<org.codehaus.groovy.ast.ASTNode>> org.codehaus.groovy.ast.ClassNode.getTransforms(org.codehaus.groovy.control.CompilePhase)
      getTransforms(arg0: object_t): Map;
      getTransformsP(arg0: object_t): Promise<Map>;
      // public java.lang.Class org.codehaus.groovy.ast.ClassNode.getTypeClass()
      getTypeClass(): Class;
      getTypeClassP(): Promise<Class>;
      // public org.codehaus.groovy.ast.ClassNode[] org.codehaus.groovy.ast.ClassNode.getUnresolvedInterfaces(boolean)
      getUnresolvedInterfaces(arg0: boolean_t): ClassNode[];
      getUnresolvedInterfacesP(arg0: boolean_t): Promise<ClassNode[]>;
      // public org.codehaus.groovy.ast.ClassNode[] org.codehaus.groovy.ast.ClassNode.getUnresolvedInterfaces()
      getUnresolvedInterfaces(): ClassNode[];
      getUnresolvedInterfacesP(): Promise<ClassNode[]>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.getUnresolvedName()
      getUnresolvedName(): string;
      getUnresolvedNameP(): Promise<string>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getUnresolvedSuperClass(boolean)
      getUnresolvedSuperClass(arg0: boolean_t): ClassNode;
      getUnresolvedSuperClassP(arg0: boolean_t): Promise<ClassNode>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.getUnresolvedSuperClass()
      getUnresolvedSuperClass(): ClassNode;
      getUnresolvedSuperClassP(): Promise<ClassNode>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasDeclaredMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])
      hasDeclaredMethod(arg0: string_t, arg1: object_array_t): boolean;
      hasDeclaredMethodP(arg0: string_t, arg1: object_array_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasMethod(java.lang.String,org.codehaus.groovy.ast.Parameter[])
      hasMethod(arg0: string_t, arg1: object_array_t): boolean;
      hasMethodP(arg0: string_t, arg1: object_array_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.AnnotatedNode.hasNoRealSourcePosition()
      hasNoRealSourcePosition(): boolean;
      hasNoRealSourcePositionP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasPackageName()
      hasPackageName(): boolean;
      hasPackageNameP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasPossibleMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)
      hasPossibleMethod(arg0: string_t, arg1: object_t): boolean;
      hasPossibleMethodP(arg0: string_t, arg1: object_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasPossibleStaticMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)
      hasPossibleStaticMethod(arg0: string_t, arg1: object_t): boolean;
      hasPossibleStaticMethodP(arg0: string_t, arg1: object_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.hasProperty(java.lang.String)
      hasProperty(arg0: string_t): boolean;
      hasPropertyP(arg0: string_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.implementsInterface(org.codehaus.groovy.ast.ClassNode)
      implementsInterface(arg0: ClassNode): boolean;
      implementsInterfaceP(arg0: ClassNode): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isAnnotated()
      isAnnotated(): boolean;
      isAnnotatedP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isAnnotationDefinition()
      isAnnotationDefinition(): boolean;
      isAnnotationDefinitionP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isArray()
      isArray(): boolean;
      isArrayP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isDerivedFrom(org.codehaus.groovy.ast.ClassNode)
      isDerivedFrom(arg0: ClassNode): boolean;
      isDerivedFromP(arg0: ClassNode): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isDerivedFromGroovyObject()
      isDerivedFromGroovyObject(): boolean;
      isDerivedFromGroovyObjectP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isEnum()
      isEnum(): boolean;
      isEnumP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isGenericsPlaceHolder()
      isGenericsPlaceHolder(): boolean;
      isGenericsPlaceHolderP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isInterface()
      isInterface(): boolean;
      isInterfaceP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isPrimaryClassNode()
      isPrimaryClassNode(): boolean;
      isPrimaryClassNodeP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isRedirectNode()
      isRedirectNode(): boolean;
      isRedirectNodeP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isResolved()
      isResolved(): boolean;
      isResolvedP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isScript()
      isScript(): boolean;
      isScriptP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isScriptBody()
      isScriptBody(): boolean;
      isScriptBodyP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isStaticClass()
      isStaticClass(): boolean;
      isStaticClassP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.AnnotatedNode.isSynthetic()
      isSynthetic(): boolean;
      isSyntheticP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isSyntheticPublic()
      isSyntheticPublic(): boolean;
      isSyntheticPublicP(): Promise<boolean>;
      // public boolean org.codehaus.groovy.ast.ClassNode.isUsingGenerics()
      isUsingGenerics(): boolean;
      isUsingGenericsP(): Promise<boolean>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.makeArray()
      makeArray(): ClassNode;
      makeArrayP(): Promise<ClassNode>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.positionStmtsAfterEnumInitStmts(java.util.List<org.codehaus.groovy.ast.stmt.Statement>)
      positionStmtsAfterEnumInitStmts(arg0: List): void;
      positionStmtsAfterEnumInitStmtsP(arg0: List): Promise<void>;
      // public java.lang.Object org.codehaus.groovy.ast.ASTNode.putNodeMetaData(java.lang.Object,java.lang.Object)
      putNodeMetaData(arg0: object_t, arg1: object_t): object_t;
      putNodeMetaDataP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public org.codehaus.groovy.ast.ClassNode org.codehaus.groovy.ast.ClassNode.redirect()
      redirect(): ClassNode;
      redirectP(): Promise<ClassNode>;
      // public void org.codehaus.groovy.ast.ClassNode.removeConstructor(org.codehaus.groovy.ast.ConstructorNode)
      removeConstructor(arg0: object_t): void;
      removeConstructorP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.removeField(java.lang.String)
      removeField(arg0: string_t): void;
      removeFieldP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.removeMethod(org.codehaus.groovy.ast.MethodNode)
      removeMethod(arg0: object_t): void;
      removeMethodP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.removeNodeMetaData(java.lang.Object)
      removeNodeMetaData(arg0: object_t): void;
      removeNodeMetaDataP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.renameField(java.lang.String,java.lang.String)
      renameField(arg0: string_t, arg1: string_t): void;
      renameFieldP(arg0: string_t, arg1: string_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setAnnotated(boolean)
      setAnnotated(arg0: boolean_t): void;
      setAnnotatedP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.setColumnNumber(int)
      setColumnNumber(arg0: integer_t): void;
      setColumnNumberP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.ast.AnnotatedNode.setDeclaringClass(org.codehaus.groovy.ast.ClassNode)
      setDeclaringClass(arg0: ClassNode): void;
      setDeclaringClassP(arg0: ClassNode): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setEnclosingMethod(org.codehaus.groovy.ast.MethodNode)
      setEnclosingMethod(arg0: object_t): void;
      setEnclosingMethodP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setGenericsPlaceHolder(boolean)
      setGenericsPlaceHolder(arg0: boolean_t): void;
      setGenericsPlaceHolderP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setGenericsTypes(org.codehaus.groovy.ast.GenericsType[])
      setGenericsTypes(arg0: object_array_t): void;
      setGenericsTypesP(arg0: object_array_t): Promise<void>;
      // public void org.codehaus.groovy.ast.AnnotatedNode.setHasNoRealSourcePosition(boolean)
      setHasNoRealSourcePosition(arg0: boolean_t): void;
      setHasNoRealSourcePositionP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setInterfaces(org.codehaus.groovy.ast.ClassNode[])
      setInterfaces(arg0: array_t<ClassNode>): void;
      setInterfacesP(arg0: array_t<ClassNode>): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.setLastColumnNumber(int)
      setLastColumnNumber(arg0: integer_t): void;
      setLastColumnNumberP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.setLastLineNumber(int)
      setLastLineNumber(arg0: integer_t): void;
      setLastLineNumberP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.setLineNumber(int)
      setLineNumber(arg0: integer_t): void;
      setLineNumberP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setModifiers(int)
      setModifiers(arg0: integer_t): void;
      setModifiersP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setModule(org.codehaus.groovy.ast.ModuleNode)
      setModule(arg0: object_t): void;
      setModuleP(arg0: object_t): Promise<void>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.setName(java.lang.String)
      setName(arg0: string_t): string;
      setNameP(arg0: string_t): Promise<string>;
      // public void org.codehaus.groovy.ast.ASTNode.setNodeMetaData(java.lang.Object,java.lang.Object)
      setNodeMetaData(arg0: object_t, arg1: object_t): void;
      setNodeMetaDataP(arg0: object_t, arg1: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setRedirect(org.codehaus.groovy.ast.ClassNode)
      setRedirect(arg0: ClassNode): void;
      setRedirectP(arg0: ClassNode): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setScript(boolean)
      setScript(arg0: boolean_t): void;
      setScriptP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setScriptBody(boolean)
      setScriptBody(arg0: boolean_t): void;
      setScriptBodyP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ASTNode.setSourcePosition(org.codehaus.groovy.ast.ASTNode)
      setSourcePosition(arg0: object_t): void;
      setSourcePositionP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setStaticClass(boolean)
      setStaticClass(arg0: boolean_t): void;
      setStaticClassP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setSuperClass(org.codehaus.groovy.ast.ClassNode)
      setSuperClass(arg0: ClassNode): void;
      setSuperClassP(arg0: ClassNode): Promise<void>;
      // public void org.codehaus.groovy.ast.AnnotatedNode.setSynthetic(boolean)
      setSynthetic(arg0: boolean_t): void;
      setSyntheticP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setSyntheticPublic(boolean)
      setSyntheticPublic(arg0: boolean_t): void;
      setSyntheticPublicP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setUnresolvedSuperClass(org.codehaus.groovy.ast.ClassNode)
      setUnresolvedSuperClass(arg0: ClassNode): void;
      setUnresolvedSuperClassP(arg0: ClassNode): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.setUsingGenerics(boolean)
      setUsingGenerics(arg0: boolean_t): void;
      setUsingGenericsP(arg0: boolean_t): Promise<void>;
      // public java.lang.String org.codehaus.groovy.ast.ClassNode.toString(boolean)
      toString(arg0: boolean_t): string;
      toStringP(arg0: boolean_t): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public org.codehaus.groovy.ast.MethodNode org.codehaus.groovy.ast.ClassNode.tryFindPossibleMethod(java.lang.String,org.codehaus.groovy.ast.expr.Expression)
      tryFindPossibleMethod(arg0: string_t, arg1: object_t): object_t;
      tryFindPossibleMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public void org.codehaus.groovy.ast.ASTNode.visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
      visit(arg0: object_t): void;
      visitP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.ast.ClassNode.visitContents(org.codehaus.groovy.ast.GroovyClassVisitor)
      visitContents(arg0: object_t): void;
      visitContentsP(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ClassNode {
      export interface Static {
        new (arg0: string_t, arg1: integer_t, arg2: ClassNode, arg3: array_t<ClassNode>, arg4: object_array_t): org.codehaus.groovy.ast.ClassNode;
        new (arg0: string_t, arg1: integer_t, arg2: ClassNode): org.codehaus.groovy.ast.ClassNode;
        new (arg0: Class): org.codehaus.groovy.ast.ClassNode;
        EMPTY_ARRAY: ClassNode[];
        THIS: ClassNode;
        SUPER: ClassNode;
        ASM4: number;
        ASM5: number;
        V1_1: number;
        V1_2: number;
        V1_3: number;
        V1_4: number;
        V1_5: number;
        V1_6: number;
        V1_7: number;
        V1_8: number;
        ACC_PUBLIC: number;
        ACC_PRIVATE: number;
        ACC_PROTECTED: number;
        ACC_STATIC: number;
        ACC_FINAL: number;
        ACC_SUPER: number;
        ACC_SYNCHRONIZED: number;
        ACC_VOLATILE: number;
        ACC_BRIDGE: number;
        ACC_VARARGS: number;
        ACC_TRANSIENT: number;
        ACC_NATIVE: number;
        ACC_INTERFACE: number;
        ACC_ABSTRACT: number;
        ACC_STRICT: number;
        ACC_SYNTHETIC: number;
        ACC_ANNOTATION: number;
        ACC_ENUM: number;
        ACC_MANDATED: number;
        ACC_DEPRECATED: number;
        T_BOOLEAN: number;
        T_CHAR: number;
        T_FLOAT: number;
        T_DOUBLE: number;
        T_BYTE: number;
        T_SHORT: number;
        T_INT: number;
        T_LONG: number;
        H_GETFIELD: number;
        H_GETSTATIC: number;
        H_PUTFIELD: number;
        H_PUTSTATIC: number;
        H_INVOKEVIRTUAL: number;
        H_INVOKESTATIC: number;
        H_INVOKESPECIAL: number;
        H_NEWINVOKESPECIAL: number;
        H_INVOKEINTERFACE: number;
        F_NEW: number;
        F_FULL: number;
        F_APPEND: number;
        F_CHOP: number;
        F_SAME: number;
        F_SAME1: number;
        TOP: number;
        INTEGER: number;
        FLOAT: number;
        DOUBLE: number;
        LONG: number;
        NULL: number;
        UNINITIALIZED_THIS: number;
        NOP: number;
        ACONST_NULL: number;
        ICONST_M1: number;
        ICONST_0: number;
        ICONST_1: number;
        ICONST_2: number;
        ICONST_3: number;
        ICONST_4: number;
        ICONST_5: number;
        LCONST_0: number;
        LCONST_1: number;
        FCONST_0: number;
        FCONST_1: number;
        FCONST_2: number;
        DCONST_0: number;
        DCONST_1: number;
        BIPUSH: number;
        SIPUSH: number;
        LDC: number;
        ILOAD: number;
        LLOAD: number;
        FLOAD: number;
        DLOAD: number;
        ALOAD: number;
        IALOAD: number;
        LALOAD: number;
        FALOAD: number;
        DALOAD: number;
        AALOAD: number;
        BALOAD: number;
        CALOAD: number;
        SALOAD: number;
        ISTORE: number;
        LSTORE: number;
        FSTORE: number;
        DSTORE: number;
        ASTORE: number;
        IASTORE: number;
        LASTORE: number;
        FASTORE: number;
        DASTORE: number;
        AASTORE: number;
        BASTORE: number;
        CASTORE: number;
        SASTORE: number;
        POP: number;
        POP2: number;
        DUP: number;
        DUP_X1: number;
        DUP_X2: number;
        DUP2: number;
        DUP2_X1: number;
        DUP2_X2: number;
        SWAP: number;
        IADD: number;
        LADD: number;
        FADD: number;
        DADD: number;
        ISUB: number;
        LSUB: number;
        FSUB: number;
        DSUB: number;
        IMUL: number;
        LMUL: number;
        FMUL: number;
        DMUL: number;
        IDIV: number;
        LDIV: number;
        FDIV: number;
        DDIV: number;
        IREM: number;
        LREM: number;
        FREM: number;
        DREM: number;
        INEG: number;
        LNEG: number;
        FNEG: number;
        DNEG: number;
        ISHL: number;
        LSHL: number;
        ISHR: number;
        LSHR: number;
        IUSHR: number;
        LUSHR: number;
        IAND: number;
        LAND: number;
        IOR: number;
        LOR: number;
        IXOR: number;
        LXOR: number;
        IINC: number;
        I2L: number;
        I2F: number;
        I2D: number;
        L2I: number;
        L2F: number;
        L2D: number;
        F2I: number;
        F2L: number;
        F2D: number;
        D2I: number;
        D2L: number;
        D2F: number;
        I2B: number;
        I2C: number;
        I2S: number;
        LCMP: number;
        FCMPL: number;
        FCMPG: number;
        DCMPL: number;
        DCMPG: number;
        IFEQ: number;
        IFNE: number;
        IFLT: number;
        IFGE: number;
        IFGT: number;
        IFLE: number;
        IF_ICMPEQ: number;
        IF_ICMPNE: number;
        IF_ICMPLT: number;
        IF_ICMPGE: number;
        IF_ICMPGT: number;
        IF_ICMPLE: number;
        IF_ACMPEQ: number;
        IF_ACMPNE: number;
        GOTO: number;
        JSR: number;
        RET: number;
        TABLESWITCH: number;
        LOOKUPSWITCH: number;
        IRETURN: number;
        LRETURN: number;
        FRETURN: number;
        DRETURN: number;
        ARETURN: number;
        RETURN: number;
        GETSTATIC: number;
        PUTSTATIC: number;
        GETFIELD: number;
        PUTFIELD: number;
        INVOKEVIRTUAL: number;
        INVOKESPECIAL: number;
        INVOKESTATIC: number;
        INVOKEINTERFACE: number;
        INVOKEDYNAMIC: number;
        NEW: number;
        NEWARRAY: number;
        ANEWARRAY: number;
        ARRAYLENGTH: number;
        ATHROW: number;
        CHECKCAST: number;
        INSTANCEOF: number;
        MONITORENTER: number;
        MONITOREXIT: number;
        MULTIANEWARRAY: number;
        IFNULL: number;
        IFNONNULL: number;
      }
    }
  }

  export module org.codehaus.groovy.control {
    export interface CompilerConfiguration extends Java.java.lang.Object {
      // public org.codehaus.groovy.control.CompilerConfiguration org.codehaus.groovy.control.CompilerConfiguration.addCompilationCustomizers(org.codehaus.groovy.control.customizers.CompilationCustomizer...)
      addCompilationCustomizers(...arg0: CompilationCustomizer[]): CompilerConfiguration;
      addCompilationCustomizers(arg0: array_t<CompilationCustomizer>): CompilerConfiguration;
      addCompilationCustomizersP(...arg0: CompilationCustomizer[]): Promise<CompilerConfiguration>;
      addCompilationCustomizersP(arg0: array_t<CompilationCustomizer>): Promise<CompilerConfiguration>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.configure(java.util.Properties) throws org.codehaus.groovy.control.ConfigurationException
      configure(arg0: object_t): void;
      configureP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public org.codehaus.groovy.control.BytecodeProcessor org.codehaus.groovy.control.CompilerConfiguration.getBytecodePostprocessor()
      getBytecodePostprocessor(): object_t;
      getBytecodePostprocessorP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public java.util.List<java.lang.String> org.codehaus.groovy.control.CompilerConfiguration.getClasspath()
      getClasspath(): List;
      getClasspathP(): Promise<List>;
      // public java.util.List<org.codehaus.groovy.control.customizers.CompilationCustomizer> org.codehaus.groovy.control.CompilerConfiguration.getCompilationCustomizers()
      getCompilationCustomizers(): List;
      getCompilationCustomizersP(): Promise<List>;
      // public boolean org.codehaus.groovy.control.CompilerConfiguration.getDebug()
      getDebug(): boolean;
      getDebugP(): Promise<boolean>;
      // public java.lang.String org.codehaus.groovy.control.CompilerConfiguration.getDefaultScriptExtension()
      getDefaultScriptExtension(): string;
      getDefaultScriptExtensionP(): Promise<string>;
      // public java.util.Set<java.lang.String> org.codehaus.groovy.control.CompilerConfiguration.getDisabledGlobalASTTransformations()
      getDisabledGlobalASTTransformations(): Set;
      getDisabledGlobalASTTransformationsP(): Promise<Set>;
      // public java.util.Map<java.lang.String, java.lang.Object> org.codehaus.groovy.control.CompilerConfiguration.getJointCompilationOptions()
      getJointCompilationOptions(): Map;
      getJointCompilationOptionsP(): Promise<Map>;
      // public int org.codehaus.groovy.control.CompilerConfiguration.getMinimumRecompilationInterval()
      getMinimumRecompilationInterval(): number;
      getMinimumRecompilationIntervalP(): Promise<number>;
      // public java.util.Map<java.lang.String, java.lang.Boolean> org.codehaus.groovy.control.CompilerConfiguration.getOptimizationOptions()
      getOptimizationOptions(): Map;
      getOptimizationOptionsP(): Promise<Map>;
      // public java.io.PrintWriter org.codehaus.groovy.control.CompilerConfiguration.getOutput()
      getOutput(): object_t;
      getOutputP(): Promise<object_t>;
      // public org.codehaus.groovy.control.ParserPluginFactory org.codehaus.groovy.control.CompilerConfiguration.getPluginFactory()
      getPluginFactory(): object_t;
      getPluginFactoryP(): Promise<object_t>;
      // public boolean org.codehaus.groovy.control.CompilerConfiguration.getRecompileGroovySource()
      getRecompileGroovySource(): boolean;
      getRecompileGroovySourceP(): Promise<boolean>;
      // public java.lang.String org.codehaus.groovy.control.CompilerConfiguration.getScriptBaseClass()
      getScriptBaseClass(): string;
      getScriptBaseClassP(): Promise<string>;
      // public java.util.Set<java.lang.String> org.codehaus.groovy.control.CompilerConfiguration.getScriptExtensions()
      getScriptExtensions(): Set;
      getScriptExtensionsP(): Promise<Set>;
      // public java.lang.String org.codehaus.groovy.control.CompilerConfiguration.getSourceEncoding()
      getSourceEncoding(): string;
      getSourceEncodingP(): Promise<string>;
      // public java.lang.String org.codehaus.groovy.control.CompilerConfiguration.getTargetBytecode()
      getTargetBytecode(): string;
      getTargetBytecodeP(): Promise<string>;
      // public java.io.File org.codehaus.groovy.control.CompilerConfiguration.getTargetDirectory()
      getTargetDirectory(): object_t;
      getTargetDirectoryP(): Promise<object_t>;
      // public int org.codehaus.groovy.control.CompilerConfiguration.getTolerance()
      getTolerance(): number;
      getToleranceP(): Promise<number>;
      // public boolean org.codehaus.groovy.control.CompilerConfiguration.getVerbose()
      getVerbose(): boolean;
      getVerboseP(): Promise<boolean>;
      // public int org.codehaus.groovy.control.CompilerConfiguration.getWarningLevel()
      getWarningLevel(): number;
      getWarningLevelP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setBytecodePostprocessor(org.codehaus.groovy.control.BytecodeProcessor)
      setBytecodePostprocessor(arg0: object_t): void;
      setBytecodePostprocessorP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setClasspath(java.lang.String)
      setClasspath(arg0: string_t): void;
      setClasspathP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setClasspathList(java.util.List<java.lang.String>)
      setClasspathList(arg0: List): void;
      setClasspathListP(arg0: List): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setDebug(boolean)
      setDebug(arg0: boolean_t): void;
      setDebugP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setDefaultScriptExtension(java.lang.String)
      setDefaultScriptExtension(arg0: string_t): void;
      setDefaultScriptExtensionP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setDisabledGlobalASTTransformations(java.util.Set<java.lang.String>)
      setDisabledGlobalASTTransformations(arg0: Set): void;
      setDisabledGlobalASTTransformationsP(arg0: Set): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setJointCompilationOptions(java.util.Map<java.lang.String, java.lang.Object>)
      setJointCompilationOptions(arg0: Map): void;
      setJointCompilationOptionsP(arg0: Map): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setMinimumRecompilationInterval(int)
      setMinimumRecompilationInterval(arg0: integer_t): void;
      setMinimumRecompilationIntervalP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setOptimizationOptions(java.util.Map<java.lang.String, java.lang.Boolean>)
      setOptimizationOptions(arg0: Map): void;
      setOptimizationOptionsP(arg0: Map): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setOutput(java.io.PrintWriter)
      setOutput(arg0: object_t): void;
      setOutputP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setPluginFactory(org.codehaus.groovy.control.ParserPluginFactory)
      setPluginFactory(arg0: object_t): void;
      setPluginFactoryP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setRecompileGroovySource(boolean)
      setRecompileGroovySource(arg0: boolean_t): void;
      setRecompileGroovySourceP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setScriptBaseClass(java.lang.String)
      setScriptBaseClass(arg0: string_t): void;
      setScriptBaseClassP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setScriptExtensions(java.util.Set<java.lang.String>)
      setScriptExtensions(arg0: Set): void;
      setScriptExtensionsP(arg0: Set): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setSourceEncoding(java.lang.String)
      setSourceEncoding(arg0: string_t): void;
      setSourceEncodingP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setTargetBytecode(java.lang.String)
      setTargetBytecode(arg0: string_t): void;
      setTargetBytecodeP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setTargetDirectory(java.lang.String)
      setTargetDirectory(arg0: string_t): void;
      setTargetDirectoryP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setTargetDirectory(java.io.File)
      setTargetDirectory(arg0: object_t): void;
      setTargetDirectoryP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setTolerance(int)
      setTolerance(arg0: integer_t): void;
      setToleranceP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setVerbose(boolean)
      setVerbose(arg0: boolean_t): void;
      setVerboseP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.control.CompilerConfiguration.setWarningLevel(int)
      setWarningLevel(arg0: integer_t): void;
      setWarningLevelP(arg0: integer_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module CompilerConfiguration {
      export interface Static {
        new (arg0: CompilerConfiguration): org.codehaus.groovy.control.CompilerConfiguration;
        new (arg0: object_t): org.codehaus.groovy.control.CompilerConfiguration;
        new (): org.codehaus.groovy.control.CompilerConfiguration;
        // public static boolean org.codehaus.groovy.control.CompilerConfiguration.isPostJDK5(java.lang.String)
        isPostJDK5(arg0: string_t): boolean;
        isPostJDK5P(arg0: string_t): Promise<boolean>;
        // public static boolean org.codehaus.groovy.control.CompilerConfiguration.isPostJDK7(java.lang.String)
        isPostJDK7(arg0: string_t): boolean;
        isPostJDK7P(arg0: string_t): Promise<boolean>;
        JDK4: string;
        JDK5: string;
        JDK6: string;
        JDK7: string;
        JDK8: string;
        POST_JDK5: string;
        PRE_JDK5: string;
        currentJVMVersion: string;
        DEFAULT: CompilerConfiguration;
      }
    }
  }

  export module org.codehaus.groovy.control.customizers {
    export interface CompilationCustomizer extends Java.java.lang.Object {
      // public abstract void org.codehaus.groovy.control.CompilationUnit$PrimaryClassNodeOperation.call(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.classgen.GeneratorContext,org.codehaus.groovy.ast.ClassNode) throws org.codehaus.groovy.control.CompilationFailedException
      call(arg0: object_t, arg1: object_t, arg2: ClassNode): void;
      callP(arg0: object_t, arg1: object_t, arg2: ClassNode): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public org.codehaus.groovy.control.CompilePhase org.codehaus.groovy.control.customizers.CompilationCustomizer.getPhase()
      getPhase(): object_t;
      getPhaseP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean org.codehaus.groovy.control.CompilationUnit$PrimaryClassNodeOperation.needSortedInput()
      needSortedInput(): boolean;
      needSortedInputP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module CompilationCustomizer {
      export interface Static {
        new (arg0: object_t): org.codehaus.groovy.control.customizers.CompilationCustomizer;
      }
    }
  }

  export module org.codehaus.groovy.runtime {
    export interface NullObject extends Java.groovy.lang.GroovyObjectSupport {
      // public boolean org.codehaus.groovy.runtime.NullObject.asBoolean()
      asBoolean(): boolean;
      asBooleanP(): Promise<boolean>;
      // public java.lang.Object org.codehaus.groovy.runtime.NullObject.asType(java.lang.Class)
      asType(arg0: Class): object_t;
      asTypeP(arg0: Class): Promise<object_t>;
      // public java.lang.Object org.codehaus.groovy.runtime.NullObject.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public groovy.lang.MetaClass groovy.lang.GroovyObjectSupport.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Object groovy.lang.GroovyObjectSupport.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public boolean org.codehaus.groovy.runtime.NullObject.is(java.lang.Object)
      is(arg0: object_t): boolean;
      isP(arg0: object_t): Promise<boolean>;
      // public java.util.Iterator org.codehaus.groovy.runtime.NullObject.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.Object org.codehaus.groovy.runtime.NullObject.plus(java.lang.String)
      plus(arg0: string_t): object_t;
      plusP(arg0: string_t): Promise<object_t>;
      // public java.lang.Object org.codehaus.groovy.runtime.NullObject.plus(java.lang.Object)
      plus(arg0: object_t): object_t;
      plusP(arg0: object_t): Promise<object_t>;
      // public void groovy.lang.GroovyObjectSupport.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void groovy.lang.GroovyObjectSupport.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public <T> T org.codehaus.groovy.runtime.NullObject.with(groovy.lang.Closure<T>)
      with(arg0: Closure): object_t;
      withP(arg0: Closure): Promise<object_t>;
    }
    export module NullObject {
      export interface Static {
        // public static org.codehaus.groovy.runtime.NullObject org.codehaus.groovy.runtime.NullObject.getNullObject()
        getNullObject(): NullObject;
        getNullObjectP(): Promise<NullObject>;
      }
    }
  }

  export module org.codehaus.groovy.tools.shell {
    export interface Groovysh extends Java.java.lang.Object {
      // public void org.codehaus.groovy.tools.shell.Groovysh.displayBuffer(java.util.List)
      displayBuffer(arg0: List): void;
      displayBufferP(arg0: List): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.displayWelcomeBanner(org.codehaus.groovy.tools.shell.InteractiveShellRunner)
      displayWelcomeBanner(arg0: object_t): void;
      displayWelcomeBannerP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.Object org.codehaus.groovy.tools.shell.Groovysh.execute(java.lang.String)
      execute(arg0: string_t): object_t;
      executeP(arg0: string_t): Promise<object_t>;
      // public org.codehaus.groovy.tools.shell.Command org.codehaus.groovy.tools.shell.Shell.findCommand(java.lang.String,java.util.List<java.lang.String>)
      findCommand(arg0: string_t, arg1: List): object_t;
      findCommandP(arg0: string_t, arg1: List): Promise<object_t>;
      // public org.codehaus.groovy.tools.shell.Command org.codehaus.groovy.tools.shell.Shell.findCommand(java.lang.String)
      findCommand(arg0: string_t): object_t;
      findCommandP(arg0: string_t): Promise<object_t>;
      // public final org.codehaus.groovy.tools.shell.BufferManager org.codehaus.groovy.tools.shell.Groovysh.getBuffers()
      getBuffers(): object_t;
      getBuffersP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public final groovy.lang.Closure org.codehaus.groovy.tools.shell.Groovysh.getDefaultErrorHook()
      getDefaultErrorHook(): Closure;
      getDefaultErrorHookP(): Promise<Closure>;
      // public final groovy.lang.Closure org.codehaus.groovy.tools.shell.Groovysh.getDefaultResultHook()
      getDefaultResultHook(): Closure;
      getDefaultResultHookP(): Promise<Closure>;
      // public groovy.lang.Closure org.codehaus.groovy.tools.shell.Groovysh.getErrorHook()
      getErrorHook(): Closure;
      getErrorHookP(): Promise<Closure>;
      // public java.lang.String org.codehaus.groovy.tools.shell.Groovysh.getEvictedLine()
      getEvictedLine(): string;
      getEvictedLineP(): Promise<string>;
      // public jline.console.history.FileHistory org.codehaus.groovy.tools.shell.Groovysh.getHistory()
      getHistory(): object_t;
      getHistoryP(): Promise<object_t>;
      // public boolean org.codehaus.groovy.tools.shell.Groovysh.getHistoryFull()
      getHistoryFull(): boolean;
      getHistoryFullP(): Promise<boolean>;
      // public final java.util.List<java.lang.String> org.codehaus.groovy.tools.shell.Groovysh.getImports()
      getImports(): List;
      getImportsP(): Promise<List>;
      // public java.lang.String org.codehaus.groovy.tools.shell.Groovysh.getImportStatements()
      getImportStatements(): string;
      getImportStatementsP(): Promise<string>;
      // public java.lang.String org.codehaus.groovy.tools.shell.Groovysh.getIndentPrefix()
      getIndentPrefix(): string;
      getIndentPrefixP(): Promise<string>;
      // public int org.codehaus.groovy.tools.shell.Groovysh.getIndentSize()
      getIndentSize(): number;
      getIndentSizeP(): Promise<number>;
      // public final org.codehaus.groovy.tools.shell.Interpreter org.codehaus.groovy.tools.shell.Groovysh.getInterp()
      getInterp(): object_t;
      getInterpP(): Promise<object_t>;
      // public final org.codehaus.groovy.tools.shell.IO org.codehaus.groovy.tools.shell.Shell.getIo()
      getIo(): object_t;
      getIoP(): Promise<object_t>;
      // public groovy.lang.MetaClass org.codehaus.groovy.tools.shell.Shell.getMetaClass()
      getMetaClass(): MetaClass;
      getMetaClassP(): Promise<MetaClass>;
      // public org.codehaus.groovy.tools.shell.util.PackageHelper org.codehaus.groovy.tools.shell.Groovysh.getPackageHelper()
      getPackageHelper(): object_t;
      getPackageHelperP(): Promise<object_t>;
      // public final org.codehaus.groovy.tools.shell.Parser org.codehaus.groovy.tools.shell.Groovysh.getParser()
      getParser(): object_t;
      getParserP(): Promise<object_t>;
      // public java.lang.Object org.codehaus.groovy.tools.shell.Shell.getProperty(java.lang.String)
      getProperty(arg0: string_t): object_t;
      getPropertyP(arg0: string_t): Promise<object_t>;
      // public final org.codehaus.groovy.tools.shell.CommandRegistry org.codehaus.groovy.tools.shell.Shell.getRegistry()
      getRegistry(): object_t;
      getRegistryP(): Promise<object_t>;
      // public groovy.lang.Closure org.codehaus.groovy.tools.shell.Groovysh.getResultHook()
      getResultHook(): Closure;
      getResultHookP(): Promise<Closure>;
      // public org.codehaus.groovy.tools.shell.InteractiveShellRunner org.codehaus.groovy.tools.shell.Groovysh.getRunner()
      getRunner(): object_t;
      getRunnerP(): Promise<object_t>;
      // public java.io.File org.codehaus.groovy.tools.shell.Groovysh.getUserStateDirectory()
      getUserStateDirectory(): object_t;
      getUserStateDirectoryP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Object org.codehaus.groovy.tools.shell.Shell.invokeMethod(java.lang.String,java.lang.Object)
      invokeMethod(arg0: string_t, arg1: object_t): object_t;
      invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public boolean org.codehaus.groovy.tools.shell.Shell.isExecutable(java.lang.String)
      isExecutable(arg0: string_t): boolean;
      isExecutableP(arg0: string_t): Promise<boolean>;
      // public boolean org.codehaus.groovy.tools.shell.Groovysh.isHistoryFull()
      isHistoryFull(): boolean;
      isHistoryFullP(): Promise<boolean>;
      // public org.codehaus.groovy.tools.shell.Command org.codehaus.groovy.tools.shell.Shell.leftShift(org.codehaus.groovy.tools.shell.Command)
      leftShift(arg0: object_t): object_t;
      leftShiftP(arg0: object_t): Promise<object_t>;
      // public java.lang.Object org.codehaus.groovy.tools.shell.Shell.leftShift(java.lang.String)
      leftShift(arg0: string_t): object_t;
      leftShiftP(arg0: string_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public org.codehaus.groovy.tools.shell.Command org.codehaus.groovy.tools.shell.Shell.register(org.codehaus.groovy.tools.shell.Command)
      register(arg0: object_t): object_t;
      registerP(arg0: object_t): Promise<object_t>;
      // public java.lang.String org.codehaus.groovy.tools.shell.Groovysh.renderPrompt()
      renderPrompt(): string;
      renderPromptP(): Promise<string>;
      // public int org.codehaus.groovy.tools.shell.Groovysh.run(java.lang.String,java.util.List<java.lang.String>)
      run(arg0: string_t, arg1: List): number;
      runP(arg0: string_t, arg1: List): Promise<number>;
      // public int org.codehaus.groovy.tools.shell.Groovysh.run(java.lang.String)
      run(arg0: string_t): number;
      runP(arg0: string_t): Promise<number>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setErrorHook(groovy.lang.Closure)
      setErrorHook(arg0: Closure): void;
      setErrorHookP(arg0: Closure): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setEvictedLine(java.lang.String)
      setEvictedLine(arg0: string_t): void;
      setEvictedLineP(arg0: string_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setHistory(jline.console.history.FileHistory)
      setHistory(arg0: object_t): void;
      setHistoryP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setHistoryFull(boolean)
      setHistoryFull(arg0: boolean_t): void;
      setHistoryFullP(arg0: boolean_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setIndentSize(int)
      setIndentSize(arg0: integer_t): void;
      setIndentSizeP(arg0: integer_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Shell.setMetaClass(groovy.lang.MetaClass)
      setMetaClass(arg0: MetaClass): void;
      setMetaClassP(arg0: MetaClass): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setPackageHelper(org.codehaus.groovy.tools.shell.util.PackageHelper)
      setPackageHelper(arg0: object_t): void;
      setPackageHelperP(arg0: object_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Shell.setProperty(java.lang.String,java.lang.Object)
      setProperty(arg0: string_t, arg1: object_t): void;
      setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setResultHook(groovy.lang.Closure)
      setResultHook(arg0: Closure): void;
      setResultHookP(arg0: Closure): Promise<void>;
      // public void org.codehaus.groovy.tools.shell.Groovysh.setRunner(org.codehaus.groovy.tools.shell.InteractiveShellRunner)
      setRunner(arg0: object_t): void;
      setRunnerP(arg0: object_t): Promise<void>;
      // public groovy.lang.MetaClass org.codehaus.groovy.tools.shell.Groovysh.super$2$$getStaticMetaClass()
      super$2$$getStaticMetaClass(): MetaClass;
      super$2$$getStaticMetaClassP(): Promise<MetaClass>;
      // public java.lang.Object org.codehaus.groovy.tools.shell.Groovysh.super$2$execute(java.lang.String)
      super$2$execute(arg0: string_t): object_t;
      super$2$executeP(arg0: string_t): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Groovysh {
      export interface Static {
        new (arg0: ClassLoader, arg1: Binding, arg2: object_t, arg3: Closure): org.codehaus.groovy.tools.shell.Groovysh;
        new (arg0: ClassLoader, arg1: Binding, arg2: object_t): org.codehaus.groovy.tools.shell.Groovysh;
        new (arg0: Binding, arg1: object_t): org.codehaus.groovy.tools.shell.Groovysh;
        new (arg0: object_t): org.codehaus.groovy.tools.shell.Groovysh;
        new (): org.codehaus.groovy.tools.shell.Groovysh;
        // public static boolean org.codehaus.groovy.tools.shell.Groovysh.isTypeOrMethodDeclaration(java.util.List<java.lang.String>)
        isTypeOrMethodDeclaration(arg0: List): boolean;
        isTypeOrMethodDeclarationP(arg0: List): Promise<boolean>;
        COLLECTED_BOUND_VARS_MAP_VARNAME: string;
        INTERPRETER_MODE_PREFERENCE_KEY: string;
        AUTOINDENT_PREFERENCE_KEY: string;
        COLORS_PREFERENCE_KEY: string;
        METACLASS_COMPLETION_PREFIX_LENGTH_PREFERENCE_KEY: string;
        __$stMC: boolean;
      }
    }
  }

  export module org.codehaus.groovy.util {
    export interface ManagedReference extends Java.java.lang.Object {
      // public final void org.codehaus.groovy.util.ManagedReference.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void org.codehaus.groovy.util.ManagedReference.finalizeReference()
      finalizeReference(): void;
      finalizeReferenceP(): Promise<void>;
      // public final T org.codehaus.groovy.util.ManagedReference.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ManagedReference {
      export interface Static {
        new (arg0: object_t, arg1: object_t, arg2: object_t): org.codehaus.groovy.util.ManagedReference;
        new (arg0: ReferenceBundle, arg1: object_t): org.codehaus.groovy.util.ManagedReference;
      }
    }
  }

  export module org.codehaus.groovy.util {
    export interface ReferenceBundle extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): Class;
      getClassP(): Promise<Class>;
      // public org.codehaus.groovy.util.ReferenceManager org.codehaus.groovy.util.ReferenceBundle.getManager()
      getManager(): object_t;
      getManagerP(): Promise<object_t>;
      // public org.codehaus.groovy.util.ReferenceType org.codehaus.groovy.util.ReferenceBundle.getType()
      getType(): object_t;
      getTypeP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ReferenceBundle {
      export interface Static {
        new (arg0: object_t, arg1: object_t): org.codehaus.groovy.util.ReferenceBundle;
        // public static org.codehaus.groovy.util.ReferenceBundle org.codehaus.groovy.util.ReferenceBundle.getHardBundle()
        getHardBundle(): ReferenceBundle;
        getHardBundleP(): Promise<ReferenceBundle>;
        // public static org.codehaus.groovy.util.ReferenceBundle org.codehaus.groovy.util.ReferenceBundle.getPhantomBundle()
        getPhantomBundle(): ReferenceBundle;
        getPhantomBundleP(): Promise<ReferenceBundle>;
        // public static org.codehaus.groovy.util.ReferenceBundle org.codehaus.groovy.util.ReferenceBundle.getSoftBundle()
        getSoftBundle(): ReferenceBundle;
        getSoftBundleP(): Promise<ReferenceBundle>;
        // public static org.codehaus.groovy.util.ReferenceBundle org.codehaus.groovy.util.ReferenceBundle.getWeakBundle()
        getWeakBundle(): ReferenceBundle;
        getWeakBundleP(): Promise<ReferenceBundle>;
      }
    }
  }

}
